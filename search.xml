<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理与设计-Lab2-编译器认知实验</title>
      <link href="/posts/673/"/>
      <url>/posts/673/</url>
      
        <content type="html"><![CDATA[<p>GCC编译器和LLVM编译器的编译过程以及效率对比</p><a id="more"></a><h2 id="实验目的和内容"><a href="#实验目的和内容" class="headerlink" title="实验目的和内容"></a>实验目的和内容</h2><p>本实验主要的内容为在 Linux 平台上安装和运行工业界常用的编译器 GCC 和 LLVM，如果系统中没有安装，则需要首先安装编译器，安装完成后编写简单的测 试程序，使用编译器编译，并观察中间输出结果。</p><h2 id="实现的内容与方法"><a href="#实现的内容与方法" class="headerlink" title="实现的内容与方法"></a>实现的内容与方法</h2><blockquote><p>本机环境： 系统masOS Catalina，已安装homebrew</p></blockquote><h3 id="1-编译器安装"><a href="#1-编译器安装" class="headerlink" title="1 编译器安装"></a>1 编译器安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装gcc8</span><br>brew install gcc@8<br><span class="hljs-comment"># 安装clang</span><br>xcode-select --install<br></code></pre></td></tr></table></figure><h3 id="2-编写测试程序"><a href="#2-编写测试程序" class="headerlink" title="2 编写测试程序"></a>2 编写测试程序</h3><ul><li><p>单个程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"hello\n"</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多个程序</p><p><code>cal.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> num1, num2;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;num1,&amp;num2);<br>  <span class="hljs-keyword">int</span> res = add(num1,num2);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, res);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>add.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"add.h"</span></span><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> num1+num2;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-运行编译器进行观测"><a href="#3-运行编译器进行观测" class="headerlink" title="3 运行编译器进行观测"></a>3 运行编译器进行观测</h3><h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h4><ul><li><p>查看编译器版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -v<br>$ gcc version 8.3.0 (Homebrew GCC 8.3.0_2)<br></code></pre></td></tr></table></figure></li><li><p>使用gcc编译单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o hello hello.c<br></code></pre></td></tr></table></figure></li><li><p>使用gcc编译链接多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o cal cal.c add.c<br></code></pre></td></tr></table></figure></li><li><p>查看预处理结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -E hello.c -o hello.i<br></code></pre></td></tr></table></figure></li><li><p>查看语法分析树</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fdump-tree-all hello.c<br></code></pre></td></tr></table></figure><p>生成的文件列表，使用<code>ls -ltr</code> 查看(按生成顺序倒序排列)</p><img src="Screenshot2020-03-0321.36.26.png" alt="执行命令后产生的文件列表" /><p>查看中间代码生成结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fdump-rtl-all hello.c<br></code></pre></td></tr></table></figure><p>生成的文件列表，使用<code>ls -ltr</code> 查看(按生成顺序倒序排列)</p><img src="Screenshot2020-03-0321.37.11.png" alt="执行命令后产生的文件列表" style="zoom:33%;" /></li></ul><ul><li><p>查看生成的目标代码(汇编代码)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o hello.asm -S hello.c<br></code></pre></td></tr></table></figure></li></ul><h4 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h4><ul><li><p>查看编译器的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -v<br></code></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Apple clang version 11.0.0 (clang-1100.0.33.17)<br>Target: x86_64-apple-darwin19.3.0<br>Thread model: posix<br>InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin<br></code></pre></td></tr></table></figure></li><li><p>使用编译器编译单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -o hello hello.c<br></code></pre></td></tr></table></figure></li><li><p>使用编译器编译链接多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -o cal cal.c add.c<br></code></pre></td></tr></table></figure></li><li><p>查看编译流程和阶段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -ccc-print-phases test.c -c<br></code></pre></td></tr></table></figure><p>终端的输出：</p><img src="Screenshot2020-03-0321.59.14.png" alt="终端的输出"  /></li><li><p>查看词法分析结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -fsyntax-only -Xclang -dump-tokens<br></code></pre></td></tr></table></figure></li><li><p>查看词法分析结果 2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c  -fsyntax-only -Xclang -dump-raw-tokens<br></code></pre></td></tr></table></figure><p>生成的结果：</p><img src="Screenshot2020-03-0322.43.03.png" alt="终端的输出"  /></li><li><p>查看语义分析结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -Xclang -ast-dump <span class="hljs-comment"># error link</span><br>clang -fsyntax-only -Xclang -ast-dump test.c<br></code></pre></td></tr></table></figure><p>部分结果：</p><img src="Screenshot2020-03-0322.44.20.png" alt="终端输出的末尾"  /></li><li><p>查看语义分析结果 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -Xclang -ast-view    <span class="hljs-comment"># clang: error: linker command failed with exit code 1 </span><br>clang test.c -fsyntax-only -Xclang -ast-view  <span class="hljs-comment"># 因为缺乏gv环境 此命令未能得到成功结果</span><br></code></pre></td></tr></table></figure><p>部分结果：</p><img src="Screenshot2020-03-0322.51.40.png" alt="终端的输出"  /></li><li><p>查看编译优化的结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -S -mllvm -<span class="hljs-built_in">print</span>-after-all<br></code></pre></td></tr></table></figure><p>部分结果：</p><img src="Screenshot2020-03-0323.03.18.png" alt="终端输出的末尾"  /></li><li><p>查看生成的目标代码结果 Target code generation</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang –S test.c<br></code></pre></td></tr></table></figure><p>生成的目标代码文件开头：</p><img src="Screenshot2020-03-0323.07.04.png" alt="test.s文件"  /></li></ul><h2 id="运行结果分析"><a href="#运行结果分析" class="headerlink" title="运行结果分析"></a>运行结果分析</h2><p><img src="856214-20170831203214640-1792176674.png" alt="gcc编译全过程"></p><h3 id="GCC-运行结果分析"><a href="#GCC-运行结果分析" class="headerlink" title="GCC 运行结果分析"></a>GCC 运行结果分析</h3><blockquote><p><a href="https://blog.csdn.net/njys1/article/details/53448558" rel="external nofollow noreferrer">GCC进行编译的大概步骤：</a></p><p>词法分析 –&gt;  语法分析 –&gt;  生成语法树 –&gt; 高级gimple –&gt;  低级gimple  –&gt;  cfg  –&gt; ssa –&gt;RTL –&gt;目标代码(汇编代码)</p><p><a href="https://blog.csdn.net/doniexun/article/details/38324577" rel="external nofollow noreferrer">GENERIC、GIMPLE和RTL三者构成了gcc中间语言的全部，它们以GIMPLE为核心，由GENERIC承上，由RTL启下，在源文件和目标指令之间的鸿沟之上构建了一个三层的过渡。</a></p></blockquote><h4 id="预处理结果"><a href="#预处理结果" class="headerlink" title="预处理结果"></a>预处理结果</h4><ul><li><p>运行<code>gcc -E hello.c –o hello.i</code>，将会产生 hello.i 文件，这就是 hello.c 经过预处理后的文件。原本4行的程序，经过预处理，得到了580行的预处理文件</p><p>预处理文件开头：</p><p><img src="Screenshot2020-03-0521.27.27.png" alt="预处理文件开头"></p><p>预处理文件结尾：</p><p><img src="Screenshot2020-03-0521.28.30.png" alt="预处理文件结尾"></p></li><li><p>可以看到， hello.c 经过预处理后得到的 hello.i文件，除了原本的几行代码之外，还包含了很多额外的变量、函数等等，这些都是预处理器处理的结果。</p></li></ul><h4 id="语法分析树"><a href="#语法分析树" class="headerlink" title="语法分析树"></a>语法分析树</h4><ul><li><p>运行<code>gcc -fdump-tree-all hello.c</code>后，一共生成了22个文件，其命名格式均为<code>filename.c.&lt;num&gt;t.name</code></p>  <img src="Screenshot2020-03-0522.08.47-3423784.png" alt="语法分析树"  /></li><li><p>分析这22个文件内容(顺序为生成的先后顺序)：</p><ul><li>046t.profile_estimate/318t.statistics为空白；</li><li>007t.lower/010t.eh相同；</li><li>012t.ompexp/013t.printf-return-value1/019t.fixup_cfg1相同；</li><li>020t.ssa/027t.fixup_cfg3/029t.einline/088t.fixup_cfg4/222t.veclower/223t.cplxlower0/225t.switchlower/232t.optimized相同</li><li>028t.local-fnsummary1/050t.local-fnsummary2相同</li><li>其余还有004t.gimple/006t.omplower/011t.cfg /049t.release_ssa 不与其他相同</li></ul></li><li><p>以下重点对比源文件与004t.gimple/010(即007t.lower)/013的区别，其排序与生成顺序一致<br>  <img src="Screenshot2020-03-0520.38.22.png" alt="四个重要文件对比"></p></li></ul><ol><li><p><strong>main函数转变为高端gimple的过程</strong> ：004t.Gimple</p><blockquote><p>GCC 利用 “gimplifier” 将 GENERIC 中间表示转换为 GIMPLE中间表示。</p><p>语法树到高端gimple的转化是以语法树的节点为单位进行遍历的</p></blockquote><ul><li>以函数为单位进行转化，并且将函数内部的所有变量以及编译器为方便生成运行时结构所创建的临时变量都提高到函数最开始的位置，为计算栈空间和使用寄存器提供依据</li><li>将函数执行语句集中到一起，并且其顺序与语法树种所表现的顺序一致，为配合运行时结构会增减一些语句</li></ul></li><li><p><strong>return语句转低端gimple的处理</strong>：007t.lower/010t.eh：</p><blockquote><p>GIMPLE中有一个lower的动作，用于将高层次的GIMPLE表示，解析成低层次的，这个lower动作在pass_lower_cf中完成。</p><p>高端gimple到低端gimple主要完成数据合并，代码合并和返回语句合并，有利于最后生成更规整的后端代码</p></blockquote><ul><li>在gimple_return语句的位置插入一条goto lable跳转语句</li><li>将gimple_return语句暂存起来，将gimple语句序列中的gimple_return语句删掉</li><li>待所有的语句都lower gimple转换完之后，再将gimple_return语句做gimple_return的处理，处理过程是先添加一个标号，以便于第一句的goto  lable对应上，然后再把return  语句插入gimple语句序列</li></ul></li></ol><blockquote><p>经过以上处理得到的低端gimple已经足以支持生成最终的目标代码，确定运行时结构了，但是gcc考虑到优化，在此基础上转化了cfg和ssa结构</p></blockquote><ol start="3"><li><p><strong>低端gimple到cfg结构中间代码</strong>：012t.ompexp/013t.printf-return-value1/019t.fixup_cfg1</p><blockquote><p>GCC设计cfg ( control  flow  graph ) 主要是用于函数内部的控制流转化，跨函数间的逻辑优化由于逻辑比较复杂，GCC目前还没有完成</p><p>cfg的主要作用是在低端gimple的基础上将语句分成几个基本块(basic block)，在基本块内，代码是顺序执行的，不存在跳转语句，如果有跳转语句，则放在块的最后，保证跳转只发生在块与块之间，即在gimple中，指令跳转的语句就是基本块的边界</p></blockquote><ul><li>013t与之后生成的hello.c.019t.fixup_cfg1/hello.c.027t.fixup_cfg3内容一致。相比007t.lower/010t.eh，语句被划分为几块，goto语句被取代。</li></ul></li><li><p><strong>cfg转ssa</strong>：020t.ssa</p><blockquote><p>为每个变量增加一个版本号，用于数据流的优化，它的结构是跟低端gimple的结构相同的</p></blockquote><p>  如下cfs1与ssa的对比，变量int下多了一个版本号</p><p><img src="Screenshot2020-03-0522.28.18.png" alt="cfs1与ssa"></p></li></ol><h4 id="中间结果及目标代码"><a href="#中间结果及目标代码" class="headerlink" title="中间结果及目标代码"></a>中间结果及目标代码</h4><blockquote><p>考虑到平台的通用性，gcc生成了一套通用的RTL结构，将在RTL的基础上转化为目标代码</p></blockquote><p>使用<code>gcc -fdump-tree-all hello.c</code> 查看生成的中间结果</p><img src="Screenshot2020-03-0522.36.09.png" alt="生成的中间结果文件列表"  /><ul><li><p>生成RTL</p><p>由于GCC是支持多种平台的，在不同的平台上生成的汇编代码的格式肯定是不同的，如果为每个平台的汇编代码都写一套优化逻辑，是不太现实的，为了解决这个问题，GCC提供了一种中间形式的汇编语言RTL(Register  Transfer  Language)，它与具体的平台无关，这样所有的优化都可以基于RTL了，在所有的优化完成之后，再转变成针对不同硬件平台的汇编代码，每一条RTL语句称为一条insn语句</p></li><li><p>转化为RTL阶段的主要步骤</p><ul><li>转化为初始的RTL</li><li>明确初始的RTL中的运行时结构信息，此时把虚拟寄存器更新为真实的寄存器</li></ul></li><li><p>RTL生成目标代码，也就是汇编代码，<code>gcc -o hello.asm -S hello.c</code> 查看</p><p>﻿<img src="Screenshot2020-03-0522.41.55.png" alt="hello.c源文件与hello.asm对比"></p></li></ul><h3 id="LLVM-运行结果分析"><a href="#LLVM-运行结果分析" class="headerlink" title="LLVM 运行结果分析"></a><a href="">LLVM 运行结果分析</a></h3><ul><li><p>查看编译流程和阶段<code>clang -ccc-print-phases test.c -c</code></p><p>返回的结果</p><p><img src="Screenshot2020-03-0321.59.14.png" alt="终端的输出"></p><ul><li>0：获得源代码<code>main.c</code>，c语言文件</li><li>1：预处理阶段，做相应处理</li><li>2：编译阶段</li><li>3：步骤通过后端进行汇编前的处理</li><li>4：汇编阶段</li><li>5：链接阶段，做相应处理<br>通过如上步骤可以了解到整个过程以及过程中的一些信息。例如首先进行的预处理操作可以使用如下命令查看具体信息：</li></ul></li></ul><ol><li><p>预处理阶段 <code>clang -E test.c</code></p><p>这个过程包括宏的替换，头文件的导入等等</p></li><li><p>词法分析</p><p>在此步骤会把代码切成一个个Token，比如大小括号，等于号还有字符串等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 词法分析1</span><br>clang -fsyntax-only -Xclang -dump-tokens test.c<br><span class="hljs-comment"># 词法分析2</span><br>clang test.c  -fsyntax-only -Xclang -dump-raw-tokens<br></code></pre></td></tr></table></figure><p>图片中依次为词法分析1，词法分析2和源文件</p><p><img src="Screenshot2020-03-0523.09.17.png" alt="词法分析1，词法分析2和源文件"></p><p>可以看到，-dump-raw-tokens仅仅输出我们编写的test.c的词法分析结果，而-dump-tokens输出还包括所有头文件的词法分析结果</p></li><li><p>语法分析</p><p>验证程序的语法是否正确，然后将所有的节点组成抽象语法树AST</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法分析1</span><br>clang -fsyntax-only -Xclang -ast-dump test.c<br><span class="hljs-comment"># 语法分析2</span><br>clang test.c -fsyntax-only -Xclang -ast-view  <span class="hljs-comment"># 因为缺乏gv环境 此命令未能得到成功结果</span><br></code></pre></td></tr></table></figure><p>下图依次是语法分析1得到的抽象语法树ast，语法分析2的得到的语法树生成图的源文件。test.c的源代码</p><p><img src="Screenshot2020-03-0523.17.14.png" alt="ast"></p></li><li><p>这些步骤完成之后就要开始进行IR中间代码的生成了，代码生成器CodeGen会负责将语法树自顶向下遍历逐步翻译成LLVM IR，IR就是编译过程的前端的输出以及后端的输入；此步骤LLVM会去做些优化工作，在Xcode的编译设置里也可以设置优化的级别-01，-03，-0s等；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看生成的IR中间代码</span><br>clang -S -fobjc-arc -emit-llvm main.m -o main.ll<br><span class="hljs-comment"># 查看LLVM编译优化的结果</span><br>clang test.c -S -mllvm -<span class="hljs-built_in">print</span>-after-all<br></code></pre></td></tr></table></figure><p>下图依次为中间代码，LLVM编译优化的结果</p><p><img src="Screenshot2020-03-0523.27.37.png" alt="中间代码及优化结果"></p></li><li><p>生成汇编文件<code>clang –S test.c</code></p><p>下图左为源文件，右为生成的汇编代码</p><p><img src="Screenshot2020-03-0523.30.49.png" alt="源文件和汇编代码"></p></li></ol><h3 id="GCC-与-LLVM-对比分析"><a href="#GCC-与-LLVM-对比分析" class="headerlink" title="GCC 与 LLVM 对比分析"></a>GCC 与 LLVM 对比分析</h3><p>源文件均为C语言的hello world</p><p>下图左为gcc生成的汇编文件，右为llvm生成的汇编文件</p><p><img src="Screenshot2020-03-0523.31.58.png" alt="汇编文件对比"></p><h2 id="优化编译"><a href="#优化编译" class="headerlink" title="优化编译"></a>优化编译</h2><blockquote><p><a href="https://blog.csdn.net/qq_31108501/article/details/51842166" rel="external nofollow noreferrer">gcc提供了从O0-O3以及Os这几种不同的优化级别供大家选择</a></p><ul><li>O0： 不做任何优化，这是默认的编译选项。 </li><li>-O和-O1： 对程序做部分编译优化，对于大函数,优化编译占用稍微多的时间和相当大的内存。使用本项优化，编译器会尝试减小生成代码的尺寸，以及缩短执行时间，但并不执行需要占用大量编译时间的优化。 </li><li>-O2： 是比O1更高级的选项，进行更多的优化。Gcc将执行几乎所有的不包含时间和空间折中的优化。当设置O2选项时，编译器并不进行循环打开（）loop unrolling以及函数内联。与O1比较而言，O2优化增加了编译时间的基础上，提高了生成代码的执行效率。 </li><li>-O3： 比O2更进一步的进行优化。在包含了O2所有的优化的基础上，又打开了以下优化选项： <ul><li>-finline-functions：内联简单的函数到被调用函数中。由编译器启发式的决定哪些函数足够简单可以做这种内联优化。默认情况下，编译器限制内联的尺寸，3.4.6中限制为600（具体含义不详，指令条数或代码size？）可以通过-finline-limit=n改变这个长度。这种优化技术不为函数创建单独的汇编语言代码， 而是把函数代码包含在调度程序的代码中。 对于多次被调用的函数来说, 为每次函数调用复制函数代码。 虽然这样对于减少代码长度不利, 但是通过最充分的利用指令缓存代码, 而不是在每次函数调用时进行分支操作, 可以提高性能。 </li><li>-fweb：构建用于保存变量的伪寄存器网络。 伪寄存器包含数据, 就像他们是寄存器一样, 但是可以使用各种其他优化技术进行优化, 比如cse和loop优化技术。这种优化会使得调试变得更加的不可能，因为变量不再存放于原本的寄存器中。 </li><li>-frename-registers：在寄存器分配后，通过使用registers left over来避免预定代码中的虚假依赖。这会使调试变得非常困难，因为变量不再存放于原本的寄存器中了。 </li><li>-funswitch-loops：将无变化的条件分支移出循环，取而代之的将结果副本放入循环中。</li></ul></li></ul></blockquote><p>优化编译测试文件采用<a href="https://www.annewqx.top/posts/53125/">Lab1</a>中的快速排序代码</p><h3 id="GCC优化编译"><a href="#GCC优化编译" class="headerlink" title="GCC优化编译"></a>GCC优化编译</h3><ul><li><p>规模为50000的1000000以内的不重复随机数(算法效率$O(log_n))$</p><img src="Screenshot2020-03-0523.55.03.png" alt="gcc优化编译1"  /></li><li><p>规模为50000的逆序排列(算法效率$O(n^2)$)</p><img src="Screenshot2020-03-0523.57.14.png" alt="gcc优化编译2"  /></li><li><p>每组实验重复5次，最后运行时间取平均数，单位为ms</p><table><thead><tr><th><strong>优化方式</strong></th><th><strong>O(logn)</strong></th><th><strong>O(N^2)</strong></th></tr></thead><tbody><tr><td>-O0</td><td>6</td><td>2830</td></tr><tr><td>-O1</td><td>3</td><td>505.4</td></tr><tr><td>-O2</td><td>4</td><td>835</td></tr><tr><td>-O3</td><td>3</td><td>567</td></tr></tbody></table></li><li><p>gcc四种优化编译效率对比<img src="Screenshot2020-03-0600.45.28.png" alt="gcc四种优化效率对比"></p></li></ul><h3 id="LLVM优化编译"><a href="#LLVM优化编译" class="headerlink" title="LLVM优化编译"></a>LLVM优化编译</h3><ul><li><p>规模为50000的1000000以内的不重复随机数</p><img src="Screenshot2020-03-0523.58.45.png" alt="lvmm优化编译1"  /></li><li><p>规模为50000的逆序排列</p><img src="Screenshot2020-03-0600.00.30.png" alt="lvmm优化编译2"  /></li><li><p>每组实验重复5次，最后运行时间取平均数，单位为ms</p><table><thead><tr><th><strong>优化方式</strong></th><th><strong>O(logn)</strong></th><th><strong>O(N^2)</strong></th></tr></thead><tbody><tr><td>-O0</td><td>6</td><td>2368</td></tr><tr><td>-O1</td><td>3</td><td>567</td></tr><tr><td>-O2</td><td>3</td><td>574</td></tr><tr><td>-O3</td><td>3</td><td>556</td></tr></tbody></table></li></ul><p>llvm四种优化编译效率对比</p><p><img src="Screenshot2020-03-0600.51.28.png" alt="llvm四种优化编译效率对比"></p><h3 id="GCC与LLVM优化编译效果对比"><a href="#GCC与LLVM优化编译效果对比" class="headerlink" title="GCC与LLVM优化编译效果对比"></a>GCC与LLVM优化编译效果对比</h3><p><img src="Screenshot2020-03-0600.52.06.png" alt="GCC与LLVM优化编译效果对比"></p><ul><li>可以看出，总体而言，llvm优化效率是优于gcc的</li><li>面对快排这样的少循环多递归的情况，-O2的优化效率是不如-O1和-O3的</li></ul><h2 id="实验心得体会"><a href="#实验心得体会" class="headerlink" title="实验心得体会"></a>实验心得体会</h2><ul><li><p>了解工业界常用的编译器 GCC 和 LLVM。以前我对编译器之前的区别并没有比较明确的认知，这此实验之后我才知道macOS系统里的gcc命令实际上调用的是clang命令；</p></li><li><p>熟悉编译器的安装和使用过程。本次实验的过程较实验1曲折了很多，过程中也遇到了很多波折，虽然很多波折是与实验本身无关的—-比如安装GCC编译器需要把下载源换为国内的tuna/USTC；<code>wget</code> <code>brew</code>等软件包管理工具，在下载软件不成功的时候会尝试下载软件的源代码，然后在本地编译；</p></li><li><p>了解编译器的优化效果。本次实验并不是我们第一次接触gcc命令，以前我们学习过了基础的gcc命令参数，怎么进行gdb调试，以及makefile的写法；通过本次实验，我终于又系统了解了一遍gcc命令的相关参数的作用，进一步了解了编译优化；</p></li><li><p>观察编译器工作过程中生成的中间文件的格式和内容。本次实验中，我进一步了解了GCC编译器编译的全过程，以及这些过程存在的原因。gcc编译的过程有词法分析 –&gt;  语法分析 –&gt;  生成语法树 –&gt; 高级gimple –&gt;  低级gimple  –&gt;  cfg  –&gt; ssa –&gt;RTL –&gt;目标代码(汇编代码)。低端gimple已经足以支持生成最终的目标代码，确定运行结构了，但是gcc考虑到优化，还在此基础上转化了cfg和ssa结构。RTL结构是gcc为了平台的通用性而生成的一套通用的RTL结构，最终在RTL的基础上转化为汇编代码。</p></li><li><p>本次实验进一步为我们对编译器的学习和构造奠定了基础。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Report </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compilation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssr to v2ray</title>
      <link href="/posts/30155/"/>
      <url>/posts/30155/</url>
      
        <content type="html"><![CDATA[<p>三月一日到了，成熟的小孩要学会自己换梯子的协议了</p><a id="more"></a><blockquote><p>引用连接：</p><ul><li>官方GitHub：<a href="https://github.com/v2ray/v2ray-core" rel="external nofollow noreferrer">v2ray/<em>v2ray</em>-core</a> </li><li>官方网站：<a href="https://www.v2ray.com" rel="external nofollow noreferrer">Project V</a></li><li>Mac/Windows/Android客户端： <a href="https://www.v2ray.com/awesome/tools.html" rel="external nofollow noreferrer">图形客户端</a></li><li>一键式脚本<ul><li><a href="https://github.com/233boy/v2ray" rel="external nofollow noreferrer">233boy/<em>v2ray</em></a>（Github内容已经不展示）</li><li><a href="https://233v2.com/post/1/" rel="external nofollow noreferrer">指导手册</a> （需要翻墙） <a href="https://github.com/233boy/v2ray/wiki/V2Ray搭建详细图文教程" rel="external nofollow noreferrer">指导手册备用地址</a></li></ul></li></ul><p>V2Ray 是一个于 Shadowsocks 之后非常好用的代理软件，但是由于 V2Ray 的配置略复杂，GUI 客户端不完善，所以 V2Ray 并没有像 Shadowsocks 在科学上网人群之中那么流行。</p><p>但目前来看ssr的服务越发不稳定，所以我们需要换用v2ray</p></blockquote><h2 id="0-先决条件"><a href="#0-先决条件" class="headerlink" title="0 先决条件"></a>0 先决条件</h2><ul><li>本文前导文章为 <a href="http://www.annewqx.top/posts/9931/">VPS和Shadowsocks配置</a></li><li>开了firewalld防火墙的话请自行添加对应端口</li></ul><h2 id="1-服务端配置"><a href="#1-服务端配置" class="headerlink" title="1 服务端配置"></a>1 服务端配置</h2><blockquote><p>如果已经使用其他方式安装v2ray，想要换为脚本，删除方法如下：</p><ul><li><p>卸载：其中 systemd 和 sysv 二选一，取决于你的系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#停用并卸载服务（systemd）：</span><br>systemctl stop v2ray<br>systemctl <span class="hljs-built_in">disable</span> v2ray<br><br><span class="hljs-comment">#停用并卸载服务（sysv）：</span><br>service v2ray stop<br>update-rc.d -f v2ray remove<br></code></pre></td></tr></table></figure></li><li><p>删除残留文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rm -rf /etc/v2ray/*  <span class="hljs-comment">#(配置文件)</span><br>rm -rf /usr/bin/v2ray/*  <span class="hljs-comment">#(程序)</span><br>rm -rf /var/<span class="hljs-built_in">log</span>/v2ray/*  <span class="hljs-comment">#(日志)</span><br>rm -rf /lib/systemd/system/v2ray.service  <span class="hljs-comment">#(systemd 启动项)</span><br>rm -rf /etc/init.d/v2ray  <span class="hljs-comment">#(sysv 启动项)</span><br></code></pre></td></tr></table></figure></li></ul><p>参考：<a href="https://github.com/v2ray/v2ray-core/issues/187" rel="external nofollow noreferrer">v2ray-core/issues/187</a></p></blockquote><blockquote><p>可选用的脚本(来源：<a href="https://v2raycn.com/" rel="external nofollow noreferrer">V2Ray中文网</a> » <a href="https://v2raycn.com/176.html" rel="external nofollow noreferrer">好用的 V2Ray 一键脚本整理与分享</a></p><h4 id="V2Ray-官方一键脚本"><a href="#V2Ray-官方一键脚本" class="headerlink" title="V2Ray 官方一键脚本"></a>V2Ray 官方一键脚本</h4><p>V2Ray 官方提供 V2Ray 一键脚本，新手可以非常方便的在自己的 VPS 上一键搭建 V2Ray，详细介绍参考：<a href="https://v2raycn.com/46.html" rel="external nofollow noreferrer">V2Ray 官方教程：V2Ray 官方一键脚本搭建与配置文件生成</a>。</p><h4 id="233-V2Ray-一键脚本"><a href="#233-V2Ray-一键脚本" class="headerlink" title="233 V2Ray 一键脚本"></a>233 V2Ray 一键脚本</h4><p>233 V2Ray 一键脚本是由 233boy 开发并维护的一个 V2Ray 脚本，是目前用的比较广泛的 V2Ray 一键脚本，自带管理面板与加速功能，详细介绍参考：<a href="https://v2raycn.com/89.html" rel="external nofollow noreferrer">233 V2Ray 一键脚本，自带管理与加速功能，v2ray.sh</a>。</p><h4 id="V2ray-Fun-一键脚本"><a href="#V2ray-Fun-一键脚本" class="headerlink" title="V2ray.Fun 一键脚本"></a>V2ray.Fun 一键脚本</h4><p>V2ray.Fun 是一个比较常用的 V2Ray 一键脚本，由 FunctionClub 开发并维护，这个脚本自带 Web 可视化控制面板，详细介绍参考：<a href="https://v2raycn.com/111.html" rel="external nofollow noreferrer">V2Ray 一键脚本，自带 Web 可视化控制板面板，V2ray.Fun</a></p></blockquote><p>我选用的是233boy的脚本</p><ol><li><p>ssh登陆到服务器root用户，使用<a href="https://github.com/233boy/v2ray" rel="external nofollow noreferrer">一键式脚本安装</a></p><p><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code></p></li><li><p>选择[1]安装；</p><ul><li>选择默认传输协议TCP；</li><li>没有特别需要的话，回车确认默认端口；</li><li>广告拦截默认关闭(专业的人做专业的事)；</li><li>是否配置Shadowsocks看自己的需要(不过既然我们都从ss过来了，就不用了吧)</li></ul></li><li><p>安装完成后，输入<code>v2ray url</code>  得到vmess URL；或者<code>v2ray qr</code> 得到二维码链接</p></li><li><p>备份脚本</p><ul><li><p>将脚本Fork一份：<a href="https://github.com/233boy/v2ray/fork" rel="external nofollow noreferrer">备份地址</a></p></li><li><p>Fork后，安装在服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/你的GitHub用户名/v2ray -b master<br><span class="hljs-built_in">cd</span> v2ray<br>chmod +x install.sh<br>./install.sh <span class="hljs-built_in">local</span> <span class="hljs-comment"># 此即为运行脚本</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>常用命令：</p><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p></blockquote></li></ol><h2 id="2-客户端配置"><a href="#2-客户端配置" class="headerlink" title="2 客户端配置"></a>2 客户端配置</h2><ul><li><p>打开客户端-服务器设置-左上服务器列表中‘+’-右侧url后复制粘贴刚刚得到的vmess URL即可</p><p>或者打开刚刚得到的二维码链接，直接在菜单中选择扫描屏幕上的二维码</p></li><li><p>因为v2ray的多入口多出口特性， 一个 V2Ray 进程可并发支持多个入站和出站协议，每个协议可独立工作，因此如果没有统计流量的需要，几人共用的话，不用做分割，如果有需要，请看下一部分</p></li><li><p>锐速或者加速服务我们依然可以用<a href="http://www.annewqx.top/posts/9931/">VPS和Shadowsocks配置</a> 中的四合一脚本<code>wget &quot;https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code> 重启服务即可</p></li></ul><h2 id="多用户配置"><a href="#多用户配置" class="headerlink" title="多用户配置"></a>多用户配置</h2><blockquote><p>233boy的v2ray脚本中似乎没有关于这方面的快速命令，因此需要我们自己动手</p></blockquote><ol><li><p>使用<code>cat /proc/sys/kernel/random/uuid</code>新建一个用户id，记下这个ID号</p></li><li><p>打开v2ray配置文件<code>vi /etc/v2ray/config.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"inbounds"</span>: [<br>    &#123;<br>    <span class="hljs-comment">//这是第一个用户的配置</span><br>    <span class="hljs-attr">"port"</span>: <span class="hljs-number">12345</span>, <span class="hljs-comment">//端口号</span><br>    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"vmess"</span>,<br>    <span class="hljs-attr">"settings"</span>: &#123;<br>      <span class="hljs-attr">"clients"</span>: [<br>        &#123;<br>          <span class="hljs-attr">"id"</span>: <span class="hljs-string">"f8123442-a199-4ba3-b66c-3751234fbb47"</span>, <span class="hljs-comment">//USER ID</span><br>          <span class="hljs-attr">"level"</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">"alterId"</span>: <span class="hljs-number">64</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;, <span class="hljs-comment">//注意这个逗号</span><br>  <span class="hljs-comment">// 这是第二个用户的配置</span><br>  &#123;<br>    <span class="hljs-attr">"port"</span>: <span class="hljs-number">12346</span>, <span class="hljs-comment">//新的端口号</span><br>    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"vmess"</span>,<br>    <span class="hljs-attr">"settings"</span>: &#123;<br>      <span class="hljs-attr">"clients"</span>: [<br>        &#123;<br>          <span class="hljs-attr">"id"</span>: <span class="hljs-string">"0ff12347-7664-65d9-b10a-5b1234050c07"</span>, <span class="hljs-comment">//刚刚记下的USER ID</span><br>          <span class="hljs-attr">"level"</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">"alterId"</span>: <span class="hljs-number">64</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<span class="hljs-comment">//注意这里没有逗号</span><br>],<br></code></pre></td></tr></table></figure><p>即完成多用户配置</p></li><li><p>使用 <code>v2ray restart</code> 命令重启服务</p></li><li><p><a href="https://v2.ziyls.com" rel="external nofollow noreferrer">打开自动生成inbound的json文件和客户端配置链接的网站</a>，把刚刚的新用户配置输入<img src="Screenshot2020-03-0122.03.15.png" alt="https://v2.ziyls.com">,点击生成链接，然后输入服务器IP，得到二维码和链接，添加到服务端即可</p></li></ol><h2 id="PAC设置"><a href="#PAC设置" class="headerlink" title="PAC设置"></a>PAC设置</h2><h3 id="从GFW-LIST地址更新PAC文件"><a href="#从GFW-LIST地址更新PAC文件" class="headerlink" title="从GFW LIST地址更新PAC文件"></a>从GFW LIST地址更新PAC文件</h3><ul><li><p>黑名单：<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" rel="external nofollow noreferrer">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p></li><li><p>白名单：<a href="https://raw.githubusercontent.com/R0uter/gfw_domain_whitelist/master/data/whitelist.pac" rel="external nofollow noreferrer">https://raw.githubusercontent.com/R0uter/gfw_domain_whitelist/master/data/whitelist.pac</a></p></li></ul><h3 id="手动编写PAC文件"><a href="#手动编写PAC文件" class="headerlink" title="手动编写PAC文件"></a>手动编写PAC文件</h3><p>以ipip.net为例</p><ul><li><p>需要走代理，全匹配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">||ipip.net^<br></code></pre></td></tr></table></figure></li><li><p>需要直连，不走代理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">@@||example.com<br></code></pre></td></tr></table></figure></li><li><p>详细语法规则</p><figure class="highlight JavaScript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">=== 通配符支持 =&gt; *<br>*.example.com/ <br>代表 http:<span class="hljs-comment">//example.com http://233.example.com https://233.example.com https://666.example.com/233.mp4 全部走代理。</span><br>同时<span class="hljs-string">"*"</span>可省略，.example.com/ 与 *.example.com/ 效果是一样的<br> <br>=== 正则表达式支持<br>以 \ 开始和结束，\[\w]+:\/\/example.com\<br> <br>=== 例外规则 =&gt; @@<br>@@*.example.com/ 表示<span class="hljs-string">"@@"</span>后面的网址规则(*.example.com)不走代理<br>如：@@www.baidu.com 表示 www.baidu.com 不走代理<br> <br>=== 匹配地址开始和结尾规则 =&gt; |<br>|http:<span class="hljs-comment">//example.com、example.com| 分别表示 以http://example.com开始 和 以example.com结束 的地址</span><br>如：|http:<span class="hljs-comment">//233.com ，代表 http://233.com 开头的网址才会走代理，即 https://233.com http://1.233.com 都不会走代理</span><br>如：<span class="hljs-number">233.</span>com|，代表 <span class="hljs-number">233.</span>com 结尾的网站才会走代理，即 http:<span class="hljs-comment">//233.com https://233.com http://1.233.com 都会走带了，而 http://233.com/index.html 不会走代理。</span><br> <br>=== 全匹配规则 =&gt; ||<br>||example.com 则代表 http:<span class="hljs-comment">//example.com、https://example.com、ftp://example.com 等协议的地址全部走代理</span><br>如：||<span class="hljs-number">233.</span>com ，即 http:<span class="hljs-comment">//233.com、https://233.com、ftp://233.com 等地址全都走代理</span><br> <br>=== 注释规则 =&gt; !<br>!我是注释<span class="hljs-number">233</span><br>!我也是注释<span class="hljs-number">666</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Caddy替换Nginx运行网站</title>
      <link href="/posts/2210/"/>
      <url>/posts/2210/</url>
      
        <content type="html"><![CDATA[<p>Caddy的使用真的太傻瓜了! </p><a id="more"></a><blockquote><p>参考文章：</p><ul><li>入门： <a href="https://dengxiaolong.com/caddy/zh/" rel="external nofollow noreferrer">Caddy中文文档</a></li><li>中阶： <a href="https://3mile.github.io/archives/118/" rel="external nofollow noreferrer">3mile：如何在CentOS 7上安装和配置Caddy</a></li><li>Caddyfile的配置：<a href="https://liuzhichao.com/2018/caddy/" rel="external nofollow noreferrer">liuzhichao：替换 Nginx 使用 Caddy 作为博客静态服务器</a></li><li>脚本介绍： <a href="https://wzfou.com/caddy/" rel="external nofollow noreferrer">Caddy-最容易上手的Web Server</a></li></ul><p>本博客基于<a href="https://dengxiaolong.com/caddy/zh/beginner.html" rel="external nofollow noreferrer">Caddy中文文档</a>，结合其他文章进行介绍，上接本博客博文<a href="https://www.annewqx.top/posts/65182/">把hexo博客部署到VPS服务器</a>，请注意，这次我们需要一个域名。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为什么要用 <a href="https://caddyserver.com/" rel="external nofollow noreferrer">Caddy</a> 替换掉 Nginx ？最主要的原因是 <strong><a href="https://caddyserver.com/" rel="external nofollow noreferrer">Caddy</a> 能让网站自动支持 HTTPS</strong>。同样是使用 Let’s Encrypt，换成 Nginx 我们就必须手工操作，并且还需要设置三个月更新证书的计划任务。Caddy默认支持 http/2，很多东西都不需要我们配置了。另外它的配置文件也比 Nginx 的要简单很多，几十行的 Nginx 配置文件 <a href="https://caddyserver.com/" rel="external nofollow noreferrer">Caddy</a> 仅需要几行就可以搞定了。关于能否将Caddy用作正式的生产环境，目前来看还是有待商榷的，但是Caddy用为简单的Http服务器是没有问题的。</p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>一个搭载CentOS 7 x64的VPS服务器</li><li>一个域名<code>example.com</code>已被配置为指向<code>VPS IP</code>，具体方法参见<a href="https://www.annewqx.top/posts/65182/">把hexo博客部署到VPS服务器</a> 域名部分</li><li>已经利用git把hexo博客部署到VPS的<code>/var/www/blog</code>文件夹</li><li>如果已经运行nginx的，需要<code>nging -s stop</code>关闭</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>我们使用Caddy官方的一键安装脚本</p><p>大部分caddy的第三方一键脚本对于centOS都仅支持<code>6.8</code>或<code>7.2</code>版本(查看Linux版本方法<code>cat /etc/centos-release</code>)</p><ul><li><a href="https://github.com/sayem314/Caddy-Web-Server-Installer" rel="external nofollow noreferrer">sayem314</a></li></ul></blockquote><p>在Linux，Mac或BSD操作系统上，使用以下命令安装Caddy最新稳定的系统特定版本：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">curl https://getcaddy.com | bash -s personal<br></code></pre></td></tr></table></figure><p>Caddy二进制文件将被安装到该<code>/usr/local/bin</code>目录。使用以下命令确认：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">which</span> caddy<br></code></pre></td></tr></table></figure><p>为了安全起见，<strong>切勿</strong>以root身份运行Caddy二进制文件。为了让Caddy能够以非root用户的身份绑定到特权端口（例如80,443），需要<code>setcap</code>。按如下所示运行该命令：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo <span class="hljs-built_in">setcap</span> <span class="hljs-string">'cap_net_bind_service=+ep'</span> /usr/<span class="hljs-built_in">local</span>/bin/caddy<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>默认情况下，Caddy使用当前目录（执行命令的目录，而不是caddy二进制文件所在目录）作为网站根目录，因此运行本地站点非常方便。</p><p>使用终端或者命令行，切换到站点目录所在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> path/to/my/site<span class="hljs-comment"># 在我们的服务器上是/var/www/blog</span><br>caddy<br></code></pre></td></tr></table></figure><p>浏览器打开<a href="http://localhost:2015/，如果出现404页面，说明caddy运行正常。使用`Ctrl+C`退出，caddy将尽可能优雅中断。" rel="external nofollow noreferrer">http://localhost:2015/，如果出现404页面，说明caddy运行正常。使用`Ctrl+C`退出，caddy将尽可能优雅中断。</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="方案1：来自Caddy官方文档的快速开始"><a href="#方案1：来自Caddy官方文档的快速开始" class="headerlink" title="方案1：来自Caddy官方文档的快速开始"></a>方案1：来自Caddy官方文档的快速开始</h3><blockquote><p>如果服务器设置了防火墙，则打开80和443端口</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo firewall-cmd --permanent --zone=public --add-service=http <br>sudo firewall-cmd --permanent --zone=public --add-service=https<br>sudo firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>请确保你的域名能解析到你的服务器，具体方法参见<a href="https://www.annewqx.top/posts/65182/">把hexo博客部署到VPS服务器</a> 最后一部分</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo caddy -host example.com<br></code></pre></td></tr></table></figure><p>当第一次使用一个真正的域名（不是localhost）运行Caddy时，会出现提示要求输入你的email地址。这是因为Caddy需要验证你的域名，并将验证信息安全地存储在硬盘上。</p><p>Caddy必须将40和443端口绑定到一个真正的站点，这需要root或者Administrator的权限</p><p>现在我们的网站已经按照在运行了!</p><p><strong>&lt;全文完&gt;</strong></p><hr><p>&lt;其实并不，Caddy可以很简单的开始，但总有高阶玩家可以把简单的事情变得更复杂，当然，也更安全&gt;</p><h3 id="方案2：从Caddyfile开始"><a href="#方案2：从Caddyfile开始" class="headerlink" title="方案2：从Caddyfile开始"></a>方案2：从Caddyfile开始</h3><p>创建一个专门的系统用户：<code>caddy</code> 和一组同名的Caddy：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo useradd -r -d /var/www -M -s /sbin/nologin caddy<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<em>此处创建**的用户caddy只能用于管理Caddy服务，不能用于登录。</em></p><p><code>/var/www</code>为Caddy Web服务器创建主目录，并<code>/var/www/blog</code>为您的站点创建主目录：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo mkdir -p /var/www/blog<br>sudo chown -R caddy:caddy /var/www<br></code></pre></td></tr></table></figure><p>创建一个目录来存储SSL证书：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo mkdir /etc/ssl/caddy<br>sudo chown -R caddy:root /etc/ssl/caddy<br>sudo chmod 0770 /etc/ssl/caddy<br></code></pre></td></tr></table></figure><p>创建专用目录来存储Caddy配置文件<code>Caddyfile</code>：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo mkdir /etc/caddy<br>sudo chown -R root:caddy /etc/caddy<br></code></pre></td></tr></table></figure><p>创建名为的Caddy配置文件<code>Caddyfile</code> 以下仅是一个普通配置，详细的配置参见本文<a href="#Caddyfile">Caddyfile部分</a></p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo touch /etc/caddy/Caddyfile<br>sudo chown caddy:caddy /etc/caddy/Caddyfile<br>sudo chmod 444 /etc/caddy/Caddyfile<br>cat &lt;&lt;EOF | sudo tee -a /etc/caddy/Caddyfile<br>www.example.com &#123;<br>redir https://example.com&#123;uri&#125;<br>&#125;<br>example.com &#123;<br>    root /var/www/blog<br>    gzip<br>    tls example@outlook.com<br>    header / Strict-Transport-Security <span class="hljs-string">"max-age=31536000"</span><br>    gzip<br>    errors &#123;<br>       404 404.html<br>       403 403.html<br>     &#125; <br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>使用<code>caddy -conf /etc/caddy/Caddyfile</code> 按照配置文件运行caddy。第一次运行会验证邮箱，并进行ssh申请等，等待后将网页浏览器指向<code>http://example.com</code>或<code>https://example.com</code>。可看到网站运行的样子</p><p>关于Caddyfile的书写解释，可见本文<a href="#Caddyfile">Caddyfile</a>部分</p><h3 id="方案3：使用caddy-service-此部分有缺陷，未解决"><a href="#方案3：使用caddy-service-此部分有缺陷，未解决" class="headerlink" title="方案3：使用caddy.service(此部分有缺陷，未解决)"></a>方案3：使用caddy.service(此部分有缺陷，未解决)</h3><blockquote><p>github: <a href="https://github.com/caddyserver/caddy/tree/master/dist/init/linux-systemd" rel="external nofollow noreferrer">systemd Service Unit for Caddy</a></p><p>这部分目前我遇到的问题</p><ul><li>使用<code>systemctl status caddy.service</code>提示用户错误。错误的原因一个是systemd version太低，虽然caddy.service要求是219即可，实际上大概是需要229以上才行；</li><li>文件夹权限的问题，涉及到用户和用户组，不太熟，如果把自己搞得ssh拒绝登录就傻了；</li></ul><p>等有时间的时候再回头修这个吧😑</p></blockquote><p>为了方便Caddy的操作，我们可以使用systemd<code>为Caddy 设置一个单元文件，然后用它</code>systemd`来管理Caddy。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service  <span class="hljs-comment"># 从 github 下载 systemd 配置文件</span><br>chown root:root /etc/systemd/system/caddy.service   <span class="hljs-comment"># 配置权限</span><br>chmod 744 /etc/systemd/system/caddy.service<br></code></pre></td></tr></table></figure><p>启动Caddy服务并使其在系统引导时自动启动：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 重启systemd使服务生效</span><br>sudo systemctl daemon-reload<br><span class="hljs-comment"># 开始运行caddy服务</span><br>sudo systemctl start caddy.service<br><span class="hljs-comment"># 设置开机自启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> caddy.service<br><span class="hljs-comment"># 查看caddy服务运行状态</span><br>sudo systemctl status caddy.service<br></code></pre></td></tr></table></figure><p>最后，将网页浏览器指向<code>http://example.com</code>或<code>https://example.com</code>。可看到网站运行的样子。</p><span id = "Caddyfile"><h2 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h2></span>**Caddyfile**用来告诉Caddy如何提供服务的文本文件。他通常和网站放在一起。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> path/to/site<br>vim Caddyfile<br></code></pre></td></tr></table></figure><p>Caddy的一般结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">www.mysite.com &#123;<br>    redir https:<span class="hljs-comment">//mysite.com&#123;uri&#125;</span><br>&#125;<br>mysite.com &#123;<br>        root /var/www/blog<br>        <span class="hljs-built_in">log</span> / /var/<span class="hljs-built_in">log</span>/caddy/mysite.<span class="hljs-built_in">log</span> <span class="hljs-string">"&#123;remote&#125; &#123;when&#125; &#123;method&#125; &#123;uri&#125; &#123;proto&#125; &#123;status&#125; &#123;size&#125; &#123;&gt;User-Agent&#125; &#123;latency&#125;"</span><br>        tls 邮箱账号<br>        header / Strict-Transport-Security <span class="hljs-string">"max-age=31536000"</span><br>        gzip<br>        errors &#123;<br>         <span class="hljs-number">404</span> <span class="hljs-number">404.</span>html<br>         <span class="hljs-number">403</span> <span class="hljs-number">403.</span>html<br>       &#125;<br>       expires &#123;<br>         match .css$ <span class="hljs-number">1</span>m<br>         match .js$ <span class="hljs-number">1</span>m<br>         match .png$ <span class="hljs-number">1</span>m<br>         match .jpg$ <span class="hljs-number">1</span>m<br>      &#125;<br>      ipfilter / &#123;<br>        rule  block<br>        blockpage /var/www/liuzhichao.com/<span class="hljs-number">403.</span>html<br>        ip <span class="hljs-number">148.251</span><span class="hljs-number">.8</span><span class="hljs-number">.250</span> <span class="hljs-number">136.243</span><span class="hljs-number">.37</span><span class="hljs-number">.219</span> <span class="hljs-number">144.76</span><span class="hljs-number">.38</span><span class="hljs-number">.40</span> <span class="hljs-number">69.197</span><span class="hljs-number">.177</span><span class="hljs-number">.50</span> <span class="hljs-number">199.58</span><span class="hljs-number">.86</span><span class="hljs-number">.211</span> <span class="hljs-number">5.9</span><span class="hljs-number">.97</span><span class="hljs-number">.200</span> <span class="hljs-number">144.76</span><span class="hljs-number">.91</span><span class="hljs-number">.79</span><br>      &#125;<br><br>     rewrite &#123;<br>        <span class="hljs-keyword">if</span> &#123;&gt;User-agent&#125; has <span class="hljs-string">"MJ12bot"</span><br>        to /forbidden<br>    &#125;<br>     status <span class="hljs-number">403</span> /forbidden<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">www.mysite.com &#123;<br>    redir https://mysite.com&#123;uri&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>是将 www 跳转到非 www 的域名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tls mail@mysite.com<br></code></pre></td></tr></table></figure><p>tls后面改为你的邮箱地址，会自动配置 https。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">header / Strict-Transport-Security <span class="hljs-string">"max-age=31536000"</span><br></code></pre></td></tr></table></figure><p>是一条 https 的优化配置，加上之后，在<a href="https://www.ssllabs.com/ssltest/analyze.html?d=liuzhichao.com&hideResults=on" rel="external nofollow noreferrer">SSLLabs</a>上测试评分可以拿到A+,想想之前使用 Nginx 的时候，网络上找了各种配置参考都只优化到了 A，所以 Caddy 的自动 Https 功能确实还是很方便的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">errors &#123;<br>        404 404.html<br>        403 403.html<br>    &#125;<br></code></pre></td></tr></table></figure><p>是自定义错误页面配置。确保你网站的根目录有相应的文件，不然启动服务会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">expires &#123;<br>        match .css$ 1m<br>        match .js$ 1m<br>        match .png$ 1m<br>        match .jpg$ 1m<br>     &#125;<br></code></pre></td></tr></table></figure><p>expires 是控制页面的缓存，上面的配置是将 css,js,png,jpg 这样的静态资源缓存1个月。此配置依赖http.expires这个插件，如果你没有安装，配置后启动 caddy 会出错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipfilter / &#123;<br>        rule  block<br>        blockpage /var/www/liuzhichao.com/403.html<br>        ip 148.251.8.250 136.243.37.219 144.76.38.40 69.197.177.50 199.58.86.211 5.9.97.200 144.76.91.79<br>     &#125;<br></code></pre></td></tr></table></figure><p>ipfilter是根据配置过滤到一些非正常的 IP，可以查看访问log，经常会有一些爬虫频繁的访问网站，没有任何用处反而加大服务器的负载，对于这样的 IP 可以直接过滤掉。blockpage是配置这些 IP 访问网址时显示的页面，依赖http.ipfilter插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rewrite &#123;<br>       <span class="hljs-keyword">if</span> &#123;&gt;User-agent&#125; has <span class="hljs-string">"MJ12bot"</span><br>       to /forbidden<br>   &#125;<br>   status 403 /forbidden<br></code></pre></td></tr></table></figure><p>与上面的ipfilter功能类似，都是过滤掉一些非正常的访问用户，不同的是ipfilter是屏蔽 IP，这段配置则是根据<code>User-agent</code> block掉一些爬虫。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> Caddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客：装修</title>
      <link href="/posts/65512/"/>
      <url>/posts/65512/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>基于icarus主题的Hexo博客装修。本文将介绍除了icarus在_config.yml中提供的功能以外，通过修改其源代码实现的其他扩展功能，页面文件样式的进一步美化等。属于深度定制自己的主题，需要基础的CSS和HTML知识。</p></blockquote><a id="more"></a><div class="tip">  本文不涉及所有icarus主题的配置文档`_config.yml`里已经有的配置! 仅对icarus v2.7版本里未加入的功能或者个人觉得不完善的功能进行补充</div><blockquote><p>参考文章</p><ul><li><a href="http://yearito.cn/tags/Hexo/" rel="external nofollow noreferrer">Yearito：Hexo 搭建个人博客系列 – 基于Next主题</a></li><li><a href="https://www.chingow.cn/tags/Hexo/" rel="external nofollow noreferrer">chingow：Hexo+NexT(v7.0+) 搭建博客</a> – 基于Next主题，较Yearito的博客全面一些</li><li><a href="https://www.alphalxy.com/2019/03/customize-icarus/" rel="external nofollow noreferrer">alphalxy-Icarus 主题自定义</a> – 基于Icarus主题</li><li>本文所修改的主题文件已fork到<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne" rel="external nofollow noreferrer">GitHub仓库</a>，<code>_config.yml</code>也在其中</li></ul></blockquote><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><blockquote><p>需要了解的几个文档：</p><ul><li><a href="https://hexo.io/zh-cn/docs/variables" rel="external nofollow noreferrer">hexo官方文档里对于变量的说明</a></li><li><a href="https://hexo.io/zh-cn/docs/helpers" rel="external nofollow noreferrer">hexo官方文档里对于辅助函数的说明</a></li><li><a href="https://ejs.bootcss.com" rel="external nofollow noreferrer">ejs嵌入开发各个标签的含义</a></li><li><a href="https://bulma.zcopy.site/documentation/" rel="external nofollow noreferrer">bulma框架中文文档</a></li></ul></blockquote><p>首先我们要知道icarus的文件结构。icarus采用了ejs模板语言生成页面，使用Bulma框架作为页面样式的控制框架。icatus源代码良好书写习惯的可扩展性是我们修改的基础。icarus所有的页面样式都存在<code>themes/icarus/layout</code>中，我们重点需要关注的文件有:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">|-- icarus<br>    |-- _config.yml<br>    |-- includes<br>    |   |-- generators<br>    |   |   |-- categories.js<br>    |   |   |-- category.js<span class="hljs-comment"># 需要修改，换目录页为时间轴展示</span><br>    |   |   |-- insight.js<br>    |   |   |-- tag.js<span class="hljs-comment"># 后期加入，换标签页为时间轴展示</span><br>    |   |   |-- tags.js<br>    |-- layout<br>    |   |-- archive.ejs<span class="hljs-comment"># 控制归档页页面</span><br>    |   |-- category.ejs<span class="hljs-comment"># 用于控制单个目录页页面</span><br>    |   |-- categories.ejs<span class="hljs-comment"># 用于控制母目录页页面</span><br>    |   |-- tag.ejs<span class="hljs-comment"># 用于控制单个标签页页面</span><br>    |   |-- tags.ejs<span class="hljs-comment"># 用于控制母标签页页面</span><br>    |   |-- custom_cat.ejs<span class="hljs-comment"># 后期加入，模仿archive.ejs，替换category.ejs</span><br>    |   |-- custom_tag.ejs<span class="hljs-comment"># 后期加入，模仿archive.ejs，替换tag.ejs</span><br>    |   |-- layout.ejs<span class="hljs-comment"># 控制homepage的页面和比例</span><br>    |   |-- comment<br>    |   |   |-- valine.ejs<span class="hljs-comment"># 补充源主题缺少的头像控制</span><br>    |   |-- common<span class="hljs-comment"># common中存放控制各个页面共有区域</span><br>    |   |   |-- head.ejs<span class="hljs-comment"># 控制每个网页的&lt;head&gt;中的信息，设置seo时修改</span><br>    |   |   |-- footer.ejs<span class="hljs-comment"># 控制每个网页的脚注</span><br>    |   |   |-- article.ejs <span class="hljs-comment"># 控制博客正文页面</span><br>    |   |   |-- navbar.ejs<span class="hljs-comment"># 控制导航栏</span><br>    |   |   |-- widget.ejs<span class="hljs-comment"># 控制所有widget比例</span><br>    |   |   |-- copyright.ejs<span class="hljs-comment"># 后期加入，添加文末版权栏</span><br>    |   |-- widget<span class="hljs-comment"># 存放各个widget界面</span><br>    |       |-- map.ejs<span class="hljs-comment"># 添加访客地图widget</span><br>    |       |-- map.locals.js<span class="hljs-comment"># 缓存文件</span><br>    |       |-- music.ejs<span class="hljs-comment"># 添加音乐widget</span><br>    |       |-- music.locals.js<span class="hljs-comment"># 缓存文件</span><br>    |-- source<br>        |-- css<br>        |   |-- back-to-top.css<br>        |   |-- copyright.styl<span class="hljs-comment"># 后期加入控制版权栏的页面样式</span><br>        |   |-- progressbar.css<br>        |   |-- style.styl<span class="hljs-comment"># 大部分的页面样式</span><br>        |-- images<br>        |   |-- thumbnail.svg<br>        |   |-- Alipay.jpg<br>        |   |-- wechatpay.jpg<br>        |-- js<br></code></pre></td></tr></table></figure><ul><li>其余我想要做改动的还有plugin文件夹，用于存放分析和计数需要的工具；search文件夹，用于存放几种搜索所需要的工具(icarus作者并没有使用hexo-generate-search的插件生成索引，而是自己写了一个insight函数生成索引列表。respect🤔。但是它的搜索展现思路变为了仅显示包含搜索条件的文章名和首行，这与我们希望显示搜索条件出现在文章的哪一处的需求不同😑)</li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><blockquote><p>插件是最简单的提升博客丰富性的方法。而多数插件只需要一行js代码就能实现</p></blockquote><h3 id="访客地球"><a href="#访客地球" class="headerlink" title="访客地球"></a>访客地球</h3><div  align="center">    <img src="Screenshot2020-03-0622.22.35.png" alt="revolvermaps" style="zoom: 50%;"/></div><ul><li><p>功能：展示页面的总浏览量/页面浏览人来源的的热力图/同时在线人的地址标签</p></li><li><p>地址：<a href="https://www.revolvermaps.com" rel="external nofollow noreferrer">RevolverMaps官网</a></p></li><li><p>使用方法：</p></li></ul><ol><li><p>在官网复制所给的js代码</p></li><li><p>在<code>/icarus/layout/widget</code>目录下，新建文件<code>map.ejs</code>和<code>map.locals.js</code>。把复制的js代码粘贴到<code>map.ejs</code>文件中，而<code>map.locals.js</code>中复制它隔壁的profile.locals.js中的内容即可。该文件的作用是绑定渲染该ejs文件(可以不添加)</p><figure class="highlight js"><figcaption><span>layout/widget/map.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/widget/map.ejs" rel="external nofollow noreferrer">map.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">"text/javascript"</span> src=<span class="hljs-string">"//rf.revolvermaps.com/0/0/6.js?i=53u8jvixw8q&amp;amp;m=7&amp;amp;c=e63100&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=0&amp;amp;bv=90&amp;amp;lx=-420&amp;amp;ly=420&amp;amp;hi=20&amp;amp;he=7&amp;amp;hc=a8ddff&amp;amp;rs=80"</span> <span class="hljs-keyword">async</span>=<span class="hljs-string">"async"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>layout/widget/map.locals.js</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/widget//map.locals.js" rel="external nofollow noreferrer">map.locals.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">ctx, locals</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">return</span> locals;  <br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>在<code>/icarus/_config.yml</code>配置文件中，模仿已有的widget，添加如下字段</p><figure class="highlight yml"><figcaption><span>_config.yml</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/_config.yml" rel="external nofollow noreferrer">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span><br> <span class="hljs-attr">type:</span> <span class="hljs-string">map</span><br> <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br></code></pre></td></tr></table></figure></li><li><p>现在我们有一个访客地球的widget了!</p></li></ol><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><div  align="center">    <img src="Screenshot2020-03-0623.39.29.png" alt="netEaseMusic" style="zoom: 50%;"/></div><ul><li><p>功能：网易云音乐外链播放器</p></li><li><p>地址：<a href="https://music.163.com/" rel="external nofollow noreferrer">网易云音乐官网</a></p></li><li><p>使用方法：</p><ol><li><p>在网易云音乐官网，登录后，选择一个歌单，点击歌单左上角的生成外链播放器，注意，歌单中不能包含VIP歌曲，否则会提示版权不允许</p><p><img src="Screenshot2020-03-0700.01.12.png" alt="歌单页面示例"></p></li><li><p>生成iframe插件。建议使用iframe插件，一方面是可以自己调整插件的属性，另一方面是很多浏览器现在对flash的使用有限制。复制给出的HTML代码</p><p><img src="Screenshot2020-03-0700.00.43.png" alt="生成插件页面"></p></li><li><p>与添加访客地球widget的过程类似，在<code>/icarus/layout/widget</code>目录下，新建文件<code>music.ejs</code></p><figure class="highlight js"><figcaption><span>layout/widget/music.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/widget/music.ejs" rel="external nofollow noreferrer">music.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;iframe <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"card widget"</span> height=<span class="hljs-number">400</span> width=<span class="hljs-number">100</span>% src=<span class="hljs-string">"//music.163.com/outchain/player?type=0&amp;id=4878237788&amp;auto=0&amp;height=430"</span>&gt;&lt;<span class="hljs-regexp">/iframe&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>music.locals.js</code>填入与之前一样的绑定渲染函数</p></li><li><p>在<code>/icarus/_config.yml</code>配置文件中，模仿已有的widget，添加如下字段</p><figure class="highlight yml"><figcaption><span>_config.yml</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/_config.yml" rel="external nofollow noreferrer">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">netEase</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br></code></pre></td></tr></table></figure></li><li><p>现在我们有一个播放器的widget了😺</p></li></ol></li></ul><h3 id="人体时钟"><a href="#人体时钟" class="headerlink" title="人体时钟"></a>人体时钟</h3><div align="center">  <img src="Screenshot2020-03-0700.16.52.png" alt="clock" style="zoom: 50%;" /></div><ul><li><p>功能：在导航栏上添加一个有交互性的小人时钟</p></li><li><p>地址：<a href="http://chabudai.org/blog/?p=59" rel="external nofollow noreferrer">ホネホネ・クロック 時計・ブログパーツ</a>(这个作者审美超级好🥰)</p></li><li><p>使用方法：</p><ol><li><p>复制作者给的js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script charset=<span class="hljs-string">"Shift_JIS"</span> src=<span class="hljs-string">"http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>/icarus/layout/common/nvabar.ejs</code>中，在第四行，添加一个新的块。<code>class=&quot;is-hidden-mobile&quot;</code>是bulma框架中的一种样式，意为当屏幕宽度小于desktop时，不显示该元素。因为平板和手机的浏览器中一般没有flash插件，所以做这个处理。</p><figure class="highlight diff"><figcaption><span>/layout/coppom/nvabar.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/coppom/nvabar.ejs" rel="external nofollow noreferrer">nvabar.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;nav class="navbar navbar-main"&gt;<br>    &lt;div class="container"&gt;<br>        &lt;div class="navbar-brand is-flex-center"&gt;<br>          &lt;!--以下是新插入的块 --&gt;<br><span class="hljs-addition">+                &lt;div class="is-hidden-mobile"&gt; </span><br><span class="hljs-addition">+                    &lt;script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+                &lt;/div&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="添加密码"><a href="#添加密码" class="headerlink" title="添加密码"></a>添加密码</h3><p>该功能由 <a href="https://github.com/MikeCoder/hexo-blog-encrypt" rel="external nofollow noreferrer">hexo-blog-encrypt</a> 插件提供，效果可见<a href="https://annewqx.top/posts/27073/" rel="external nofollow noreferrer">DUDES</a></p><p>使用方法参阅<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" rel="external nofollow noreferrer">hexo-blog-encrypt官方文档</a>即可</p><h3 id="黑暗模式"><a href="#黑暗模式" class="headerlink" title="黑暗模式"></a>黑暗模式</h3><blockquote><p><a href="https://github.com/ppoffice/hexo-theme-icarus/issues/564" rel="external nofollow noreferrer">[tutorial] support night dark mode</a></p></blockquote><p>在命令行，进入博客的根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入icarus目录</span><br><span class="hljs-built_in">cd</span> themes/icarus<br><span class="hljs-comment"># 添加远端仓库night</span><br>git remote add night https://github.com/imaegoo/hexo-theme-icarus.git<br><span class="hljs-comment"># 从远端仓库的night拉取night分支</span><br>git pull night night<br><span class="hljs-comment"># 查看并确认当前分支是master</span><br>git status<br><span class="hljs-comment"># 合并master分支和night分支，原master分支合并是不会有conflict的，如果有的话修一下</span><br>git merge night<br></code></pre></td></tr></table></figure><p>现在博客的navbar中新出现了一个小灯泡图标，点一下就能看到黑暗模式效果了</p><p>现在我们添加根据浏览器设置自动变为黑暗模式的代码，除了根据浏览器的配色模式，如果当晚/日，用户已经有与浏览器模式不同的选择，要遵循用户的选择 (即当晚浏览器是dark mode时，用户在博客内选择light mode，或相反)</p><figure class="highlight diff"><figcaption><span>/source/js/night.js</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/source/js/night.js" rel="external nofollow noreferrer">night.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ let mode = window.matchMedia('(prefers-color-scheme: dark)').matches;</span><br><span class="hljs-addition">+ if(mode.toString() != localStorage.getItem('current'))&#123;</span><br><span class="hljs-addition">+    localStorage.setItem('switched', 'false');</span><br><span class="hljs-addition">+    localStorage.setItem('current', window.matchMedia('(prefers-color-scheme: dark)').matches);</span><br><span class="hljs-addition">+ &#125;</span><br><span class="hljs-addition">+ if(localStorage.getItem('switched') != 'true')&#123;</span><br><span class="hljs-addition">+    isNight = window.matchMedia('(prefers-color-scheme: dark)').matches;</span><br><span class="hljs-addition">+ &#125;</span><br>findNightNav();<br>applyNight(isNight);<br></code></pre></td></tr></table></figure><blockquote><p>js获取浏览器颜色模式代码：<code>window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches</code></p></blockquote><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="Valine-头像"><a href="#Valine-头像" class="headerlink" title="Valine 头像"></a><a href="https://valine.js.org/avatar.html" rel="external nofollow noreferrer">Valine 头像</a></h3><ul><li><p>icarus原生配置中没有默认的Valine头像值</p></li><li><p>打开<code>icarus/layout/comment/valine.ejs</code>，在第12行，插入avatar的配置信息</p><figure class="highlight js"><figcaption><span>layout/comment/valine ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/comment/valine" rel="external nofollow noreferrer">valine</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;script&gt;<br>    <span class="hljs-keyword">new</span> Valine(&#123;<br>        <span class="hljs-attr">el</span>: <span class="hljs-string">'#valine-thread'</span> ,<br>        <span class="hljs-attr">avatar</span>: <span class="hljs-string">'retro'</span>,<br>        <span class="hljs-attr">notify</span>: &lt;%= get_config(<span class="hljs-string">'comment.notify'</span>) %&gt; ,<br>        <span class="hljs-attr">verify</span>: &lt;%= get_config(<span class="hljs-string">'comment.verify'</span>) %&gt; ,<br>        <span class="hljs-attr">app_id</span>: <span class="hljs-string">'&lt;%= get_config('</span>comment.app_id<span class="hljs-string">') %&gt;'</span>,<br>        <span class="hljs-attr">app_key</span>: <span class="hljs-string">'&lt;%= get_config('</span>comment.app_key<span class="hljs-string">') %&gt;'</span>,<br>        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">'&lt;%= get_config('</span>comment.placeholder<span class="hljs-string">') %&gt;'</span>,<br>  &#125;);<br>&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>评论默认头像将会变为八位像素复古头像，如果用户在gravatar注册过，则会显示注册的绑定头像</p></li><li><p>Valine更多默认头像设置参考<a href="https://valine.js.org/avatar.html" rel="external nofollow noreferrer">Valine头像配置</a></p></li></ul><h3 id="修改widget和文章比例"><a href="#修改widget和文章比例" class="headerlink" title="修改widget和文章比例"></a>修改widget和文章比例</h3><blockquote><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/qq_25072517/article/details/78432626" rel="external nofollow noreferrer">CSDN-Bulma框架</a></li><li><a href="https://lqwang.net/5.html" rel="external nofollow noreferrer">Hexo&amp;icarus主题修改</a></li></ul><p>我最新的主题修改中把比例配置抽取到_config.yml中了，直接使用我fork的<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne" rel="external nofollow noreferrer"> GitHub仓库</a>中的文件替换即可</p></blockquote><ul><li><p>原本的icarus最大化后三栏居中，两侧会有很宽的空白，我们要消灭这个空白</p></li><li><p>网上大量教所谓三栏变两栏的方法是在配置的时候所有widget都配置到一侧—-这未免有点傻乎乎。而我想实现的展示逻辑：非博文页面，当屏幕大小符合PC时，从左到右显示三栏–个人资料栏/博文栏/页面工具栏，当屏幕大小符合tablet时，从左到右显示两栏，页面工具栏合并到个人资料栏；博文页面，当屏幕大小符合PC或tablet时，从左到右显示两栏–目录工具栏/博文栏，当屏幕大小符合宽屏(窗口最大化)时，从左到右显示三栏</p></li><li><p>首先是<code>_config.yml</code>，我把profile\link\recent_poat\tag\archive这几个widget分类为个人资料栏(以下统称profile栏)，top\tagcloud\music\map分类为目录工具栏(以下统称目录栏)，而中间的最大的那一栏以下统称博文栏。在_config.yml中加入以下配置。相关配置含义之后会做解释。我们的网页最大化后两侧宽阔的白边主要就是由于原来的配置里每一栏没有占满。</p><figure class="highlight yml"><figcaption><span>_config.yml</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/_config.yml" rel="external nofollow noreferrer">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">proportion:</span><br>    <span class="hljs-attr">homepage:</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-3-widescreen is-one-fifth-fullhd'</span><br>        <span class="hljs-attr">article:</span> <span class="hljs-string">'is-two-thirds-tablet is-6-desktop is-6-widescreen is-5-fullhd'</span><br>    <span class="hljs-attr">post:</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-one-fifth-widescreen is-one-fifth-fullhd'</span><br>        <span class="hljs-attr">article:</span> <span class="hljs-string">'is-two-thirds-tablet is-9-desktop is-three-fifths-widescreen is-three-fifths-fullhd'</span><br></code></pre></td></tr></table></figure></li><li><p>我们对ejs文件的改动主要涉及三个文件<code>layout/layout.ejs</code> <code>layout/common/widget.ejs</code>以及<code>source/css/style.styl</code></p><p>|– icarus</p><pre><code>|-- layout|   |-- [layout.ejs](https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/layout.ejs)|   |-- common    |   |   |-- [widget.ejs](https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/widget.ejs)</code></pre><p>​    |– source<br>​        |– css<br>​        |   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/source/css/style.styl" rel="external nofollow noreferrer">style.styl</a></p><ol><li><p><code>style.styl</code>：先说这个css文件，因为通过这个文件我们能更好的理解bulma框架。bulma框架自动根据屏幕大小对照我们的预设适配不同比例的页面：mobile-手机/tablet-平板/desktop-pc/widescreen-全屏/fullhd-全屏。至于不同屏幕对应哪个大小，我们可以采用icarus原有的方案，也可以用更为严格的方案：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">gap = 64px<br>screen-tablet = 769px<br>screen-desktop = 1088pxs<br>screen-widescreen = 1280px<br>screen-fullhd = 1472px<br></code></pre></td></tr></table></figure><p>根据我的经验，使用13inch的mbp，按照icarus原有的方案，屏幕的1/3是手机模式，屏幕的2/3是平板(tablet)模式，大于屏幕的2/3是pc(desktop)模式，大于屏幕的8/9是全屏(widescreen)模式</p></li><li><p><code>layout.ejs</code>：更改控制博文栏占页面比例的函数<code>main_column_class()</code>：</p><figure class="highlight js"><figcaption><span>layout/layout.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/layout.ejs" rel="external nofollow noreferrer">layout.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main_column_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (column_count()) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">'is-12'</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">'is-8-tablet is-8-desktop is-8-widescreen'</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">if</span>(is_post() === <span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.homepage.article'</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.post.article'</span>);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure><p><code>_config.yml</code>中对应设置含义：当存在三栏的配置时，如果屏幕大于平板小于pc，博文栏占2/3；如果屏幕大于pc小于全屏，对于博文页，博文栏占9/12(即3/4)，对于非博文页，博文栏占6/12(即1/2)；如果屏幕大于全屏，博文栏占3/5；fullhd以此类推</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">proportion:<br>    homepage:<br>        article: <span class="hljs-string">'is-two-thirds-tablet is-6-desktop is-6-widescreen is-5-fullhd'</span><br>    <span class="hljs-attr">post</span>:<br>        article: <span class="hljs-string">'is-two-thirds-tablet is-9-desktop is-three-fifths-widescreen is-three-fifths-fullhd'</span><br></code></pre></td></tr></table></figure></li><li><p><code>layout/common/widget.ejs</code></p><ol><li><p>更改控制边栏占页面比例的函数<code>side_column_class()</code>：</p><figure class="highlight js"><figcaption><span>layout/common/widget.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/widget.ejs" rel="external nofollow noreferrer">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">_&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">side_column_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">switch</span> (column_count()) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">'is-4-tablet is-4-desktop is-3-widescreen'</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>             <span class="hljs-keyword">if</span>(is_post() === <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.homepage.sidebar'</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.post.sidebar'</span>);<br>            &#125;<br>    &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure><p><code>_config.yml</code>中对应设置含义：当存在三栏的配置时，当屏幕大于平板小于pc，仅显示左侧栏，占1/3，当屏幕大于pc小于全屏，博文页仅显示左侧栏，占3/12，非博文页显示左右两栏，各占3/12；以此类推</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">proportion:</span><br>    <span class="hljs-attr">homepage:</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-3-widescreen is-one-fifth-fullhd'</span><br>    <span class="hljs-attr">post:</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-one-fifth-widescreen is-one-fifth-fullhd'</span><br></code></pre></td></tr></table></figure></li><li><p>更改控制模块可见性的函数<code>visibility_class()</code>：如果页面不是博文页，当屏幕小于或等于平板时，仅显示左侧栏，当屏幕大于平板时，左右侧栏都显示；如果页面是博文页，当屏幕小于或等于PC大小时，仅显示左侧栏，当屏幕大于pc时，左右侧栏都显示</p><figure class="highlight js"><figcaption><span>layout/common/widget.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/widget.ejs" rel="external nofollow noreferrer">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">visibility_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(is_post()===<span class="hljs-literal">false</span> &amp;&amp; column_count() === <span class="hljs-number">3</span> &amp;&amp; position === <span class="hljs-string">'right'</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'is-hidden-touch'</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(is_post()===<span class="hljs-literal">true</span> &amp;&amp; column_count() === <span class="hljs-number">3</span> &amp;&amp; position === <span class="hljs-string">'left'</span>)&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">'is-hidden-touch  is-hidden-desktop-only'</span>;<br>    &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure></li><li><p>更改控制侧栏输出顺序的函数<code>order_class()</code>：当页面是博文页，目录栏在左侧，profile栏在右侧；当页面不是博文页，profile栏在左侧，目录栏在右侧</p><figure class="highlight js"><figcaption><span>layout/common/widget.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/widget.ejs" rel="external nofollow noreferrer">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">order_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(is_post() === <span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">return</span> position === <span class="hljs-string">'left'</span> ? <span class="hljs-string">'has-order-3'</span> : <span class="hljs-string">'has-order-1'</span>;<br>    &#125;<br> <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> position === <span class="hljs-string">'right'</span> ? <span class="hljs-string">'has-order-3'</span> : <span class="hljs-string">'has-order-1'</span>;<br> &#125;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure></li><li><p>更改主函数，大概从第27行开始，做下述更改。这里函数原本的意思是，在屏幕小于全屏时，将右侧栏合并到左侧栏显示。我们更改为，当页面不是博文页且屏幕大小小于pc时，将右侧栏合并到左侧栏</p><figure class="highlight diff"><figcaption><span>layout/common/widget.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/common/widget.ejs" rel="external nofollow noreferrer">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-    &lt;% if (position === 'left') &#123; %&gt;</span><br><span class="hljs-addition">+  &lt;% if (position === 'left' &amp;&amp; is_post() === false ) &#123; %&gt;</span><br><span class="hljs-deletion">-      &lt;div class="column-right-shadow is-hidden-widescreen &lt;%= sticky_class('right') %&gt;"&gt;</span><br><span class="hljs-addition">+      &lt;div class="column-right-shadow is-hidden-desktop"&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>至于说手机端的情况，反正只有一栏，保持原来的设置不变就好了，但是原来的设置中手机端首页是先显示博文再显示profile等widget，而我希望手机端的首页先展示profile的widget，这个非常容易，在<code>layout/layout.ejs</code>中</p><figure class="highlight js"><figcaption><span>layout/layout.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/layout.ejs" rel="external nofollow noreferrer">layout.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;%-  _partial(<span class="hljs-string">'common/widget'</span>, &#123; <span class="hljs-attr">position</span>: <span class="hljs-string">'left'</span> &#125;) %&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column &lt;%= main_column_class() %&gt; has-order-2 column-main"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">body</span> %&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;%-  _partial(<span class="hljs-string">'common/widget'</span>, &#123; <span class="hljs-attr">position</span>: <span class="hljs-string">'right'</span> &#125;) %&gt;<br></code></pre></td></tr></table></figure><p>这三行，如果第二行放在最前，手机端首页就先显示博文索引再显示所有widget，如果第一行放在前，手机端首页就先显示属性为left的widget，再显示属性为right的widget，最后显示博文索引。以此类推。</p><p>同时，如果手机端进入除了首页之外的其他主页(目录页归档页等)，profile widget也会被放在最前，我们并不需要在这些页面展示profile wideget，因此，在<code>layout/common/widget.ejs</code>中，在<code>visibility()</code>函数中添加以下选择语句：</p><figure class="highlight js"><figcaption><span>layout/common/widget.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/widget.ejs" rel="external nofollow noreferrer">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(is_home()===<span class="hljs-literal">false</span> &amp;&amp; is_post()===<span class="hljs-literal">false</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'is-hidden-mobile'</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="修改标签和目录页为时间轴"><a href="#修改标签和目录页为时间轴" class="headerlink" title="修改标签和目录页为时间轴"></a>修改标签和目录页为时间轴</h3><ul><li><p>原生的icarus这两页的展示方式与homepage一致，依次展示按块展示每篇博客的标题和简介。这样的展示效率并不高。我希望把这两页的展示方式替换为和存档archive页相同的时间轴显示</p></li><li><p>我们要用到的文件有：<br>|– includes<br>|   |– generators<br>|   |   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/category.js" rel="external nofollow noreferrer">category.js</a><br>|   |   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/tag.js" rel="external nofollow noreferrer">tag.js</a><br>|– layout<br>|   |– archive.ejs<br>|   |– category.ejs<br>|   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_cat.ejs" rel="external nofollow noreferrer">custom_cat.ejs</a><br>|   |– categories.ejs<br>|   |– tag.ejs<br>|   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_tag.ejs" rel="external nofollow noreferrer">custom_tag.ejs</a></p></li></ul><ol><li><p>修改目录页生成器<code>/includes/generators/category.js</code>：在第23行，把默认输出页面样式的archive排到最前即可</p>  <figure class="highlight diff"><figcaption><span>includes/generators/category.js</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/category.js" rel="external nofollow noreferrer">category.js </a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- layout: ['category', 'archive', 'index'],</span><br><span class="hljs-addition">+ layout: ['archive', 'category', 'index'],</span><br></code></pre></td></tr></table></figure><p>  这样修改后，进入目录页，比如<a href="https://annewqx.top/categories/Code/Guide/" rel="external nofollow noreferrer">Code/Guide</a>后，页面就会按照时间轴显示该分类下所有文章，但是时间轴的标签依旧是2020\2019，而且文章的信息只有日期似乎有些寡淡了，如果我们想展示文章字数/展示文章阅读人数/让标签显示分类的名称呢？</p><p>  <img src="Screenshot2020-03-0823.50.38.png" alt="code/guide目录页示意图"></p><p>  其实非常简单。我们在layout文件夹下，新建一个文件<code>custom_cat.ejs</code></p><ol><li><p>复制<code>archive.ejs</code>中的代码到<code>custom_cat.ejs</code></p></li><li><p>修改时间轴标签为分类名称：第六行，进行替换</p>  <figure class="highlight diff"><figcaption><span>layout/custom_cat.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_cat.ejs" rel="external nofollow noreferrer">custom_cat.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;h3 class="tag is-link"&gt;<br><span class="hljs-deletion">-   &lt;%= month === null ? year : time.locale(get_config('language', 'en')).format('MMMM YYYY') %&gt;</span><br><span class="hljs-addition">+   &lt;%= page.category %&gt;</span><br>&lt;/h3&gt;<br></code></pre></td></tr></table></figure></li><li><p>显示文章的字数和估计阅读时间：在第十九行的<code>class=content</code>块的<code>&lt;time&gt;</code>标签中，添加<code>&lt;span&gt;</code>块</p>  <figure class="highlight diff"><figcaption><span>layout/custom_cat.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_cat.ejs" rel="external nofollow noreferrer">custom_cat.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;div class="content"&gt;<br>    &lt;time class="has-text-grey is-size-7 is-block is-uppercase" datetime="&lt;%= date_xml(post.date) %&gt;"&gt;&lt;%= date(post.date) %&gt;<br><span class="hljs-addition">+       &lt;span&gt;</span><br><span class="hljs-addition">+          &amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="hljs-addition">+          &lt;% const words = word_count(post._content); %&gt;</span><br><span class="hljs-addition">+          &lt;% const time = duration((words / 150.0) * 60, 'seconds') %&gt;</span><br><span class="hljs-addition">+          &lt;%= `$&#123; time.locale(get_config('language', 'en')).humanize() &#125; $&#123; __('article.read')&#125; ($&#123; __('article.about') &#125; $&#123; words &#125; $&#123; __('article.words') &#125;)` %&gt;</span><br><span class="hljs-addition">+       &lt;/span&gt;</span><br>    &lt;/time&gt;<br></code></pre></td></tr></table></figure></li><li><p>添加阅读次数。</p><p>  尽管busuanzi十分方便，但是它不支持在目录页显示每篇文章的阅读量(=_=就是一个API)，所以我们要换用一个新的页面统计工具，为防止此部分篇章过长，相关配置将放到本文的<a href="https://www.githang.com/2019/05/30/hexo-article-reading-statistics-based-on-leancloud/" rel="external nofollow noreferrer">阅读量统计替换</a>部分。</p>  <div class="tip">      以下代码未通过测试，请勿使用  </div><p>  在<code>custom_cat.ejs</code>的第四十行左右，进行以下内容的添加</p>  <figure class="highlight js"><figcaption><span>layout/custom_cat.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_cat.ejs" rel="external nofollow noreferrer">custom_cat.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span> (post.categories &amp;&amp; post.categories.length) &#123; %&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"level-item is-size-7 is-uppercase"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">list_categories</span>(<span class="hljs-attr">post.categories</span>, &#123;<br>        <span class="hljs-attr">class:</span> '<span class="hljs-attr">has-link-grey</span> ',<br>        <span class="hljs-attr">show_count:</span> <span class="hljs-attr">false</span>,<br>        <span class="hljs-attr">style:</span> '<span class="hljs-attr">none</span>',<br>        <span class="hljs-attr">separator:</span> ' / '<br>    &#125;) %&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;% &#125; %&gt;<br> &lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'comment.appID'</span>) &amp;&amp; get_config(<span class="hljs-string">'comment.type'</span>) === <span class="hljs-string">'valine'</span>) &#123; %&gt;<br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"level-item has-text-grey is-size-7 is-uppercase"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"far fa-eye"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">_p</span>('<span class="hljs-attr">plugin.visit</span>', '&lt;<span class="hljs-attr">span</span> <span class="hljs-attr">data-hk-page</span>=<span class="hljs-string">"post.url"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-spinner fa-spin"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>') %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure></li><li><p>再次修改目录页生成器<code>category.js</code></p>  <figure class="highlight js"><figcaption><span>includes/generators/category.js</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/category.js" rel="external nofollow noreferrer">category.js </a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">layout: [<span class="hljs-string">'custom_cat'</span>, <span class="hljs-string">'category'</span>, <span class="hljs-string">'index'</span>],<br></code></pre></td></tr></table></figure><p>完成!🤩</p><div align="center">  <img src="Screenshot2020-03-0900.17.54.png" alt="最终效果" style="zoom:50%;" /></div><p>​     </p></li></ol></li><li><p>用相似的方法，我们修改tag页</p><ol><li>添加生成器<code>/includes/generators/tag.js</code>。具体内容可参考<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/tag.js" rel="external nofollow noreferrer">tag.js</a></li><li>添加<code>layout/custom_tag</code>。内容可参考 <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_tag.ejs" rel="external nofollow noreferrer">custom_tag.ejs</a></li></ol><blockquote><p>这里说明一下，这里标签的修改只做了最简单的替换，我并没有去动archive里原本的生成函数，所以时间轴的逻辑依然是按照时间顺序排列，按照年份分区。如果希望能修改为按照分类的子目录分区–我尝试了hexo提供的<code>category.parent</code> <code>category.children</code>等重构函数，但遇到了几个异常抛出。这个bug先留一下吧。</p></blockquote></li></ol><h3 id="将tag页合并入categories页"><a href="#将tag页合并入categories页" class="headerlink" title="将tag页合并入categories页"></a>将tag页合并入categories页</h3><figure class="highlight diff"><figcaption><span>layout/layout.ejs</span><a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/layout.ejs" rel="external nofollow noreferrer">layout.ejs</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs diff">    &lt;section class="section"&gt;<br>        &lt;div&gt;<br>            &lt;div class="columns is-centered"&gt;<br>                &lt;div class="column &lt;%= main_column_class() %&gt; has-order-2 column-main"&gt;<br>                    &lt;%- body %&gt;<br><span class="hljs-addition">+                    &lt;% if (is_categories() === true) &#123; %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('tags') %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('archive') %&gt;</span><br><span class="hljs-addition">+                    &lt;% &#125; %&gt;</span><br><span class="hljs-addition">+                    &lt;% if (is_tags() === true) &#123; %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('categories') %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('archive') %&gt;</span><br><span class="hljs-addition">+                    &lt;% &#125; %&gt;</span><br>                &lt;/div&gt;<br>                &lt;%-  _partial('common/widget', &#123; position: 'left' &#125;) %&gt;<br>                &lt;%-  _partial('common/widget', &#123; position: 'right' &#125;) %&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br></code></pre></td></tr></table></figure><h3 id="添加警告块"><a href="#添加警告块" class="headerlink" title="添加警告块"></a>添加警告块</h3><p>在<code>source/css/style.styl</code>中添加如下样式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* ---------------------------------<br> *        Add tip block<br> * --------------------------------- */</span><br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.tip</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">24px</span> <span class="hljs-number">12px</span> <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#f66</span>;<br>    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f6f8fa</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.tip</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">"!"</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">font-family</span>: Dosis, <span class="hljs-string">"Source Sans Pro"</span>, <span class="hljs-string">"Helvetica Neue"</span>, Arial, sans-serif;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f66</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.tip</span> <span class="hljs-selector-tag">br</span> &#123; <span class="hljs-attribute">display</span>: none; &#125;<br></code></pre></td></tr></table></figure><p>在写作时，使用以下代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tip"</span>&gt;</span><br>  这里是警告块内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><div class="tip">  这里是警告块内容</div><h3 id="添加页末版权"><a href="#添加页末版权" class="headerlink" title="添加页末版权"></a>添加页末版权</h3><ol><li>在<code>layout/common</code>下添加文件<code>copyright.ejs</code>。内容可参考<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/copyright.ejs" rel="external nofollow noreferrer">copyright.ejs</a></li><li>在<code>source/css</code>下添加文件<code>copyright.styl</code>。内容可参考<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/source/css/copyright.styl" rel="external nofollow noreferrer">copyright.styl</a>。其中提供两种样式：<code>my-post-copyright</code>和<code>post-copyright</code></li><li>在<code>source/css/style.styl</code>中导入<code>copyright.styl</code><figure class="highlight scss"><figcaption><span>source/css/style.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* ---------------------------------<br> *        Add Copyright CSS<br> * --------------------------------- */</span><br><span class="hljs-keyword">@import</span> copyright<br></code></pre></td></tr></table></figure></li><li>在<code>layout/common/article.ejs</code>中插入<code>copyright.ejs</code><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;div class="content"&gt;<br>    &lt;%- index &amp;&amp; post.excerpt ? post.excerpt : post.content %&gt;<br>&lt;/div&gt;<br><span class="hljs-addition">+   &lt;% if (is_post()===true) &#123; %&gt;</span><br><span class="hljs-addition">+       &lt;%- _partial('common/copyright') %&gt;</span><br><span class="hljs-addition">+   &lt;% &#125; %&gt;</span><br>&lt;% if (!index &amp;&amp; post.tags &amp;&amp; post.tags.length) &#123; %&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/35400128" rel="external nofollow noreferrer">知乎专栏：hexo博客搭建（五）SEO优化</a></p></blockquote><h3 id="评论邮件回执"><a href="#评论邮件回执" class="headerlink" title="评论邮件回执"></a>评论邮件回执</h3><blockquote><p><a href="https://deserts.io/valine-admin-document/" rel="external nofollow noreferrer">Valine Admin 配置手册</a></p></blockquote><h3 id="修改busuanzi阅读量统计为leancloud"><a href="#修改busuanzi阅读量统计为leancloud" class="headerlink" title="修改busuanzi阅读量统计为leancloud"></a>修改busuanzi阅读量统计为leancloud</h3><p><span id="leancloud"></span></p><blockquote><p>参考文章</p><p><a href="https://www.githang.com/2019/05/30/hexo-article-reading-statistics-based-on-leancloud/" rel="external nofollow noreferrer">https://www.githang.com/2019/05/30/hexo-article-reading-statistics-based-on-leancloud/</a></p><p><a href="https://jerryzou.com/posts/introduction-to-hit-kounter-lc/" rel="external nofollow noreferrer">https://jerryzou.com/posts/introduction-to-hit-kounter-lc/</a></p><p><a href="https://github.com/bulandent/hexo-theme-bubuzou/blob/master/doc/doc-zh.md" rel="external nofollow noreferrer">https://github.com/bulandent/hexo-theme-bubuzou/blob/master/doc/doc-zh.md</a></p></blockquote><p>因为我们在配置Valine时已经注册了leancloud，所以这里就以leancloud为例。</p><div class="tobecontinues">------ to be continued ------</div><h3 id="添加ads"><a href="#添加ads" class="headerlink" title="添加ads"></a>添加ads</h3>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客：部署</title>
      <link href="/posts/65182/"/>
      <url>/posts/65182/</url>
      
        <content type="html"><![CDATA[<hr><p>通过创建远端git仓库，将本地的hexo博客部署到远端服务器并通过Nginx服务运行</p><a id="more"></a><blockquote><p>参考文章：<a href="https://ihaoming.top/archives/c9c37af.html" rel="external nofollow noreferrer">芒果浩明</a></p><p>已将nginx替换为Caddy，相关文章见<a href="https://www.annewqx.top/posts/2210/">使用Caddy替换Nginx运行网站</a></p></blockquote><h2 id="操作环境及先决条件"><a href="#操作环境及先决条件" class="headerlink" title="操作环境及先决条件"></a>操作环境及先决条件</h2><ul><li>本地macOS Catalina</li><li>centOS 7的VPS</li><li>本地需要的相关环境：git、nodejs、hexo、ssh-key，相关文章见<a href="https://www.annewqx.top/posts/2727/">hexo博客搭建入门</a></li></ul><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>使用root身份登录服务器<code>ssh root@IP</code></p><h3 id="创建网站目录"><a href="#创建网站目录" class="headerlink" title="创建网站目录"></a>创建网站目录</h3>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建网站文件夹</span><br>sudo mkdir /var/www/blog<br><span class="hljs-comment"># 确认文件夹权限</span><br>sudo chown git:git -R /var/www/blog<br>sudo chown git:git -R /home/git/blog.git<br><span class="hljs-comment"># 查看这两个文件夹是不是都属于git:git</span><br>ll /home/git/<br>ll /var/www/<br></code></pre></td></tr></table></figure><h3 id="安装配置git"><a href="#安装配置git" class="headerlink" title="安装配置git"></a>安装配置git</h3><ol start="2"><li><p>安装git<code>sudo yum install git</code></p></li><li><p>创建git用户 <code>adduser git</code></p><p>假如没有提示输入密码，则<code>passwd git</code> 设置密码</p></li><li><p>初始化git仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置文件可写</span><br>chmod 740 /etc/sudoers<br><span class="hljs-comment"># 编辑用户配置文件</span><br>vim /etc/sudoers<br></code></pre></td></tr></table></figure><p>找到<code>root    ALL=(ALL) ALL</code>，换行添加<code>git     ALL=(ALL) ALL</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改回文件权限</span><br>chmod 440 /etc/sudoers<br>su git<span class="hljs-comment"># 切换到git用户</span><br><span class="hljs-built_in">cd</span> /home/git<span class="hljs-comment"># 切换到git用户目录</span><br>mkdir blog.git  <span class="hljs-comment"># 创建git仓库文件夹，以blog.git为例</span><br><span class="hljs-built_in">cd</span> blog.git  <span class="hljs-comment"># 进入仓库目录</span><br>git init --bare <span class="hljs-comment"># 使用--bare参数初始化为裸仓库</span><br></code></pre></td></tr></table></figure></li><li><p>配置Git hooks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git/blog.git/hooks<span class="hljs-comment"># 切换到hooks目录下</span><br>vim post-receive <span class="hljs-comment"># 创建文件</span><br></code></pre></td></tr></table></figure><p>复制下面的内容到post-receive中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>GIT_REPO=/home/git/blog.git<br>TMP_GIT_CLONE=/tmp/blog<br>PUBLIC_WWW=/var/www/blog<br>rm -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span><br>git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$GIT_REPO</span> <span class="hljs-variable">$TMP_GIT_CLONE</span><br>rm -rf <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span>/*<br>cp -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span><br></code></pre></td></tr></table></figure><p>保存退出，执行<code>chmod +x post-receive</code>赋予可执行权限</p></li></ol><h3 id="配置ssh免密登录"><a href="#配置ssh免密登录" class="headerlink" title="配置ssh免密登录"></a>配置ssh免密登录</h3><p><strong>这一步可以省略，如果省略之后git部署的时候输入git的用户密码即可</strong></p><ol><li><p>本地电脑创建SSH key（已有则跳过此步骤）</p><blockquote><p>ssh key是让我们每次登陆的时候无需输入密码，通过本机机器码验证的方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">   <span class="hljs-comment"># 查看本地的SSH key</span><br>   <span class="hljs-built_in">cd</span> ~/.ssh<br>ls *.pub<br>   <span class="hljs-comment"># 创建新的SSH key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">"email@example.com"</span><br>   <span class="hljs-comment"># 将key加入用户列表，否则每次都会需要验证电脑登录密码</span><br>ssh-add -k /Users/apple(Username)/.ssh/id_rsa<br></code></pre></td></tr></table></figure></li><li><p>复制<code>cat ~/.ssh/id_rsa.pub</code>的内容</p></li><li><p>ssh连接到服务器，配置ssh秘钥登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git<span class="hljs-comment"># 切换到git用户目录</span><br>mkdir .ssh  <span class="hljs-comment"># 创建.ssh目录</span><br>sudo vim .ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>将复制的本地公钥粘贴到到<code>authorized_keys</code>文件中，</p><p>编辑登录配置<code>sudo vim /etc/ssh/sshd_config</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#禁用密码验证</span><br>PasswordAuthentication no<br><span class="hljs-comment">#启用密钥验证</span><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br></code></pre></td></tr></table></figure><p>重启ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">su root<span class="hljs-comment"># 或者exit也可以退出到root用户</span><br>service sshd restart<br></code></pre></td></tr></table></figure><p>验证git用户能否使用ssh免密登录服务器：在本地终端，输入<code>ssh git@IP</code></p><p>如果出现<code>permission denied</code>的的话，可能是权限问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod 700 ~/.ssh<br>chmod 600 ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure></li></ol><h3 id="安装和配置nginx"><a href="#安装和配置nginx" class="headerlink" title="安装和配置nginx"></a>安装和配置nginx</h3><blockquote><p>nginx是比较主流的网页服务器，大部分的文章都会建议使用。但是nginx的https连接配置较为复杂，如果没有特别的学习需求可以换用更为简单的Caddy。相关文章见<a href="https://dengxiaolong.com/caddy/zh/caddyfile.html" rel="external nofollow noreferrer">Caddy官方文档 ，博主之后也会写相关总结</a></p></blockquote><ol><li><p>root用户身份登录到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加nginx到yum源</span><br>sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br><span class="hljs-comment"># 安装nginx</span><br>sudo yum install -y nginx<br><span class="hljs-comment"># 启动nginx</span><br>sudo systemctl start nginx.service<br><span class="hljs-comment"># 设置开机启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> -n nginx.service<br></code></pre></td></tr></table></figure><p>在浏览器输入服务器IP地址，如果出现403 FORBIDDEN页面则说明nginx启动成功；</p><p>如果浏览器提示无法链接，请检查防火墙是否开启，如果开启</p><ul><li>使用<code>systemctl stop firewalld</code>暂时关闭防火墙；</li><li>或者使用<code>firewall-cmd --add-port=80/tcp --permanent</code>开启防火墙的80端口，再使用<code>systemctl restart firewalld.service</code>重启防火墙。</li><li>关于防火墙的详细配置，可见本博客文章<a href="https://www.annewqx.top/posts/9931/">VPS和Shadowsocks配置</a>最后一部分</li></ul><blockquote><p>nginx常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启动</span><br>service nginx start<br><span class="hljs-comment">#停止</span><br>nginx -s stop<br><span class="hljs-comment">#查看nginx进程</span><br>ps -ef | grep nginx<br><span class="hljs-comment">#平滑启动nginx</span><br>nginx -s reload <br><span class="hljs-comment">#强制停止nginx</span><br>pkill -9 nginx<br><span class="hljs-comment">#检查对nginx.conf文件的修改是否正确</span><br>nginx -t -c /etc/nginx/nginx.conf<br>nginx -t<br><span class="hljs-comment">#查看版本</span><br>nginx -v<br><span class="hljs-comment"># 关闭开机启动</span><br>sudo systemctl <span class="hljs-built_in">disable</span> -n nginx.service<br></code></pre></td></tr></table></figure></blockquote></li><li><p>配置nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/nginx/conf.d<br>sudo cp default.conf default.bak<span class="hljs-comment">#备份</span><br>sudo vim default.conf<br></code></pre></td></tr></table></figure><p>配置文件参考</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">server &#123;<br>    listen       80;<br>    server_name  localhost;<br>    root /var/www/blog;// 网站根目录<br>    server_name annewqx.top www.annewqx.top;// 域名，没有可跳过<br> access_log  /var/log/nginx/blog_access.log;<br> error_log   /var/log/nginx/blog_error.log;<br> error_page 404 =  /404.html;<br><br>    location / &#123;<br>        root   /var/www/blog;<br>        index  index.html index.htm;<br>    &#125;<br>    location / &#123;<br> root /var/www/blog;<br> if (-f $request_filename) &#123;<br> rewrite ^/(.*)$  /$1 break;<br> &#125;<br> &#125;<br> location /nginx_status &#123;<br>   stub_status on;<br>  access_log off;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>nginx -s reload</code> 重启nginx</p></li></ol><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><ul><li>打开本地博客根目录下的_config.yml文件，找到最后的deploy配置，添加：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-comment"># github.io</span><br><span class="hljs-bullet">-</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">'git'</span><br>   <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/anne416wu/anne416wu.github.io.git</span> <br><span class="hljs-comment"># VPS</span><br><span class="hljs-string">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br> <span class="hljs-attr">repo:</span> <span class="hljs-string">git@VPS的IP:blog.git</span><br>   <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>至此,hexo三联就可以把博客部署到vps了。可以在浏览器输入服务器的IP地址查看。</p><p>如果想要通过域名访问,则需要自己在域名管理那里修改解析的线路使得域名解析指向vps服务器的ip</p><blockquote><p>git 配置完SSH 以后，push 或者pull 的时候每次都提示Enter passphrase for key ‘/Users/Username/.ssh/id_rsa’可以这样解决</p><ul><li><p>一次性：终端输入<code>eval ssh-agent</code>，<code>ssh-add</code></p></li><li><p>永久生效：终端输入ssh-add -k /Users/m/.ssh/id_rsa</p></li></ul></blockquote><h2 id="域名配置-非必须"><a href="#域名配置-非必须" class="headerlink" title="域名配置(非必须)"></a>域名配置(非必须)</h2><blockquote><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/33921436" rel="external nofollow noreferrer">Namesilo 域名购买及使用教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/86961133" rel="external nofollow noreferrer">Namesilo DNS 域名解析教程和常见问题解决方法汇总</a></li></ul><p>博客已经搭好了，但是叫朋友看</p></blockquote><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><ol><li><p>注册并激活NameSilo账号</p></li><li><p>搜索并购买想要注册的域名，使用优惠码<code>go2think</code>或<code>okoff</code>可减$1</p></li><li><p>付款，如果使用支付宝，则支付宝需要是绑定了邮箱的账号。我购买的时候支付宝扣了钱后半分钟又退回了，返回了失败，最后还是用的PayPal。</p><blockquote><p>这里说一下题外话，最便宜的一般是.xyz域名，不到1刀，但是如果订单不满1刀的话是无法使用优惠券的。.top的域名原价$1.49/year，优惠后约等于不要钱啊。</p><p>另外长远考虑，不建议购买.me等国内无法备案的域名。</p></blockquote></li></ol><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><ol><li><p>打开域名管理页面，选择option栏下的蓝地球(DNS管理)按钮</p></li><li><p>删除原本的四个park解析记录</p></li><li><p>添加A记录，一条为example.com，一条为<a href="http://www.example.com" rel="external nofollow noreferrer">www.example.com</a></p><p><img src="https://pic4.zhimg.com/80/v2-fa9f2887329780a0b51661bd6fd2f1df_1440w.jpg" alt="img"></p></li><li><p>DNS解析完成后生效大改需要十五分钟</p></li><li><p>可以使用域名连接你的博客了，在浏览器输入域名查看结果</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客：主题比较</title>
      <link href="/posts/27751/"/>
      <url>/posts/27751/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>hexo各个主题的比较, 以及部分主题的修改</p></blockquote><a id="more"></a><h2 id="我的需求"><a href="#我的需求" class="headerlink" title="我的需求"></a>我的需求</h2><blockquote><p>目的：记录开发中遇到的坑，形成自己的handbook</p></blockquote><ol><li>功能：<ul><li>🔍站内搜索LeanCloud统计</li><li>🤥<a href="#valine_comment"> Valine的评论服务 </a></li><li>较为友好的代码高亮</li><li>有展示GitHub project（接入GitHub的API）的project页面</li><li>seo支持</li></ul></li><li>界面：<ul><li>首页tagCloud和categories的Widget</li><li>首页的index展示文章的tag和category标签</li><li>单篇博文内有随页面变化的目录widget</li><li>archive展示时间轴 </li></ul></li></ol><h2 id="各个theme评价"><a href="#各个theme评价" class="headerlink" title="各个theme评价"></a>各个theme评价</h2><h3 id="基于jade-pug-开发的主题"><a href="#基于jade-pug-开发的主题" class="headerlink" title="基于jade ( pug )开发的主题"></a>基于jade ( pug )开发的主题</h3><blockquote><p>Jade 是一个高性能的模板引擎，它深受 <a href="http://haml-lang.com/" rel="external nofollow noreferrer">Haml</a> 影响，它是用 JavaScript 实现的，并且可以供 <a href="http://nodejs.org/" rel="external nofollow noreferrer">Node</a> 使用，后来由于商标的原因，改为Pug  </p><div class="tip"> 以下列举的主题都仍然使用hexo-renderer-jade插件，npm会提示插件已被废弃，运行时会显示错误提示。首先要替换hexo-renderer-jade插件为hexo-renderer-pug，下载命令为npm install hexo-renderer-pug --save；然后将主题layout文件夹中的所有.jade文件替换为.pug文件</div>入门指南：[pug中文文档](https://pugjs.org/zh-cn/api/getting-started.html)</blockquote><ol><li><p><a href="https://github.com/pinggod/hexo-theme-apollo" rel="external nofollow noreferrer">Apollo</a></p><p>博客首页<br><img src="apollo_homepage.png" alt="apollo_homepage"><br>博客归档页<br><img src="apollo_archivepage.png" alt="apollo_archivepage"></p><ul><li>界面干净，多个theme都基于apollo开发，如<a href="https://github.com/MikeCoder/hexo-theme-Gandalfr" rel="external nofollow noreferrer">Gandalfr</a>  <a href="https://github.com/claymcleod/hexo-theme-hermes" rel="external nofollow noreferrer">Hermes</a>  <a href="https://github.com/Dreyer/hexo-theme-artemis" rel="external nofollow noreferrer">artemis</a> <a href="https://github.com/bulandent/hexo-theme-bubuzou" rel="external nofollow noreferrer">bubuzou</a> <a href="https://github.com/lyndonoc/hexo-theme-pandollo" rel="external nofollow noreferrer">pandollo</a></li><li>缺点: 功能缺乏，需要自己接入评论、目录、搜索、Widget等功能；</li></ul></li><li><p><a href="https://github.com/bulandent/hexo-theme-bubuzou" rel="external nofollow noreferrer">bubuzou</a></p><p>博客首页<br><img src="bubuzou_archieve_page.png" alt="bubuzou_archieve_page"><br>博文底部<br><img src="bubuzou_post_page.png" alt="bubuzou_post_page"></p><ul><li><p>基于apollo开发, 补充大量apollo缺乏的功能，如评论、目录、搜索、Widget；评论支持Valine评论；</p></li><li><p>首页 css页面适配存在缺陷（缩放时borden过小），代码高亮有缺陷，个别博文底部不会出现评论窗口(奇奇怪怪的bug)</p></li><li><p>实际使用的时候发现leancloud的访问量统计功能有缺点，留个坑；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jade">p.visit<br>i(class&#x3D;&quot;article-timer&quot;, data-identity&#x3D;item.path)<br>   span 次访问<br>   if (is_home())<br>   i(data-hk-page&#x3D;&#39;http:&#x2F;&#x2F;anne416wu.github.io&#39;+url_for(item.path)) -<br>   else <br>   i(data-hk-page&#x3D;&quot;current&quot;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://github.com/MikeCoder/hexo-theme-Gandalfr" rel="external nofollow noreferrer">Gandalfr</a></p><ul><li>不放图了，这玩意儿bug挺多。有意思的是作者写了个tagCloud的辅助插件，给TagCloud加上了动画效果。界面上较bubuzou更贴近apollo。</li><li>有时间的可以把Gandalfr的界面和bubuzou的功能结合一下。</li></ul></li></ol><h3 id="基于ejs开发的主题"><a href="#基于ejs开发的主题" class="headerlink" title="基于ejs开发的主题"></a>基于ejs开发的主题</h3><blockquote><p> ejs是一套简单的模板语言，利用普通的 JavaScript 代码生成 HTML 页面，相比上面使用jade，修改更为方便。个人体验感觉ejs性能的确不如jade。</p></blockquote><ol><li><p><a href="https://github.com/yanm1ng/hexo-theme-vexo" rel="external nofollow noreferrer">Vexo</a><br>博客首页<br><img src="vexo_homepage.png" alt="vexo_homepage"><br>博文开头<br><img src="vexo_postpage.png" alt="vexo_postpage"><br>归档页<br><img src="vexo_archievepage.png" alt="vexo_archivepage"><br>项目页<br><img src="vexo_projectpage.png" alt="vexo_projectpage"></p><ul><li>满足对界面的一切幻想(对界面的幻想都是这个主题惯出来的)，支持多种代码高亮</li><li>缺点：未接入搜索功能，仅支持gitment评论，无首页CLoudTag的Widget等</li><li>本地运行存在bug。使用<code>hexo s</code>预览时，如果文章资源读取出现错误，整个博客页面会显示空白</li></ul></li><li><p><a href="https://github.com/probberechts/hexo-theme-cactus" rel="external nofollow noreferrer">Cactus</a></p><p>博客首页<br><img src="cactus_homepage.png" alt="cactus_homepage"><br>博文开头<br><img src="cactus_postpage.png" alt="cactus_postpage"><br>归档页<br><img src="cactus_archievepage.png" alt="cactus_archivepage"></p><ul><li>界面干净，支持多种代码高亮</li><li>因为是国外开发的，对本地化的支持较少；</li></ul><p>&lt;–未完待续–&gt;</p></li></ol><h3 id="基于Swig开发的主题"><a href="#基于Swig开发的主题" class="headerlink" title="基于Swig开发的主题"></a>基于Swig开发的主题</h3>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客：入门</title>
      <link href="/posts/2727/"/>
      <url>/posts/2727/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>使用基于Nodejs的Hexo博客框架, 结合github.io页面, 快速搭建个人博客并发布</p></blockquote><a id="more"></a><h2 id="0-先决条件"><a href="#0-先决条件" class="headerlink" title="0 先决条件"></a>0 先决条件</h2><ul><li>GitHub账号</li></ul><h2 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1 工具准备"></a>1 工具准备</h2><h3 id="1-GITHUB仓库创建"><a href="#1-GITHUB仓库创建" class="headerlink" title="1 GITHUB仓库创建"></a>1 GITHUB仓库创建</h3><p>​    创建新repository，名为<code>username.github.io</code>(username与github用户名一致)</p><h3 id="2-安装相关工具"><a href="#2-安装相关工具" class="headerlink" title="2 安装相关工具"></a>2 安装相关工具</h3><ol><li><p><a href="https://www.cnblogs.com/kaiye/p/4937191.html" rel="external nofollow noreferrer">安装node管理工具nvm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用brew安装</span><br>brew install nvm<br><span class="hljs-comment"># 添加进终端配置文件（.zshrc或.bash_profile)</span><br><span class="hljs-built_in">export</span> NVM_DIR=~/.nvm<br>[ -s <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span><br></code></pre></td></tr></table></figure><blockquote><p>此处有个坑: nvm官方并不建议使用brew安装</p><p><code>Homebrew installation is not supported. If you have issues with homebrew-installed nvm, please brew uninstall it, and install it using the instructions below, before filing an issue.</code></p><p>如果使用Homebrew安装，因为安装路径等原因, 在.nvm中会缺少nvm-exec和nvm.sh两个文件。导致每次启动终端都需要输入<code>source $(brew --prefix nvm)/nvm.sh</code>才能使当前终端使用nvm命令</p><p>解决方法有2</p><ol><li><p>简单粗暴：在.zshrc（终端配置文件）中加入<code>source $(brew --prefix nvm)/nvm.sh</code></p></li><li><p>曲线救国：(注意此方法curl命令可能被墙, 具体见<a href="https://github.com/nvm-sh/nvm" rel="external nofollow noreferrer">nvm项目github</a>)</p><ol><li><p>卸载使用brew安装的nvm<code>brew uninstall nvm</code></p></li><li><p>使用curl命令下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.2/install.sh | bash<br></code></pre></td></tr></table></figure></li><li><p>终端配置文件加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">"<span class="hljs-variable">$HOME</span>/.nvm"</span><br>[ -s <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="hljs-comment"># This loads nvm</span><br>[ -s <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/bash_completion"</span>  <span class="hljs-comment"># This loads nvm bash_completion</span><br></code></pre></td></tr></table></figure></li></ol></li></ol></blockquote></li><li><p>安装nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install stable<br></code></pre></td></tr></table></figure><blockquote><p> 网上很多过期教程会建议使用 <code>nvm install 4</code> , <code>nvm install 6</code>  , 实际安装后, node版本在7以下的都会抛出异常, 建议一步到位安装最新稳定版node</p><p> nvm/npm常用命令:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换nvm版本至 &lt;number&gt;开头的默认版本</span><br>nvm use &lt;number&gt; <br><span class="hljs-comment">#设置默认 node 版本为 0.12.7</span><br>nvm <span class="hljs-built_in">alias</span> default 0.12.7 <br><span class="hljs-comment"># 使用.nvmrc文件配置项目所使用的node版本</span><br><span class="hljs-built_in">cd</span> &lt;项目根目录&gt;  <span class="hljs-comment">#进入项目根目录</span><br><span class="hljs-built_in">echo</span> &lt;number&gt; &gt; .nvmrc <span class="hljs-comment">#添加 .nvmrc 文件</span><br>nvm use <span class="hljs-comment">#无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span><br>node -v <span class="hljs-comment">#查看 node 是否切换为对应版本</span><br><span class="hljs-comment">#安装 &lt;module-name&gt; 模块至全局目录，安装完成的路径是 /Users/&lt;username&gt;/.nvm/versions/node/&lt;nvm-version&gt;/lib/&lt;module-name&gt;</span><br>npm install -g &lt;module-name&gt;<br></code></pre></td></tr></table></figure><p> nvm与n的区别</p><ul><li>node 版本管理工具还有一个是 <a href="https://github.com/tj/n" rel="external nofollow noreferrer">TJ 大神的 n</a> 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</li><li>由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</li></ul></blockquote></li><li><p><a href="https://hexo.io/zh-cn/" rel="external nofollow noreferrer">安装Hexo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-hexo的使用入门"><a href="#2-hexo的使用入门" class="headerlink" title="2 hexo的使用入门"></a>2 <a href="https://hexo.io/zh-cn/" rel="external nofollow noreferrer">hexo的使用入门</a></h2><ol><li><p>创建博客和基础配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init username.github.io <span class="hljs-comment"># 博客根目录&lt;folder_name&gt;</span><br><span class="hljs-built_in">cd</span> username.github.io<br></code></pre></td></tr></table></figure><p>更改博客根目录下的_config.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span><br><span class="hljs-attr">author:</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-Hans</span> <span class="hljs-comment">#中文</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <br><span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/username/username.github.io.git</span><br></code></pre></td></tr></table></figure></li><li><p>更换主题</p><p>主题测评见文章<a href="../hexo_theme">hexo的主题比较</a> </p><p>hexo初始化中自带landscape主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 此处以next主题为例</span><br>git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>进入themes/next, 打开_config.yml, 按照文件中的说明即可对主题进行基础配置</p><p>同时更改博客根目录中_config.yml文件的<code>theme: next</code></p></li><li><p>写文章</p><p>博客根目录username.github.io下的source文件夹保存所有博客, 默认使用md语法</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/writing.html" rel="external nofollow noreferrer">hexo写作命令</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hexo博客搭建入门<br>date: 2020-02-16<br>tags: hexo js<br>categories:<br><span class="hljs-bullet">  - </span>Code<br><span class="hljs-bullet">  - </span>Guide<br><span class="hljs-section">keywords: hexo js 前端 博客<br>---</span><br>Hello World!<br></code></pre></td></tr></table></figure></li><li><p>测试<code>hexo s</code></p></li><li><p>安装使用hexo-deployer-git](<a href="https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git)自动部署发布工具" rel="external nofollow noreferrer">https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git)自动部署发布工具</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure></li></ol><h2 id="hexo的使用进阶"><a href="#hexo的使用进阶" class="headerlink" title="hexo的使用进阶"></a><a href="https://hexo.io/zh-cn/docs/" rel="external nofollow noreferrer">hexo的使用进阶</a></h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li><p><code>hexo init</code>：新建一个网站</p></li><li><p><code>hexo new [layout] --option &lt;titile&gt;</code> ：新建一个layout的文章，如果标题有空格，使用引号括起来</p><ul><li><code>-p</code> 自定义新文章的路径</li><li><code>-r</code> 替换同名文章</li><li><code>-s</code> 作为新文章的文件名和发布后的url</li></ul></li><li><p><code>hexo generate</code>生成静态文件(只生成有改动的文件)</p><ul><li><code>-d</code>生成后立刻部署</li><li><code>-w</code> 监视文件变动</li><li><code>-b</code> 抛出生成过程中的异常</li><li><code>-f</code> 强制重新生成全部文件</li><li><code>-c</code> 最大同时生成文件的数量</li></ul></li><li><p><code>hexo publish [layout] &lt;filename&gt;</code> 发表草稿</p></li><li><p><code>hexo server</code> 打开本地服务器</p></li><li><p><code>hexo deploy</code> 部署</p></li><li><p><code>hexo render &lt;file1&gt; [file2]</code> 渲染文件</p><ul><li><code>-o</code>设置输出路径</li></ul></li></ul><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><ul><li><p>layout：post/page/draft</p><blockquote><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote></li><li><p>title：在_config.yaml中编辑参数改变默认名称</p></li><li><p>scaffold：根须scaffold文件夹内对应的文件来建立文件</p></li></ul><h3 id="Font-matter"><a href="#Font-matter" class="headerlink" title="Font-matter"></a>Font-matter</h3><ul><li><p>layout：布局</p></li><li><p>title：标题/文件名</p></li><li><p>date：建立日期</p></li><li><p>update：更新日期</p></li><li><p>comments：开启文章的评论功能</p></li><li><p>tags：标签</p></li><li><p>categories：分类</p><ul><li><p>如果需要为文章添加多个分类</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">- </span>[Diary, PlayStation]<br><span class="hljs-bullet">- </span>[Diary, Games]<br><span class="hljs-bullet">- </span>[Life]<br></code></pre></td></tr></table></figure></li></ul></li><li><p>permalink：覆盖网址</p></li><li><p>keywords：仅用于meta标签和Open Graph的关键词</p></li></ul><h3 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h3><blockquote><p>并不建议过多使用这些标签，这些标签是hexo的私有语法，迁移是会有不便，建议还是多使用md语法</p><p>hexo官网关于个别标签的演示并不完整，<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/Posts/hexo-built-in-tag-helpers/" rel="external nofollow noreferrer">icarus主题的文档</a>中有不同插件使用的Demo</p></blockquote><ul><li><p>引用块(quote)  等同md语法的&lt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;<br>content<br>&#123;% endblockquote %&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码块(code) 等同md语法的```</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;<br>code snippet<br>&#123;% endcodeblock %&#125;<br></code></pre></td></tr></table></figure><ul><li>line_number:flase</li><li>highlight:true</li><li>first_line:13 行号从第几开始</li><li>​     下划线特定行，即第1行和4到7行</li><li>wrap:true</li></ul></li><li><p>Pull Quote</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% pullquote [class] %&#125;<br>content<br>&#123;% endpullquote %&#125;<br></code></pre></td></tr></table></figure></li><li><p>jsFiddle</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Gist(一般短代码直接插入markdown，长代码才用gist)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% gist gist_id [filename] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>iframe</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% iframe url [width] [height] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Image</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% img [class names] /path/to/image [width] [height] '"title text" "alt text"' %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Link</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% link text url [external] [title] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Include</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Youtube/Vimeo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% youtube video_id %&#125;<br>&#123;% vimeo video_id %&#125;<br></code></pre></td></tr></table></figure></li><li><p>引用文章(我一般是当做直接引用链接fffff)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% post_path filename %&#125;<br>&#123;% post_link filename [title] [escape] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>引用文章的资源(关于资源文件夹的设置见本文<a href="#asset">图片</a>部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% asset_path filename %&#125;<br>&#123;% asset_img filename [title] %&#125;<br>&#123;% asset_link filename [title] [escape] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Raw 插入Swig标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% raw %&#125;<br>content<br>&#123;% endraw %&#125;<br></code></pre></td></tr></table></figure></li><li><p>文章摘要：在<code>&lt;!--more--&gt;</code> 之前的文字</p><p>可能会被Font Matter中的<code>excerpt</code>部分覆盖(需要插件支持)</p></li></ul><h3 id="图片"><a href="#图片" class="headerlink" title=" 图片"></a><span id = "asset"> <a href="https://hexo.io/zh-cn/docs/asset-folders.html" rel="external nofollow noreferrer">图片</a></span></h3><ol><li><p>资源文件夹 : 最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p></li><li><p>组织化资源管理方式 : 通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开, 当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout]</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片名称</span>](<span class="hljs-link">图片名称.jpg</span>)<br></code></pre></td></tr></table></figure><p>需要注意, 使用md时,在首页显示会出现错误, 使用标签插件可以解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% asset_img 图片名称.jpg This is an example image %&#125;<br></code></pre></td></tr></table></figure><blockquote><p>tips</p><ol><li><p>在typora的设置中进行以下修改可以与hexo同步：</p><p><img src="typoraimg_setting.jpg" alt="typoraimg_setting"></p></li><li><p>组织化资源管理的两种方式都会使图片失去本地编辑器上的可读性</p></li></ol><div class="tip">3. 实际使用中会遇到部分主题对标签插件渲染出现莫名其妙的错误(vexo)，或者主题不支持(terminal)，所以除非需要在首页的展示缩略图，建议使用markdown语法的方式。</div></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上Haskell的安装环境搭建</title>
      <link href="/posts/32573/"/>
      <url>/posts/32573/</url>
      
        <content type="html"><![CDATA[<p>Mac上Haskell的换源和安装</p><a id="more"></a><blockquote><p>参考文章：<a href="https://www.jianshu.com/p/d86fec07856d" rel="external nofollow noreferrer">vscode搭建haskell环境</a></p><p>参考文章针对的是旧版本的stack，本文针对较新版本的stack</p></blockquote><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><blockquote><p><a href="https://docs.haskellstack.org/en/stable/README/" rel="external nofollow noreferrer">stack官方安装指导</a></p><p>Installing GHC automatically, in an isolated location.<br>Installing packages needed for your project.<br>Building your project.<br>Testing your project.<br>Benchmarking your project</p></blockquote><p>正如官网所说，直接安装stack的好处是它自带Haskell的编译器GHC和Cabal(a system for building and packaging Haskell libraries and programs)等Heskell运行需要文件(个人觉得stack类似anaconda，环境管理+包管理工具)。但是国内安装不换源的话，搭建之路会很不顺利</p><ol><li><p>使用brew安装stack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew search haskell<br></code></pre></td></tr></table></figure><p>可以看到brew返回了两个结果，一个是Formulae下的haskell-brew，另一个是Cask类型下的<a href="http://haskellformac.com" rel="external nofollow noreferrer">haskell-for-mac</a>，后者是个IDE，使用<code>brew cask install haskell-for-mac</code>下载，但是下载的过程太长，不知道到底是什么样，我们还是按照教程里的方法下载stack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install haskell-stack<br></code></pre></td></tr></table></figure></li><li><p>换源</p><p>这个时候如果按照stack官网的指示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">stack new my-project<br><span class="hljs-built_in">cd</span> my-project<br>stack setup<br>stack build<br>stack <span class="hljs-built_in">exec</span> my-project-exe<br></code></pre></td></tr></table></figure><p>很可能卡在setup步骤</p><p>第一种错误是返回Connection Failure，开全局VPN也没用那种。根据我在stackOverflow查到的信息，主要原因可能是路由器认为该地址是不良链接，拒绝了访问，无脑解决方法是直接手机开热点</p><p>第二种错误是执行stack setup之后一直卡在<code>ghc-8.8.2: dowanload has begun</code>其实就是原本的下载源在国外，所以下载速度起不来，所以我们要换<a href="https://mirrors.tuna.tsinghua.edu.cn/help/stackage/" rel="external nofollow noreferrer">清华的镜像源</a></p><p>要换的源涉及两个文件：<code>~/.cable/config</code> <code>~/.stack/config.yaml</code></p><p>首先换stack(<a href="https://mirrors.tuna.tsinghua.edu.cn/help/stackage/" rel="external nofollow noreferrer">stackage镜像使用帮助</a>)和stack setup(<a href="https://mirrors.tuna.tsinghua.edu.cn/help/hackage/" rel="external nofollow noreferrer">hackage镜像使用帮助</a>)的源，stack版本在2.1.1以上和以下不一样，这里只写2.1.1以上版本：</p><ul><li><p>打开~/.stack/config.yaml，加上：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">setup-info:</span> <span class="hljs-string">"http://mirrors.tuna.tsinghua.edu.cn/stackage/stack-setup.yaml"</span><br><span class="hljs-attr">urls:</span><br>  <span class="hljs-attr">latest-snapshot:</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/stackage/snapshots.json</span><br><span class="hljs-attr">package-indices:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">download-prefix:</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/hackage/</span><br>    <span class="hljs-attr">hackage-security:</span><br>        <span class="hljs-attr">keyids:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">280b10153a522681163658cb49f632cde3f38d768b736ddbc901d99a1a772833</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">2a96b1889dc221c17296fcc2bb34b908ca9734376f0f361660200935916ef201</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">772e9f4c7db33d251d5c6e357199c819e569d130857dc225549b40845ff0890d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">aa315286e6ad281ad61182235533c41e806e5a787e0b6d1e7eef3f09d137d2e9</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0</span><br>        <span class="hljs-attr">key-threshold:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># number of keys required</span><br><br>        <span class="hljs-comment"># ignore expiration date, see https://github.com/commercialhaskell/stack/pull/4614</span><br>        <span class="hljs-attr">ignore-expiry:</span> <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure></li></ul><p>现在换cabal的源</p><ul><li><p>在终端执行<code>cabal update</code>后<code>Ctrl+C</code>停止, 然后进行下一步。报错没关系，这一步的目的是生成<code>~/.cabal/config</code>配置文件</p></li><li><p>打开<code>~/.cabal/config</code> ，加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">repository</span> <span class="hljs-string">mirrors.tuna.tsinghua.edu.cn</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/hackage</span><br></code></pre></td></tr></table></figure><p>为了速度，可以将官方仓库注释掉。实际有朋友反应他的配置文件中本身就没有官方仓库这一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">--</span> <span class="hljs-string">repository</span> <span class="hljs-string">hackage.haskell.org</span><br> <span class="hljs-string">--</span> <span class="hljs-attr">url:</span> <span class="hljs-string">http://hackage.haskell.org/</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>现在可以愉快地按照<a href="https://docs.haskellstack.org/en/stable/README/" rel="external nofollow noreferrer">stack官方安装指导</a> 中的步骤继续了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">   stack new my-project<br>   <span class="hljs-built_in">cd</span> my-project<br>stack setup<br>   stack build<br>stack <span class="hljs-built_in">exec</span> my-project-exe<br></code></pre></td></tr></table></figure></li><li><p>或者像python一样在终端运行.hs文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">runhaskell filename<br><span class="hljs-comment"># 或者</span><br>runhs filename<br></code></pre></td></tr></table></figure></li></ol><h2 id="Hs学习笔记"><a href="#Hs学习笔记" class="headerlink" title="Hs学习笔记"></a>Hs学习笔记</h2><p>&lt;–To be Continued–&gt;</p><blockquote><p><a href="https://www.w3cschool.cn/hsriti/" rel="external nofollow noreferrer">https://www.w3cschool.cn/hsriti/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haskell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理与设计-Lab1-语言认知实验</title>
      <link href="/posts/53125/"/>
      <url>/posts/53125/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>分别使用 C/C++、Java、Python 和 Haskell 实现快速排序和归并排序算法，对采用这几种语言实现的编程效率，程序的规模，程序的运行效率进行对比分析。</p></blockquote><a id="more"></a><h2 id="1-实验目的和内容"><a href="#1-实验目的和内容" class="headerlink" title="1 实验目的和内容"></a>1 实验目的和内容</h2><ul><li><p>实验目的：了解程序设计语言的发展历史，了解不同程序设计语言的各自特点;感受编 译执行和解释执行两种不同的执行方式，初步体验语言对编译器设计的影响，为 后续编译程序的设计和开发奠定良好的基础。</p></li><li><p>实验内容： 分别使用 C/C++、Java、Python 和 Haskell 实现快速排序算法和归并排序，对采用这几种语言实现的编程效率，程序的规模，程序的运行效率进行对比分析。</p></li><li><p>实验说明：实验使用电脑参数如下</p><p><img src="Screenshot2020-02-2217.13.04.png" alt="电脑参数"></p></li></ul><h2 id="2-实验的具体过程和步骤"><a href="#2-实验的具体过程和步骤" class="headerlink" title="2 实验的具体过程和步骤"></a>2 实验的具体过程和步骤</h2><ul><li><p>实验分三组：</p><ul><li>普通情况(50000个范围在1~100000的不重复数)下不同语言的归并排序和快速排序</li><li>最坏情况：<ul><li>小规模组(1000-&gt;1逆序排列) </li><li>大规模组(10000-&gt;1逆序排列)</li></ul></li></ul></li><li><p>快速排序的算法采用三数取最小数的算法，平均时间复杂度 $ O(nlogn) $ ，最坏时间复杂度 $ O(n^2) $</p></li><li><p>归并排序无论最好最坏情况，时间复杂度均为 $ O(nlog_2n) $ </p></li><li><p>不同语言所使用的的算法完全一致，时间函数分别使用各语言提供的库函数</p><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3></li></ul><ol><li>编译器版本及运行环境</li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">   $ gcc --version<br>   Apple clang version 11.0.0 (clang-1100.0.33.17)<br>Target: x86_64-apple-darwin19.3.0<br></code></pre></td></tr></table></figure><ol start="2"><li><p>源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000 <span class="hljs-comment">//50000为实验1规模，10000为实验2-1规模，1000为实验2-2规模</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> O 2 <span class="hljs-comment">//1为装填out.txt中的数据，2为装填逆序数组</span></span><br><br><span class="hljs-comment">//归并函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *num, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> *temp = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>((<span class="hljs-built_in">end</span>-start+<span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">int</span> i = start;<br>    <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= <span class="hljs-built_in">end</span>)&#123;<br>        <span class="hljs-keyword">if</span> (num[i] &lt;= num[j])&#123;<br>            temp[k++] = num[i++];<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            temp[k++] = num[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid)&#123;<br>        temp[k++] = num[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= <span class="hljs-built_in">end</span>)&#123;<br>        temp[k++] = num[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        num[start + i] = temp[i];<br>    &#125;<br>    <span class="hljs-built_in">free</span>(temp);<br>&#125;<br><br><span class="hljs-comment">//归并排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort_UptoDown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *num, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> mid = start + (<span class="hljs-built_in">end</span> - start) / <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">if</span> (start &gt;= <span class="hljs-built_in">end</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    MergeSort_UptoDown(num, start, mid);<br>    MergeSort_UptoDown(num, mid + <span class="hljs-number">1</span>, <span class="hljs-built_in">end</span>);<br>    Merge(num, start, mid, <span class="hljs-built_in">end</span>);<br>&#125;<br><br><span class="hljs-comment">//分解函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> key;<br>    key = arr[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low &lt;high &amp;&amp; arr[high]&gt;= key )<br>            high--;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[low++] = arr[high];<br>        <span class="hljs-keyword">while</span>( low&lt;high &amp;&amp; arr[low]&lt;=key )<br>            low++;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[high--] = arr[low];<br>    &#125;<br>    arr[low] = key;<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> pos;<br>    <span class="hljs-keyword">if</span> (start&lt;<span class="hljs-built_in">end</span>)&#123;<br>        pos = partition(arr, start, <span class="hljs-built_in">end</span>);<br>        quick_sort(arr,start,pos<span class="hljs-number">-1</span>);<br>        quick_sort(arr,pos+<span class="hljs-number">1</span>,<span class="hljs-built_in">end</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//装填函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(O==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        FILE *fp = <span class="hljs-literal">NULL</span>;<br>        fp = fopen(<span class="hljs-string">"/Users/apple/Downloads/out.txt"</span>,<span class="hljs-string">"r"</span>);<br>        <span class="hljs-keyword">char</span> buff[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">"%s"</span>,buff)!=EOF)&#123;<br>        arr[cnt++]=atoi(buff);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>        &#123;<br>            arr[i] = N - i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[N+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-built_in">fill</span>(arr);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">begintime</span>,<span class="hljs-title">endtime</span>;</span><br>    gettimeofday(&amp;begintime, <span class="hljs-literal">NULL</span>);<br>    quick_sort(arr , <span class="hljs-number">0</span> , num<span class="hljs-number">-1</span>);<br>    gettimeofday(&amp;endtime, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size-%d / "</span>, num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Qsort-C Running Time : %ld ms\n"</span>,<span class="hljs-number">1000</span>*(endtime.tv_sec-begintime.tv_sec)+(endtime.tv_usec-begintime.tv_usec)/<span class="hljs-number">1000</span>);<br><br>    num = <span class="hljs-built_in">fill</span>(arr);<br>    gettimeofday(&amp;begintime, <span class="hljs-literal">NULL</span>);<br>    MergeSort_UptoDown(arr , <span class="hljs-number">0</span> , num<span class="hljs-number">-1</span>);<br>    gettimeofday(&amp;endtime, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size-%d / "</span>, num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Mergesort-C Running Time : %ld ms\n"</span>,<span class="hljs-number">1000</span>*(endtime.tv_sec-begintime.tv_sec)+(endtime.tv_usec-begintime.tv_usec)/<span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用gcc编译器生成可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o lab1_c lab1.c<br></code></pre></td></tr></table></figure></li><li><p>在终端运行可执行文件6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/.lab1_c<br></code></pre></td></tr></table></figure></li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ol><li><p>编译器版本及运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">   $ Javac --version<br>   javac 10.0.2<br>   $ java --version<br>   openjdk 10.0.2 2018-07-17<br>   OpenJDK Runtime Environment 18.3 (build 10.0.2+13)<br>OpenJDK 64-Bit Server VM 18.3 (build 10.0.2+13, mixed mode)<br></code></pre></td></tr></table></figure></li><li><p>源代码</p><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lab1</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> O = <span class="hljs-number">2</span>; <span class="hljs-comment">//1为装填out.txt中的数据，2为装填逆序数组</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>; <span class="hljs-comment">//50000为实验1规模，10000为实验2-1规模，1000为实验2-2规模</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (O==<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> cnt =<span class="hljs-number">0</span>;<br>            String pathname = <span class="hljs-string">"/Users/apple/Downloads/out.txt"</span>;<br>            <span class="hljs-keyword">try</span> (FileReader reader = <span class="hljs-keyword">new</span> FileReader(pathname);<br>                BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(reader)<br>            )&#123;<br>                String line;<br>                <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                arr[cnt++]=Integer.parseInt(line);<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123;<br>                arr[i] = N-i;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        print5();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print5</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>        fill(arr);<br>        <span class="hljs-keyword">long</span> t = System.currentTimeMillis();<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        quick_sort(arr,<span class="hljs-number">0</span> , N-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        System.out.println(<span class="hljs-string">"QSort-Size-"</span>+N+<span class="hljs-string">" / Java Running time : "</span>+(System.currentTimeMillis()-t)+<span class="hljs-string">" ms"</span>);<br><br>        fill(arr);<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        t = System.currentTimeMillis();<br>        m_sort(arr,<span class="hljs-number">0</span> , N-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        System.out.println(<span class="hljs-string">"MergeSort-Size-"</span>+N+<span class="hljs-string">" / Java Running time : "</span>+(System.currentTimeMillis()-t)+<span class="hljs-string">" ms"</span>);<br>        <br>    &#125;<br>    <span class="hljs-comment">//分解函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> []arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> key;<br>    key = arr[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low &lt;high &amp;&amp; arr[high]&gt;= key )<br>            high--;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[low++] = arr[high];<br>        <span class="hljs-keyword">while</span>( low&lt;high &amp;&amp; arr[low]&lt;=key )<br>            low++;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[high--] = arr[low];<br>    &#125;<br>    arr[low] = key;<br>    <span class="hljs-keyword">return</span> low;<br>    &#125;<br>    <span class="hljs-comment">//快速排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> pos;<br>        <span class="hljs-keyword">if</span> (start&lt;end)&#123;<br>            pos = partition(arr, start, end);<br>            quick_sort(arr,start,pos-<span class="hljs-number">1</span>);<br>            quick_sort(arr,pos+<span class="hljs-number">1</span>,end);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//归并排序</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] m_sort(<span class="hljs-keyword">int</span>[] a,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)&#123;<br>        <span class="hljs-keyword">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>            m_sort(a,low,mid);<br>            m_sort(a,mid+<span class="hljs-number">1</span>,high);<br>            <span class="hljs-comment">//左右归并</span><br>            merge(a,low,mid,high);<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>     <span class="hljs-comment">//合并函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[high-low+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> i= low;<br>        <span class="hljs-keyword">int</span> j = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 把较小的数先移到新数组中</span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&lt;a[j])&#123;<br>                temp[k++] = a[i++];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                temp[k++] = a[j++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 把左边剩余的数移入数组 </span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid)&#123;<br>            temp[k++] = a[i++];<br>        &#125;<br>        <span class="hljs-comment">// 把右边边剩余的数移入数组</span><br>        <span class="hljs-keyword">while</span>(j&lt;=high)&#123;<br>            temp[k++] = a[j++];<br>        &#125;<br>        <span class="hljs-comment">// 把新数组中的数覆盖nums数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;x&lt;temp.length;x++)&#123;<br>            a[x+low] = temp[x];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用java编译器(javac.exe)编译为字节码文件(.class)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac Lab1.java<br></code></pre></td></tr></table></figure></li><li><p>运行生成的字节码文件6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java Lab1<br></code></pre></td></tr></table></figure></li></ol><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ol><li><p>解释器版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python --version<br>Python 2.7.16<br></code></pre></td></tr></table></figure></li><li><p>源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">100000</span>)<br><br>O = <span class="hljs-number">1</span>  //<span class="hljs-number">1</span>为装填out.txt中的数据，<span class="hljs-number">2</span>为装填逆序数组<br>N = <span class="hljs-number">50000</span>  //<span class="hljs-number">50000</span>为实验<span class="hljs-number">1</span>规模，<span class="hljs-number">10000</span>为实验<span class="hljs-number">2</span><span class="hljs-number">-1</span>规模，<span class="hljs-number">1000</span>为实验<span class="hljs-number">2</span><span class="hljs-number">-2</span>规<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(arr, l, m, r)</span>:</span> <br>    n1 = m - l + <span class="hljs-number">1</span><br>    n2 = r- m <br>    L = [<span class="hljs-number">0</span>] * (n1)<br>    R = [<span class="hljs-number">0</span>] * (n2)<br>  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span> , n1): <br>        L[i] = arr[l + i] <br>  <br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span> , n2): <br>        R[j] = arr[m + <span class="hljs-number">1</span> + j] <br>  <br>    i=<span class="hljs-number">0</span><br>    j=<span class="hljs-number">0</span><br>    k=l<br>  <br>    <span class="hljs-keyword">while</span> i &lt; n1 <span class="hljs-keyword">and</span> j &lt; n2 : <br>        <span class="hljs-keyword">if</span> L[i] &lt;= R[j]: <br>            arr[k] = L[i] <br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>: <br>            arr[k] = R[j] <br>            j += <span class="hljs-number">1</span><br>        k += <span class="hljs-number">1</span><br>  <br>    <span class="hljs-keyword">while</span> i &lt; n1: <br>        arr[k] = L[i] <br>        i += <span class="hljs-number">1</span><br>        k += <span class="hljs-number">1</span><br>  <br>    <span class="hljs-keyword">while</span> j &lt; n2: <br>        arr[k] = R[j] <br>        j += <span class="hljs-number">1</span><br>        k += <span class="hljs-number">1</span><br>  <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(arr,l,r)</span>:</span> <br>    <span class="hljs-keyword">if</span> l &lt; r: <br>  <br>        <br>        m = int((l+(r<span class="hljs-number">-1</span>))/<span class="hljs-number">2</span>)<br>  <br>       <br>        mergeSort(arr, l, m) <br>        mergeSort(arr, m+<span class="hljs-number">1</span>, r) <br>        merge(arr, l, m, r) <br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(arr,low,high)</span>:</span><br>key = arr[low]<br><span class="hljs-keyword">while</span>(low&lt;high):<br><span class="hljs-keyword">while</span> low&lt;high <span class="hljs-keyword">and</span> arr[high] &gt;= key:<br>high-=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> low&lt;high:<br>arr[low] = arr[high]<br>low+=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> low&lt;high <span class="hljs-keyword">and</span> arr[low]&lt;=key:<br>low+=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> low&lt;high:<br>arr[high] = arr[low]<br>high -= <span class="hljs-number">1</span><br>arr[low] = key<br><span class="hljs-keyword">return</span> low<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">q_sort</span><span class="hljs-params">(arr,start,end)</span>:</span><br><span class="hljs-keyword">if</span> start&lt;end:<br>pos = partition(arr,start,end)<br>q_sort(arr,start,pos<span class="hljs-number">-1</span>)<br>q_sort(arr,pos+<span class="hljs-number">1</span>,end)<br><span class="hljs-keyword">return</span> arr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(arr)</span>:</span><br><span class="hljs-keyword">return</span> q_sort(arr,<span class="hljs-number">0</span>,len(arr)<span class="hljs-number">-1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">if</span>(O==<span class="hljs-number">1</span>)<br>      arr=[] <span class="hljs-comment">#直接使用out.txt内数据初始化</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>,N):<br>            arr[i]=N-x;<br>begintime=time.time()<br>quick_sort(arr)<br>endtime = time.time()<br>Running_time = (endtime-begintime)*<span class="hljs-number">1000</span><br>print(<span class="hljs-string">"Qsort-python Running time : %f ms"</span>%Running_time)<br><br>begintime=time.time()<br>mergeSort(arr,<span class="hljs-number">0</span>,len(arr)<span class="hljs-number">-1</span>)<br>endtime = time.time()<br>Running_time = (endtime-begintime)*<span class="hljs-number">1000</span><br>print(<span class="hljs-string">"Msort-python Running time : %f ms"</span>%Running_time)<br><br>arr = [<span class="hljs-number">0</span>]*N<br>do()<br></code></pre></td></tr></table></figure></li><li><p>在终端运行6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab1.py<br></code></pre></td></tr></table></figure></li></ol><h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ol><li><p>解释器版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ runhaskell --version<br>runghc 8.8.2<br></code></pre></td></tr></table></figure></li><li><p>源代码</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> Text.Printf<br><span class="hljs-keyword">import</span> Control.Exception<br><span class="hljs-keyword">import</span> System.CPUTime<br><br><span class="hljs-title">msort</span> :: (<span class="hljs-type">Ord</span> a) =&gt; [a] -&gt; [a]<br><span class="hljs-title">msort</span> [] = []<br><span class="hljs-title">msort</span> [x] = [x]<br><span class="hljs-title">msort</span> xs = merge (msort xs1) (msort xs2)<br>  <span class="hljs-keyword">where</span> k = (length xs) `div` <span class="hljs-number">2</span><br>        xs1 = take k xs<br>        xs2 = drop k xs<br><br>        merge :: (<span class="hljs-type">Ord</span> a) =&gt; [a] -&gt; [a] -&gt; [a]<br>        merge [] b = b <br>        merge a [] = a<br>        merge a@(x:xs) b@(y:ys) | x &gt;= y    = x:(merge xs b)<br>                                | otherwise = y:(merge a ys)<br><br><span class="hljs-title">qsort</span> :: (<span class="hljs-type">Ord</span> a) =&gt; [a] -&gt; [a]<br><span class="hljs-title">qsort</span> [] = []<br><span class="hljs-title">qsort</span> (x:xs) = qsort [i | i &lt;- xs, i &gt;= x]<br>  ++ [x]<br>  ++ qsort [i | i &lt;- xs, i &lt; x]<br><br><span class="hljs-title">main</span>=<span class="hljs-keyword">do</span><br>    start &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> list =msort [] <span class="hljs-comment">--实验1直接填入out.txt中数组，实验2-1为[1..1000]，实验2.2为[1..10000]</span><br>    <span class="hljs-keyword">let</span> a = maximum list<br>    printf <span class="hljs-string">"Size %d "</span>(a::<span class="hljs-type">Int</span>)<br>    end   &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> diff = (fromIntegral (end - start)) / (<span class="hljs-number">10</span>^<span class="hljs-number">9</span>)<br>    printf <span class="hljs-string">"qsort Haskell Running time: %0.3f ms\n"</span> (diff :: <span class="hljs-type">Double</span>)<br><br>    start &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> list =qsort [] <span class="hljs-comment">--实验1直接填入out.txt中数组，实验2-1为[1..1000]，实验2.2为[1..10000]</span><br>    <span class="hljs-keyword">let</span> a = maximum list<br>    printf <span class="hljs-string">"Size %d "</span>(a::<span class="hljs-type">Int</span>)<br>    end   &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> diff = (fromIntegral (start - end)) / (<span class="hljs-number">10</span>^<span class="hljs-number">9</span>)<br>    printf <span class="hljs-string">"msort Haskell Running time: %0.3f ms\n"</span> (diff :: <span class="hljs-type">Double</span>)<br></code></pre></td></tr></table></figure></li><li><p>在终端运行6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">runhaskell lab1.hs<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-运行效果截图"><a href="#3-运行效果截图" class="headerlink" title="3 运行效果截图"></a>3 运行效果截图</h2><h3 id="1-常规组"><a href="#1-常规组" class="headerlink" title="1 常规组"></a>1 常规组</h3><blockquote><p>50000个范围在1~1000000的不重复数</p></blockquote><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><img src="Screenshot2020-02-2616.50.19.png" alt="C" style="zoom:50%;" /><ul><li><p>快速排序平均运行时间：6.00 ms</p></li><li><p>归并排序平均运行时间：13.33 ms</p></li></ul><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><img src="Screenshot2020-02-2616.52.32.png" alt="java" style="zoom: 50%;" /><ul><li><p>快速排序平均运行时间：14.00 ms</p></li><li><p>归并排序平均运行时间：16.33 ms</p></li></ul><h4 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h4><img src="Screenshot2020-02-2616.55.17.png" alt="python" style="zoom:50%;" /><ul><li><p>快速排序平均运行时间：88.26 ms</p></li><li><p>归并排序平均运行时间：244.45  ms</p></li></ul><h4 id="Haskell-1"><a href="#Haskell-1" class="headerlink" title="Haskell"></a>Haskell</h4><blockquote><p>因为笔者失误，此处Size应为50000，msort和qsort对应时间输出交换，即第一行为qsort运行时间，第二行为msort运行时间</p></blockquote><img src="Screenshot2020-02-2616.59.54.png" alt="haskell" style="zoom:50%;" /><ul><li><p>快速排序平均运行时间：504.93 ms</p></li><li><p>归并排序平均运行时间：416.71 ms</p></li></ul><h3 id="2-1-小规模最坏数据"><a href="#2-1-小规模最坏数据" class="headerlink" title="2-1 小规模最坏数据"></a>2-1 小规模最坏数据</h3><blockquote><p>对逆序数组[1000,999,998,997,996,995,…,4,3,2,1]进行升序排列</p></blockquote><h4 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h4><img src="Screenshot2020-02-2617.03.17.png" alt="C" style="zoom:50%;" /><ul><li><p>快速排序平均运行时间：1 ms</p></li><li><p>归并排序平均运行时间：0 ms</p></li></ul><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><img src="Screenshot2020-02-2617.04.00.png" alt="Java" style="zoom:50%;" /><ul><li><p>快速排序平均运行时间：3.5 ms</p></li><li><p>归并排序平均运行时间：0.83 ms</p></li></ul><h4 id="python-2"><a href="#python-2" class="headerlink" title="python"></a>python</h4><img src="Screenshot2020-02-2617.05.24.png" alt="python" style="zoom:50%;" /><ul><li>快速排序平均运行时间：26.24 ms</li><li>归并排序平均运行时间：3.51 ms</li></ul><h4 id="Haskell-2"><a href="#Haskell-2" class="headerlink" title="Haskell"></a>Haskell</h4><blockquote><p>因为笔者失误，msort和qsort对应时间输出交换，即第一行为qsort运行时间，第二行为msort运行时间</p></blockquote><img src="Screenshot2020-02-2617.08.14.png" alt="Haskell" style="zoom:50%;" /><ul><li>快速排序平均运行时间：309.12 ms</li><li>归并排序平均运行时间：3.285 ms</li></ul><h3 id="2-2大规模最坏数据"><a href="#2-2大规模最坏数据" class="headerlink" title="2-2大规模最坏数据"></a>2-2大规模最坏数据</h3><blockquote><p>对逆序排列[10000,9999,9998,9997,9996,9995,…,4,3,2,1]进行升序排列</p><p>因为Haskell较易生成正序列表，所以对于Haskell对正序排列[1,2,3,4…9999,10000]进行降序排列</p></blockquote><h4 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h4><img src="Screenshot2020-02-2617.10.10.png" alt="C" style="zoom:50%;" /><ul><li>快速排序平均运行时间：97.17 ms</li><li>归并排序平均运行时间：1.6 ms</li></ul><h4 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h4><img src="Screenshot2020-02-2616.32.16.png" alt="JAVA" style="zoom:50%;" /><ul><li>快速排序平均运行时间：45.67 ms</li><li>归并排序平均运行时间：4.67 ms</li></ul><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><img src="Screenshot2020-02-2617.13.01.png" alt="Python" style="zoom:50%;" /><ul><li>快速排序平均运行时间：2595.45 ms -&gt; 2.6s</li><li>归并排序平均运行时间：41.71 ms</li></ul><h4 id="Haskell-3"><a href="#Haskell-3" class="headerlink" title="Haskell"></a>Haskell</h4><blockquote><p>因为笔者失误，msort和qsort对应时间输出交换，即第一行实为qsort运行时间，第二行为msort运行时间</p></blockquote><img src="Screenshot2020-02-2617.50.13.png" alt="Haskell" style="zoom:50%;" /><ul><li>快速排序平均运行时间：31378.91 ms -&gt; 31.4s</li><li>归并排序平均运行时间：38.00 ms</li></ul><h2 id="4-语言易用性和程序规模对比分析"><a href="#4-语言易用性和程序规模对比分析" class="headerlink" title="4 语言易用性和程序规模对比分析"></a>4 语言易用性和程序规模对比分析</h2><h3 id="1-语言易用性"><a href="#1-语言易用性" class="headerlink" title="1 语言易用性"></a>1 语言易用性</h3><h4 id="1-学习难度"><a href="#1-学习难度" class="headerlink" title="1 学习难度"></a>1 学习难度</h4><p><strong>Python&lt;=Java&lt;=C&lt;&lt;Haskell</strong></p><table><thead><tr><th>语言</th><th>难度分析</th></tr></thead><tbody><tr><td>C</td><td>C作为大多数人编程的入门语言，先声夺人，字符串处理文件处理数组初始化等等基础操作，大多时候我都更习惯c的写法。链表与指针和内存管理是C的一大难以逾越的障碍</td></tr><tr><td>Java</td><td>Java的语法大致类似C/C++，并且没有C中令人头疼的链表指针和内存操作，有自动内存管理，个人认为学过C再加上对面向对象的理解是非常容易上手Java的</td></tr><tr><td>Python</td><td>Python近年被广泛推崇为儿童编程的入门语言，不一定说明它很简单，但至少说明它入门容易。Python中缩进作为格式化使得程序总体更简洁，但也使得在大项目中它的可维护性降低。Python更适合于小型项目，或者玩具，例如跑一个CNN。</td></tr><tr><td>Haskell</td><td>习惯了命令式语言，面对Haskell这样的纯函数式语言会陷入完全的不知所措。它是一种不同的概念、一种新的语言范式。需要用与我们的习惯所不同的方式开发应用，不同的方式组织应用，不同的方式扩展应用</td></tr></tbody></table><h4 id="2-语言的编程效率"><a href="#2-语言的编程效率" class="headerlink" title="2 语言的编程效率"></a>2 语言的编程效率</h4><p>个人认为编程分为两部分：初始编码+Debug</p><p>对于几种主流语言编程效率的普遍看法认为，python是效率最高的，C次之，Java最为啰嗦繁琐，而函数式编程语言较少用于工程。但我个人的经历里，不同语言在不同项目规模下各有所长。大型项目大多基于Java的相关框架，如果开发一个移动互联应用(上万行)，Java几乎可以说是没有敌手，它的啰嗦和繁琐减小了奇奇怪怪的bug发生的可能性，而在Java下继续前进还有Korlin，Swift等专门为应用开发而设计的语言。C/C++适合于开发小型项目(几千行)，比如小游戏或者解释器，使用C开发能够在某种程度上方便开发者最大程度提升程序的运行效率。至于Python，个人认为Python适合千行以内的代码规模，目前的学习中使用到Python的地方主要是人工智能和知识工程等课程，一个神经网络大致也就一百行代码，Python的相关库Numpy和TensorFlow在神经网络的应用中已经非常成熟。尽管Python在初始编码阶段能优雅简洁的一行代码完成一个复杂的功能，但在debug阶段Python也能让人一个头有两个大。使用Python中稍不注意就会有缩进造成的bug，怎么检查都难以寻觅其踪迹，可想如果代码规模稍大，该有多么头疼。</p><p>至于函数式编程，其思想和命令式编程有很大的不同。有人说，大部分人第一次使用Haskell或Ocaml时都完全的不知所措。在Haskell里，连分号都跟别人不一样。这并不是语法的问题；Haskell和ML语言完全基于一种不同的概念、一种新的语言范式。需要用不同的方式开发应用，不同的方式组织应用，不同的方式扩展应用。所以说它入门门槛高，适用范围不广，但是学界非常喜欢，其在数学逻辑证明上的优势是其他语言望尘莫及的。而非纯函数编程语言，如Lisp，其历史悠久，也曾在相关历史时期居于某些领域(人工智能)的统治地位。</p><p>总而言之，在不同的战场上使用相适合的工具是决定编程效率的关键。而就本次实验中的编程效率来说，仅仅实现一个快排算法，C，Java和Python并无太大差别，有差别也主要是个人对于不同语言熟练性造成的，Haskell的描述函数是什么而不是命令机器怎么做的优势高下立现，程序规模是其他的一半(统计见表4-3)</p><h3 id="3-程序规模"><a href="#3-程序规模" class="headerlink" title="3 程序规模"></a>3 程序规模</h3><p>Python&gt;=C&gt;Java&gt;&gt;Haskell</p><table><thead><tr><th>语言</th><th align="right">快排总代码行数</th><th>实现快排函数行数</th><th align="right">归并排序总代码行数</th><th align="right">实现归并函数行数</th></tr></thead><tbody><tr><td>C</td><td align="right">46</td><td>24</td><td align="right">41</td><td align="right">41</td></tr><tr><td>Java</td><td align="right">37</td><td>25</td><td align="right">38</td><td align="right">38</td></tr><tr><td>Python</td><td align="right">46</td><td>21</td><td align="right">45</td><td align="right">45</td></tr><tr><td>Haskell</td><td align="right">17</td><td>4</td><td align="right">11</td><td align="right">11</td></tr></tbody></table><img src="Screenshot2020-02-2618.35.39.png" alt="表4-3代码规模比较" style="zoom:100%;" /><h2 id="5-程序运行性能对比分析"><a href="#5-程序运行性能对比分析" class="headerlink" title="5 程序运行性能对比分析"></a>5 程序运行性能对比分析</h2><blockquote><p>(统一保留到小数点后一位)</p></blockquote><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><table><thead><tr><th>语言</th><th align="right">常规组平均运行时间$O(nlogn)$</th><th align="right">小规模最坏组平均运行时间$(O(n^2))$</th><th align="right">大规模最坏组平均运行时间$(O(n^2))$</th></tr></thead><tbody><tr><td>C</td><td align="right">6.0 ms</td><td align="right">1.0 ms</td><td align="right">96.0 ms</td></tr><tr><td>Java</td><td align="right">14.0 ms</td><td align="right">2.4 ms</td><td align="right">41.8 ms</td></tr><tr><td>Python</td><td align="right">88.3 ms</td><td align="right">24.5 ms</td><td align="right">2396.9 ms</td></tr><tr><td>Haskell</td><td align="right">504.9 ms</td><td align="right">284.4 ms</td><td align="right">45812.2 ms</td></tr></tbody></table><img src="Screenshot2020-02-2618.51.15.png" alt="qsort" style="zoom:67%;" /><ul><li>在常规组和小规模最坏组的实验中，符合常规的认知，效率上C最优，Java次之；对于解释型语言，Python较快，Haskell非常耗时，尤其是在n为较大值的时间复杂度(O(n^2))下</li><li>在大规模最坏组的实验中，Java比C快了一半。猜测Java在递归过程中编译器进行了优化，因为本实验未涉及几种语言的内存使用测量，故作出此猜测。</li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><table><thead><tr><th>语言</th><th align="right">常规组平均运行时间$O(nlogn)$</th><th align="right">小规模组平均运行时间$O(nlogn)$</th><th align="right">大规模组平均运行时间$O(nlogn)$</th></tr></thead><tbody><tr><td>C</td><td align="right">13.33 ms</td><td align="right">0.3 ms</td><td align="right">1.6 ms</td></tr><tr><td>Java</td><td align="right">16.3 ms</td><td align="right">0.8 ms</td><td align="right">4.7 ms</td></tr><tr><td>Python</td><td align="right">244.5 ms</td><td align="right">3.5 ms</td><td align="right">41.7 ms</td></tr><tr><td>Haskell</td><td align="right">416.7 ms</td><td align="right">3.2 ms</td><td align="right">38.0 ms</td></tr></tbody></table><img src="Screenshot2020-02-2619.32.44.png" alt="msort" style="zoom: 67%;" /><ul><li><p>归并排序是一种稳定排序，对于最好/最坏/平均都有 $ O(nlogn) $ 复杂度，在实验中确实可以得到体现；效率上以上是C最优，Java次之；对于解释性语言，常规组(规模50000)</p></li><li><p>在小规模组(规模1000)和大规模组(规模10000)的实验中，可以看到Haskell比Python有了细微的优势。但在常规组(规模50000)的实验中，python又超过了Haskell。笔者另外增加了规模80000和100000的测试：</p><img src="Screenshot2020-02-2620.20.28.png" alt="80000-py" style="zoom:50%;" /><img src="Screenshot2020-02-2620.19.45.png" alt="80000-hs" style="zoom:50%;" /><ul><li>80000规模python归并排序5次平均运行时间：374.1 ms；</li><li>80000规模haskell归并排序5次平均运行时间：477.3 ms;</li><li>100000规模python归并排序5次平均运行时间：474.1 ms;</li><li>100000规模haskell归并排序5次平均运行时间：588.2 ms;</li></ul><p>可以看出随着数据规模增大，python又较haskell具有了优势。</p></li></ul><h2 id="6-实验心得体会"><a href="#6-实验心得体会" class="headerlink" title="6 实验心得体会"></a>6 实验心得体会</h2><ul><li>我想，大多数人的对编程语言的学习都有一个刚入门时遇到一些困难，然后逐渐轻松，云开日朗，但是之后又遇到一个巨大的瓶颈，有可能是诸如指针这样的概念，也有可能是无关语法的对算法的理解限制住了编程能力的提高。差不多所有学过编程的人都有过遇到困难的经历。我们在学了一些基本知识后，必然会遇到一些公认的概念上的关口，比如指针。很少人能轻松的掌握它们。大多数人，比如我，则需要不断的练习和参考例子来理解什么是指针、为什么它们很重要。</li><li>对于同一种思维方式的语言，如命令式语言，一旦学会几种语言后，所有的语言都开始看起来都很相似，虽然有细微差别，但入门都会相对容易。做移动互联的大作业的时候，Dart、Swift或者Kotlin的语法，它们都存在共通的地方；开发个人博客的时候，利用掌握的html我们也能把Jade、ejs的代码改得更符合我们的需求。Python的人学习Ruby可能不会遇到太多的问题，知道Java的人学习C#会感到很熟悉。不错，也有意外的地方。Ruby爱好者在学习Python时会对它的comprehension感到吃惊，Java用户会对C#里的委托摸不着头脑。还是那句话，如果只瞟一眼，它们都很相似。</li><li>但是第一次使用Haskells时我陷入了不知所措。看官方代码的一头雾水和无论如何都无法让自己的程序正确运行的焦灼不安。这并不是语法的问题；Haskell和ML语言完全基于一种不同的概念、一种新的语言范式。需要用不同的方式开发应用，不同的方式组织应用，不同的方式扩展应用。而我还是习惯性的在haskell中输入<code>let list = quicksort [1..10]</code>这样的命令，期望它运行。很多这样的新概念都具有不可思议的强大力量。Haskell里的Monads是跟指针一样基础且强大的概念。所以，跟学了Java后再学C#不一样，有志向学习函数式语言的人需要往回走的更远，去学习更加基础的概念后才能接下去学习。就像是完全再学习一次</li><li>说说细节上的收获，在进行大规模的实验时，我发现python、Java和Haskell都有对递归深度限制，但是C几乎是完全自由没有任何限制的。在运行速度上，解释执行的Python和Haskell自然无法与编译执行的C和Java比，</li><li>Java虚拟机的启动占用一定的时间，所以在数据规模增后的快排实验中，Java要比C快了一半。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Report </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compilation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS和Shadowsocks配置</title>
      <link href="/posts/9931/"/>
      <url>/posts/9931/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> VPS服务器的创建、Shadowsocks的配置</p><p> 最新文章<a href="www.annewqx.top/post/30155">ss to v2ray</a>中，建议更换ss为v2ray </p></blockquote><a id="more"></a><blockquote><p>参考网址</p><ul><li><a href="https://jerryzou.com/posts/shadowsocks-and-digitalocean/" rel="external nofollow noreferrer">Jerryzhou-shadowsocks的基本安装配置</a></li><li><a href="https://www.itrhx.com/2020/01/10/A61-build-a-SSR-server-with-VPS/" rel="external nofollow noreferrer">itrhs-进阶使用</a></li></ul></blockquote><h2 id="1-注册和创建Droplets"><a href="#1-注册和创建Droplets" class="headerlink" title="1 注册和创建Droplets"></a>1 注册和创建Droplets</h2><blockquote><p>在此跳过VPS的注册和购买过程，目前可以使用的VPS服务商中比较有名的，国外有Vurtlr、Linode、DigitalOcean，国内有阿里云、腾讯云，具体对比见 <a href="https://zhuanlan.zhihu.com/p/33841302?utm_source=wechat_session&utm_medium=social&utm_oi=40447418302464" rel="external nofollow noreferrer">可以免费换的VPS商家盘点</a></p><p>笔者使用的是Digital Ocean，附上优惠码：<a href="https://m.do.co/c/438f7c8cc2dd，当时注册的时候据说送50刀，但当时耽搁了开始使用的时间，隔了一个月没用就过期了" rel="external nofollow noreferrer">https://m.do.co/c/438f7c8cc2dd，当时注册的时候据说送50刀，但当时耽搁了开始使用的时间，隔了一个月没用就过期了</a></p><p>系统是 CentOS 7 x64 - Enable IPV6</p><p>非CentOS7可能导致后续出现python等缺失</p></blockquote><ol><li><p>本地创建SSH key（已有则跳过此步骤）</p><blockquote><p>ssh key是让我们每次登陆的时候无需输入密码，通过本机机器码验证的方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看本地的SSH key</span><br><span class="hljs-built_in">cd</span> ~/.ssh<br>ls *.pub<br><span class="hljs-comment"># 创建新的SSH key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">"email@example.com"</span><br><span class="hljs-comment"># 将key加入用户列表，否则每次都会需要验证电脑登录密码</span><br>ssh-add -k /Users/m/.ssh/id_rsa<br><span class="hljs-comment"># 复制本地公钥</span><br>cat  ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>将公钥添加到DO账号Security中</p></li><li><p>这个时候使用本机公钥即可远程登录服务器，当然不配置也可以使用密码登录的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@IP地址<br></code></pre></td></tr></table></figure><blockquote><p>修改密钥登陆为密码登陆的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑ssh配置文件 </span><br>vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>找到以下字段，并修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">PermitRootLogin</span> <span class="hljs-literal">yes</span>  <span class="hljs-comment"># 允许根用户登录</span><br><span class="hljs-string">PasswordAuthentication</span> <span class="hljs-literal">no</span> <span class="hljs-comment"># 打开密码登录</span><br></code></pre></td></tr></table></figure><p>重启ssh服务<code>service sshd restart</code></p></blockquote></li></ol><h2 id="2-Shadowsocks"><a href="#2-Shadowsocks" class="headerlink" title="2 Shadowsocks"></a>2 Shadowsocks</h2><ol><li><p>CentOS7自带python2.7，所以直接安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install pip<br>pip install shadowsocks<br></code></pre></td></tr></table></figure></li><li><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/shadowsocks.json<br></code></pre></td></tr></table></figure></li><li><p>配置文件内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//普通配置</span><br>&#123;<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-string">"服务器ip地址"</span>,<br>    <span class="hljs-attr">"server_port"</span>:<span class="hljs-number">8388</span>,<br>    <span class="hljs-attr">"local_address"</span>: <span class="hljs-string">"127.0.0.1"</span>,<br>    <span class="hljs-attr">"local_port"</span>:<span class="hljs-number">1080</span>,<br>    <span class="hljs-attr">"password"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>    <span class="hljs-attr">"timeout"</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-attr">"method"</span>:<span class="hljs-string">"aes-256-cfb"</span>,<br>    <span class="hljs-attr">"fast_open"</span>: <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-comment">// 多端口配置</span><br><span class="hljs-comment">// 即把server_port和password两项替换为port_password</span><br>&#123;<br>    <span class="hljs-attr">"server"</span>: <span class="hljs-string">"服务器ip地址"</span>,<br>    <span class="hljs-attr">"server_ipv6"</span>: <span class="hljs-string">"::"</span>,<br>    <span class="hljs-attr">"local_address"</span>: <span class="hljs-string">"127.0.0.1"</span>,<br>    <span class="hljs-attr">"local_port"</span>: <span class="hljs-number">1081</span>,<br>    <span class="hljs-attr">"port_password"</span>:<br>    &#123;<br>        <span class="hljs-attr">"8686"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8687"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8688"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8689"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8690"</span>:<span class="hljs-string">"你设置的密码"</span><br>    &#125;,<br>    <span class="hljs-attr">"timeout"</span>: <span class="hljs-number">120</span>,<br>    <span class="hljs-attr">"udp_timeout"</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-attr">"method"</span>: <span class="hljs-string">"aes-256-cfb"</span>,<br>    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"auth_sha1_v4_compatible"</span>,<br>    <span class="hljs-attr">"protocol_param"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"obfs"</span>: <span class="hljs-string">"http_simple_compatible"</span>,<br>    <span class="hljs-attr">"obfs_param"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"dns_ipv6"</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">"connect_verbose_info"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"redirect"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"fast_open"</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">"workers"</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ssh服务器启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssserver -c /etc/shadowsocks.json<br><span class="hljs-comment"># 或者在后台运行</span><br>ssserver -c /etc/shadowsocks.json -d start<br>ssserver -c /etc/shadowsocks.json -d stop<br><span class="hljs-comment"># 日志</span><br>ssserver -c /etc/shadowsocks.json --<span class="hljs-built_in">log</span>-file /tmp/ss.log -d start<br>tail -f /tmp/ss.log<br></code></pre></td></tr></table></figure><blockquote><p>附加：vim的安装和配置</p><ol><li><p>安装vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install vim<br></code></pre></td></tr></table></figure></li><li><p>配置vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.vimrc<br></code></pre></td></tr></table></figure></li><li><p>vim配置文件参考</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">" Configuration file for vim<br>set modelines=0"</span> CVE-2007-2438<br><br><span class="hljs-string">" Normally we use vim-extensions. If you want true vi-compatibility<br>"</span> remove change the following statements<br><span class="hljs-built_in">set</span> nocompatible<span class="hljs-string">" Use Vim defaults instead of 100% vi compatibility<br>set backspace=2"</span> more powerful backspacing<br><br><span class="hljs-string">" Don't write backup file if vim is being called by "</span>crontab -e<span class="hljs-string">"<br>au BufWrite /private/tmp/crontab.* set nowritebackup nobackup<br>"</span> Don<span class="hljs-string">'t write backup file if vim is being called by "chpass"<br>au BufWrite /private/etc/pw.* set nowritebackup nobackup<br><br>let skip_defaults_vim=0<br><br>syntax on<br><br>autocmd InsertLeave * se nocul<br>autocmd InsertEnter * se cul<br><br>set tabstop=4<br><br>set softtabstop=4<br>set shiftwidth=4<br><br>set number<br><br>colorscheme pablo<br><br>set ruler<br>set scrolloff=3<br><br>set rtp+=/usr/local/opt/fzf</span><br></code></pre></td></tr></table></figure></li></ol></blockquote></li></ol><h2 id="3-速度升级和安全性"><a href="#3-速度升级和安全性" class="headerlink" title="3 速度升级和安全性"></a>3 速度升级和安全性</h2><ul><li><p>配置防火墙（可能导致后续安装锐速服务后出现模块冲突，建议最后再打开防火墙）</p><ol><li><pre><code class="bash">yum install firewalld<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>2. 配置防火墙文件：<br><br>   &#96;&#96;&#96;bash<br>   vi &#x2F;etc&#x2F;firewalld&#x2F;zones&#x2F;public.xml<br></code></pre></td></tr></table></figure> 一个端口对应两个<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">zone</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">short</span>&gt;</span>Public<span class="hljs-tag">&lt;/<span class="hljs-name">short</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dhcpv6-client"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ssh"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8686"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8686"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8687"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8687"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8688"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8688"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8689"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8689"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8690"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8690"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8691"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8691"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zone</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>重启shadowsocks，重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重启防火墙</span><br>systemctl restart firewalld.service<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_27751535/article/details/89633138" rel="external nofollow noreferrer">firewalld的基本使用</a></p><ul><li>启动： <code>systemctl start firewalld</code></li><li>关闭： systemctl stop firewalld</li><li>查看状态： <code>systemctl status firewalld</code></li><li>开机禁用 ：<code>systemctl disable firewalld</code></li><li>开机启用 ：<code>systemctl enable firewalld</code></li><li>查看开放的端口：<code>firewall-cmd --list-ports</code></li><li>添加端口：<code>firewall-cmd --zone=public --add-port=59008/tcp --permanent</code>（–permanent永久生效，没有此参数重启后失效)</li></ul><p>查看所有被占用的端口 <code>netstat -tunlp</code></p></blockquote></li></ol></li><li><p>下载锐速服务（建议直接使用下一条四合一脚本）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  对于centOS7 需要先下载需要的固件20140911</span><br>  rpm -ivh ftp://ftp.pbone.net/mirror/ftp.scientificlinux.org/linux/scientific/7.0/x86_64/updates/security/linux-firmware-20140911-0.1.git365e80c.el7.noarch.rpm<br><span class="hljs-comment"># 更换内核</span><br>wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/hombo125/doubi/master/rskernel.sh &amp;&amp; bash rskernel.sh<br><span class="hljs-comment"># 内核更换完后显示Success后需要重新连接到服务器</span><br>ssh root@IP地址<br><span class="hljs-comment"># 查看当前内核版本</span><br>uname -r<br><span class="hljs-comment"># 下载锐速，一路回车安装</span><br>yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install<br></code></pre></td></tr></table></figure></li><li><p><a href="https://www.hostloc.com/thread-508015-1-1.html" rel="external nofollow noreferrer"><strong>bbr 原版/魔改/plus+锐速 四合一脚本</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载脚本</span><br>wget <span class="hljs-string">"https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh"</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh<br><span class="hljs-comment"># 如果证书错误的话</span><br>apt-get -y install ca-certificates<br>yum -y install ca-certificates<br><span class="hljs-comment"># 1-3中选择切换内核，自动重启，如果出现是否删除Configuring image,选择no</span><br><span class="hljs-comment"># 调用脚本</span><br>./tcp.sh<br><span class="hljs-comment"># 在4-8中选择要开的加速</span><br>   <span class="hljs-string">"1. 安装 BBR/BBR魔改版内核"</span>        对应4,5,6（原版，魔改，暴力魔改）<br>   <span class="hljs-string">"2. 安装 BBRplus版内核 "</span>                对应7（plus）<br>   <span class="hljs-string">"3. 安装 Lotserver(锐速)内核"</span>        对应8（锐速）<br></code></pre></td></tr></table></figure></li><li><p><a href="https://www.oldking.net/tag/speedtest/" rel="external nofollow noreferrer">服务器测速 speedtest</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 断链接</span><br>wget -qO- git.io/superbench.sh | bash<br><span class="hljs-comment"># 使用参数</span><br>wget -qO- git.io/superbench.sh | bash -s info<br>wget -qO- git.io/superbench.sh | bash -s io<br>wget -qO- git.io/superbench.sh | bash -s speed<br>wget -qO- git.io/superbench.sh | bash -s fast<br>wget -qO- git.io/superbench.sh | bash -s share<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac快捷键和常用命令行</title>
      <link href="/posts/8410/"/>
      <url>/posts/8410/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>mac常用命令行，快捷键。以及其他系统软件的使用技巧</p></blockquote><a id="more"></a><h2 id="命令行和快捷键"><a href="#命令行和快捷键" class="headerlink" title="命令行和快捷键"></a>命令行和快捷键</h2><h3 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h3><ul><li>显示隐藏文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.apple.Finder AppleShowAllFiles YES<br>KillAll Finder<br></code></pre></td></tr></table></figure><ul><li>不显示隐藏文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.apple.Finder AppleShowAllFiles NO<br>KillAll Finder<br></code></pre></td></tr></table></figure><ul><li>快捷键方式：<code>command+shift+.</code></li></ul><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><ul><li>修改截图默认文件名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">defaults write com.apple.screencapture name &quot;Screenshot&quot;<br>killall SystemUIServer<br></code></pre></td></tr></table></figure><ul><li>更换默认截图路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">defaults write com.apple.screencapture location ~&#x2F;Desktop&#x2F;屏幕截图<br>killall SystemUIServer<br></code></pre></td></tr></table></figure><ul><li>去掉窗口截图的阴影</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">defaults write com.apple.screencapture disable-shadow -bool true<br>killall SystemUIServer<br></code></pre></td></tr></table></figure><h3 id="ssh免验证"><a href="#ssh免验证" class="headerlink" title="ssh免验证"></a>ssh免验证</h3><ul><li>有的时候配置了ssh服务，比如VPS远端登录，比如github账号，但是每次使用都会出现<code>Enter passphrase for key &#39;/Users/apple/.ssh/id_rsa&#39;</code>要求输入本地根用户密码—-这和密码登录有什么区别! 原因就是虽然在本地生成了ssh-key，但是没有把key添加到本地用户列表里。使用以下命令即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add -k /Users/apple/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p><code>control+command+space</code></p><h2 id="Automator相关"><a href="#Automator相关" class="headerlink" title="Automator相关"></a>Automator相关</h2><h3 id="批量将word-ppt转换为pdf"><a href="#批量将word-ppt转换为pdf" class="headerlink" title="批量将word/ppt转换为pdf"></a>批量将word/ppt转换为pdf</h3><h3 id="删除重复文件"><a href="#删除重复文件" class="headerlink" title="删除重复文件"></a>删除重复文件</h3><h3 id="批量压缩图片"><a href="#批量压缩图片" class="headerlink" title="批量压缩图片"></a>批量压缩图片</h3><blockquote><p>事实上，不建议使用automator的批量压缩图片，因为不容易控制图片的像素。ps的录制存储图片为web所用格式的动作后批处理文件比较省心</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown进阶使用技巧</title>
      <link href="/posts/64578/"/>
      <url>/posts/64578/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>markdown中的mermaid作图, html结合等进阶使用的handbook</p></blockquote><a id="more"></a><h2 id="link_in_page">页内跳转</h2><p><span id = "jumptoexample"> 两种方法究其根本都是md中html语法的应用</span></p><h3 id="link_in_page.1">1.生成目录方法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">* </span>[<span class="hljs-string">页内跳转</span>](<span class="hljs-link">#link_in_page</span>)<br><span class="hljs-bullet">  * </span>[<span class="hljs-string">1生成目录的方法</span>](<span class="hljs-link">#link_in_page.1</span>)<br><span class="hljs-bullet">  * </span>[<span class="hljs-string">2html标签实现</span>](<span class="hljs-link">#link_in_page.2</span>)<br></code></pre></td></tr></table></figure><p>生成效果:</p><ul><li><a href="#link_in_page">页内跳转</a><ul><li><a href="#link_in_page.1">1.生成目录的方法</a></li><li><a href="#link_in_page.2">2.html标签实现</a></li></ul></li></ul><p>在正文中对应的地方, 加入章节标题对应id</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'link_in_page'</span>&gt;</span></span>页内跳转<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="link_in_page.2">2.html标签实现</h3><p>定义一个锚在跳转的目的地    <code>&lt;span id = &quot;jumptoexample&quot;&gt;页内跳转&lt;/span&gt;</code> </p><p>在要需要跳转的地方使用md语法的超链接 <code>[ 点击跳转 ](#jumptoexample)</code></p><p><a href="#jumptoexample"> 点击跳转 </a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda的环境管理</title>
      <link href="/posts/52525/"/>
      <url>/posts/52525/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>常用的Conda命令</p></blockquote><a id="more"></a><h1 id="Conda的环境管理"><a href="#Conda的环境管理" class="headerlink" title="Conda的环境管理"></a>Conda的环境管理</h1><p>Conda的环境管理功能允许我们同时安装若干不同版本的Python，并能自由切换。对于上述安装过程，假设我们采用的是Python 2.7对应的安装包，那么Python 2.7就是默认的环境（默认名字是root注意这个root不是超级管理员的意思）。<br>假设我们需要安装Python 3.4，此时，我们需要做的操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）</span><br>conda create —name python34 python=3.4<br><br><span class="hljs-comment"># 安装好后，使用activate激活某个环境</span><br>activate python34 <span class="hljs-comment"># for Windows</span><br><span class="hljs-built_in">source</span> activate python34 <span class="hljs-comment"># for Linux &amp; Mac</span><br><span class="hljs-comment"># 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH</span><br><br><span class="hljs-comment"># 此时，再次输入</span><br>python —version<br><span class="hljs-comment"># 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境</span><br><br><span class="hljs-comment"># 如果想返回默认的python 2.7环境，运行</span><br>deactivate python34 <span class="hljs-comment"># for Windows</span><br><span class="hljs-built_in">source</span> deactivate python34 <span class="hljs-comment"># for Linux </span><br>conda deactivate python34 <span class="hljs-comment"># for mac</span><br><br><span class="hljs-comment"># 删除一个已有的环境</span><br>conda remove —name python34 —all<br></code></pre></td></tr></table></figure><blockquote><p>用户安装的不同python环境都会被放在目录~/anaconda/envs<br>下，可以在命令中运行<br>conda info -e<br>查看已安装的环境，当前被激活的环境会显示有一个星号或者括号。<br>说明：有些用户可能经常使用python 3.4环境，因此直接把<br>~/anaconda/envs/python34<br>下面的bin或者Scripts加入PATH，去除anaconda对应的那个bin目录。这个办法，怎么说呢，也是可以的，但总觉得不是那么elegant……<br>如果直接按上面说的这么改PATH，你会发现conda命令又找不到了（当然找不到啦，因为conda在<br>~/anaconda/bin<br>里呢），这时候怎么办呢？方法有二：1. 显式地给出conda的绝对地址 2. 在python34环境中也安装conda工具（推荐）。</p></blockquote><h1 id="Conda的包管理"><a href="#Conda的包管理" class="headerlink" title="Conda的包管理"></a>Conda的包管理</h1><blockquote><p>Conda的包管理就比较好理解了，这部分功能与<br>pip<br>类似。<br>例如，如果需要安装scipy：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装scipy</span><br>conda install scipy<br><span class="hljs-comment"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class="hljs-comment"># 查看已经安装的packages</span><br>conda list<br><span class="hljs-comment"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class="hljs-comment"># 安装scipy</span><br>conda install scipy<br><span class="hljs-comment"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class="hljs-comment"># 查看已经安装的packages</span><br>conda list<br><span class="hljs-comment"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class="hljs-comment">### conda的一些常用操作如下：</span><br><span class="hljs-comment"># 查看当前环境下已安装的包</span><br>conda list<br><span class="hljs-comment"># 查看某个指定环境的已安装包</span><br>conda list -n python34<br><span class="hljs-comment"># 查找package信息</span><br>conda search numpy<br><span class="hljs-comment"># 安装package</span><br>conda install -n python34 numpy<br><span class="hljs-comment"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class="hljs-comment"># 也可以通过-c指定通过某个channel安装</span><br><span class="hljs-comment"># 更新package</span><br>conda update -n python34 numpy<br><span class="hljs-comment"># 删除package</span><br>conda remove -n python34 numpy<br><span class="hljs-comment"># 查看当前环境下已安装的包</span><br>conda list<br><span class="hljs-comment"># 查看某个指定环境的已安装包</span><br>conda list -n python34<br><span class="hljs-comment"># 查找package信息</span><br>conda search numpy<br><span class="hljs-comment"># 安装package</span><br>conda install -n python34 numpy<br><span class="hljs-comment"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class="hljs-comment"># 也可以通过-c指定通过某个channel安装</span><br><span class="hljs-comment"># 更新package</span><br>conda update -n python34 numpy<br><span class="hljs-comment"># 删除package</span><br>conda remove -n python34 numpy<br><span class="hljs-comment">### 前面已经提到，conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如</span><br><span class="hljs-comment"># 更新conda，保持conda最新</span><br>conda update conda<br><span class="hljs-comment"># 更新anaconda</span><br>conda update anaconda<br><span class="hljs-comment"># 更新python</span><br>conda update python<br><span class="hljs-comment"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</span><br><span class="hljs-comment">### 补充：如果创建新的python环境，比如3.4，运行</span><br><span class="hljs-comment">### conda create -n python34 python=3.4</span><br><span class="hljs-comment">### 之后，conda仅安装python 3.4相关的必须项，如python, pip等，如果希望该环境像默认环境那样，安装anaconda集合包，只需要：</span><br><span class="hljs-comment"># 在当前环境下安装anaconda包集合</span><br>conda install anaconda<br><span class="hljs-comment"># 结合创建环境的命令，以上操作可以合并为</span><br>conda create -n python34 python=3.4 anaconda<br><span class="hljs-comment"># 也可以不用全部安装，根据需求安装自己需要的package即可</span><br><span class="hljs-comment"># 在当前环境下安装anaconda包集合</span><br>conda install anaconda<br><span class="hljs-comment"># 结合创建环境的命令，以上操作可以合并为</span><br>conda create -n python34 python=3.4 anaconda<br><span class="hljs-comment"># 也可以不用全部安装，根据需求安装自己需要的package即可</span><br><span class="hljs-comment"># 设置国内镜像</span><br><span class="hljs-comment">### 如果需要安装很多packages，你会发现conda下载的速度经常很慢，因为Anaconda.org的服务器在国外。所幸的是，清华TUNA镜像源有Anaconda仓库的镜像，我们将其加入conda的配置即可：</span><br><span class="hljs-comment"># 添加Anaconda的TUNA镜像</span><br>conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br><span class="hljs-comment"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class="hljs-comment"># 设置搜索时显示通道地址</span><br>conda config —<span class="hljs-built_in">set</span> show_channel_urls yes<br><span class="hljs-comment"># 添加Anaconda的TUNA镜像</span><br>conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br><span class="hljs-comment"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class="hljs-comment"># 设置搜索时显示通道地址</span><br>conda config —<span class="hljs-built_in">set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure><blockquote><p>执行完上述命令后，会生成<br>~/.condarc<br>(Linux/Mac)或<br>C:UsersUSER_NAME.condarc<br>文件，记录着我们对conda的配置，直接手动创建、编辑该文件是相同的效果。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端的基本命令</title>
      <link href="/posts/55266/"/>
      <url>/posts/55266/</url>
      
        <content type="html"><![CDATA[<p>Linux终端入门手册</p><a id="more"></a><blockquote><ul><li><p>shell 提示符<br><code>username@hostname:direction$</code></p></li><li><p>shell命令格式<br><code>command [option] [arguments]</code></p><blockquote><p>按一次tab补全文件名<br>按两次tab补全命令<br>单击右键粘贴</p></blockquote></li></ul></blockquote><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><p>帮助命令</p><ul><li>man 查看man手册</li><li>info 查看info手册</li><li>—help </li></ul></li><li><p>目录</p><ul><li>根目录 /</li><li>.代表目录自己 ..代表目录的父目录，对于根目录.和..都代表自己</li><li>pwd 查询当前目录路径</li><li>～ 引用当前用户的主目录</li><li>绝对路径<code>/home/hxy/hello.txt</code></li><li>相对路径<code>./hello.txt</code></li></ul></li><li><p>文件与目录相关命令</p><ul><li><p>ls 显示目录内容</p><ul><li>ls -la 列出所有文件，包括隐含文件</li><li>ls -dl 仅查看目录属性</li><li>ls -R 递归显示子目录的文件</li><li>ls 文件名/文件夹名 查看文件信息</li><li>ls -l 详细结果<blockquote><p>详细结果：<code>drwx------ 14 student student 409611...</code><br>第一个字符表示文件类型：-普通文件 d目录 l符号链接 b块设备文件 c字符设备文件<br>后面9个字符表示文件的访问权限：</p><ul><li>第一组表示文件属主的权限</li><li>第二组表示同组用户的权限</li><li>第三组表示其他用户的权限<br>各权限如下</li><li>r 读</li><li>w 写</li><li>x 执行，对于目录表示进入</li></ul></blockquote></li></ul></li><li><p>cd 切换工作目录</p><ul><li>cd .. 进入上一级目录</li><li>cd ~ 或 cd 进入用户主目录</li></ul></li><li><p>mv [options] 源文件/文件夹 目标文件/文件夹</p></li><li><p>cp 复制文件或目录</p><ul><li>cp -a 拷贝目录，保留一切链接和属性</li><li>cp -f 覆盖已经存在的目标文件而不提示</li><li>cp -R 递归复制目录下的所有字目录和文件</li></ul></li><li><p>mkdir 创建一个目录</p><ul><li>mkdir -m 对新建目录设置存取权限（chmod）</li><li>mkdir -p 自动补全不存在的上级目录</li></ul></li><li><p>rmdir 删除空目录</p><ul><li>rmdir -p 递归删除目录</li></ul></li><li><p>rm 删除</p><ul><li>rm -r 递归删除（等同rmdir）</li><li>rm -i 删除一个文件</li><li>rm -f 不询问，直接删除</li></ul></li><li><p>file 确定文件类型</p></li><li><p>cat 链接或显示文件内容</p><ul><li>带行数 cat -n 等价于nl</li></ul></li><li><p>tac  从最后一行开始显示文件内容</p></li><li><p>more/less</p></li><li><p>head/tail</p></li><li><p>touch 新建文件</p></li><li><p>nl 按输出行号的方式显示文件</p></li><li><p>ln 为一个文件在另一个位置建立符号链接</p><ul><li><code>ln -s 目标 目录</code> 软连接，<a href="">一个指向源文件名的连接文件</a>，类似快捷方式</li><li><code>ln 目标 目录</code> 硬连接 类似指针</li></ul></li></ul></li><li><p>字符</p><ul><li>grep 定位字符信息</li><li>wc 统计字符信息</li><li>sort 排序字符信息</li></ul></li><li><p>打包/压缩文件</p><ul><li>打包：把所有文件合并在一个tar文件里</li><li>压缩 使用gzip(tar.gz/tgz)或biz2(tar.bz2)压缩<br><em>.gz比较快，压缩率不如bz2</em></li><li>-c 创建tar文件 -f将文件打包生成到一个文件</li><li><code>tar -cf new.tar ./home/se</code></li><li><code>tar -xf new.tar</code> 解包</li><li>对于zip格式：tar cvzf 打包 tar xvzf解包</li><li>对于biz2格式： tar cvjf 打包 tar xvjf解包</li></ul></li></ul><h2 id="用户管理及网络设置"><a href="#用户管理及网络设置" class="headerlink" title="用户管理及网络设置"></a>用户管理及网络设置</h2><h2 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h2><p><strong>gcc支持的源码格式：</strong>.c .cpp .m（Objective-C源程序） .i（预处理后的c文件） .ii（预处理后的c++文件） .s/.S（汇编语言源程序） .h（预处理器文件） .o（目标文件）</p><h3 id="gcc的基本使用"><a href="#gcc的基本使用" class="headerlink" title="gcc的基本使用"></a>gcc的基本使用</h3><h4 id="单个源码"><a href="#单个源码" class="headerlink" title="单个源码"></a>单个源码</h4><ul><li><p><code>gcc hello.c -o hello</code> 把hello.c编译成一个可执行程序hello（一次性完成四步）</p></li><li><p><code>gcc hello.c</code>不指定输出名，生成一个a.out</p></li><li><p>源文件到可执行文件的编译过程：</p><ul><li><p>预处理 <code>gcc -E hello.c -o hello.i</code></p></li><li><p>编译：将源代码编译成汇编代码 <code>gcc -S hello.i -o hello.s</code></p></li><li><p>汇编：将汇编代码汇编成目标文件 <code>gcc -c hello.s -o hello.o</code></p></li><li><p>链接：将目标代码和所需要库链成一个完整的应用程序 <code>gcc hello.o -o hello</code></p><blockquote><p>gcc的结果输出于后缀名，只和输出参数有关</p></blockquote></li></ul></li></ul><h4 id="多个源码"><a href="#多个源码" class="headerlink" title="多个源码"></a>多个源码</h4><ul><li>一般先将源代码编译成目标代码，最后一次链接成可执行程序</li><li>对于有头文件在多个目录，需要在编译时多次使用-I参数加入头文件所在目录<br>例如a.c需要用到/usr，当前目录/home<br><code>gcc -I -I/usr -I/home -c a.c</code></li><li>对于多个源文件组成的程序。可以把多个文件在一句里编译，但建议不这样做，建议使用makefile脚本来调用gcc构造，见下一节<br><code>gcc a.c b.c d.c -o test</code></li></ul><h4 id="gcc的选项"><a href="#gcc的选项" class="headerlink" title="gcc的选项"></a>gcc的选项</h4><ul><li>宏macro<ul><li>-Dmacro <code>gcc test.c -DPRINTF=printf -o test</code></li><li>-Dmacro=defn <code>gcc test.c -DNUM=10 -o test</code></li></ul></li><li><code>gcc -Wall a.c -o a</code>打开所有编译警告</li><li><code>gcc -Wall -Werror a.c -o a</code>将警告视作错误，出现任何警告就放弃编译</li><li><code>gcc -w</code>禁止输出警告</li></ul><h4 id="gcc使用的第三方库"><a href="#gcc使用的第三方库" class="headerlink" title="gcc使用的第三方库"></a>gcc使用的第三方库</h4><h3 id="gcc命令的参数详解"><a href="#gcc命令的参数详解" class="headerlink" title="gcc命令的参数详解"></a><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html" rel="external nofollow noreferrer">gcc命令的参数详解</a></h3><ul><li><p>-x：设定文件名所使用的语言，使文件后缀名无效</p><p><code>gcc -x c hello.pig</code></p></li><li><p>-c：只进行预处理,编译和汇编，即生成.o的obj文件</p><p><code>gcc -c hello.c</code></p></li><li><p>-S：只进行预处理和编译，即把文件编译为.s汇编代码</p><p><code>gcc -S hello.c</code></p></li><li><p>-E：只激活预处理。这个命令不会不生成文件, 我们需要把它重定向到一个输出文件里面</p><p><code>gcc -E hello.c &gt; pianoapan.txt</code></p></li><li><p>-o：生成可执行文件</p><p><code>gcc -o hello hello.c</code></p></li><li><p>-fno-asm</p></li><li><p>-fno-strict-prototype</p></li><li><p>-fthis-is-varialble</p></li><li><p>-fcond-mismatch</p></li><li><p>-funsigned-char 、-fno-signed-char、-fsigned-char 、-fno-unsigned-char</p></li><li><p>-include file</p></li><li><p>-imacros file</p></li><li><p>b</p></li></ul><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><h4 id="make的调用"><a href="#make的调用" class="headerlink" title="make的调用"></a>make的调用</h4><ul><li><p>直接执行make，自动查找当前目录下名为makefile的文件，并自动从第一个target开始执行</p></li><li><p>如果makefile脚本名称不是缺省名称，使用-f参数来表示<br><code>make -f hello.mk</code></p></li><li><p>如果需要make查找其他目录下的makefile，使用-C参数<br><code>make -C /home</code></p></li><li><p>在makefile中以target表示不同的编译部分，可以在命令行直接写target名称，用于一个活多个target的编译<br><code>make install</code><br><code>make target1 target2</code></p></li></ul><blockquote><h4 id="makefile的格式"><a href="#makefile的格式" class="headerlink" title="makefile的格式"></a>makefile的格式</h4><p>makefile由由一组依赖关系和规则构成</p><p>每个依赖关系由一个目标（即将要创建的文件）和它依赖的源文件组成</p><p>规则描述了怎样从源文件创建出目标文件</p><p><strong>规则也称为target</strong></p><ul><li><p>规则 <code>目标名称：[依赖对象]&lt;tab&gt;命令列表</code></p><ul><li>目标名称是需要创建的结果的名称</li><li>依赖对象表示创建这个目标之前必须预先创建的其他目标，可以是另一个规则的名称，也可以是基本文件的名称</li><li>命令列表表示为了创建这个目标，需要执行那些shell命令可以是一行或多行shell命令，每一行命令行的行首必须是一个tab</li><li>行首必须是tab不能是空格，否则makefile出错</li><li>如果命令行过长，可用\分行，新行无需tab打头<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 要想生成hello.o目标，必须先有hello.c，然后调用gcc编译生成hello.o，依赖对象hello.c可以省略</span><br><span class="hljs-section">hello.o: hello.c</span><br>gcc -c hello.c -o hello.o<br><span class="hljs-comment"># 要想生成执行程序hello，必须先执行规则hello.o，然后调用命令行gcc连接生成hello</span><br><span class="hljs-section">hello: hello.o</span><br>gcc hello.o -o hello<br></code></pre></td></tr></table></figure></li></ul></li><li><p>makefile里规则的前后顺序不太重要，实际调用顺序取决目标之间的依赖关系，因此make采用逆推的方式来判断和执行目标*</p></li><li><p>伪目标phony target：一般的目标最终是为了生成一个文件，但有一些目标可以不生成结果文件，只是为了调用命令或依赖对象，具体动作需要需要开发者自行编写</p><ul><li>all 编译所有目标</li><li>clean 清楚项目生成的中间文件和最终生成文件</li><li>install 项目如何安装</li><li>uninstall 项目如何卸载</li></ul></li></ul></blockquote><h4 id="makefile基本结构"><a href="#makefile基本结构" class="headerlink" title="makefile基本结构"></a>makefile基本结构</h4><p>makefile一般包含：</p><ul><li>需要由make工具创建的项目，通常是目标文件和可执行文件，它们一般被称为target</li><li>要创建的目标依赖于哪些文件</li><li>创建每个目标时需要运行的的命令，命令之间用tab打头</li><li>通常包含的固定伪目标</li><li>#表示注释行<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#Makefile for exp2</span><br><span class="hljs-section">main: main.o add.o del.o modify.o</span><br>gcc -o main main.o add.o del.o modify.o<br><span class="hljs-section">main.o: main.c</span><br>gcc -c main.c<br><span class="hljs-section">add.o: add.c</span><br>gcc -c add.c<br><span class="hljs-section">del.o: del.c</span><br>gcc -c del.c<br><span class="hljs-section">modify.o: modify.c</span><br>gcc -c modify.c<br></code></pre></td></tr></table></figure></li></ul><h4 id="makefile扩展用法"><a href="#makefile扩展用法" class="headerlink" title="makefile扩展用法"></a>makefile扩展用法</h4><ul><li>变量（宏）：利用简单的变量定义冗长的编译选项，引用时需要添加$符号<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># Define macros for name of compiler </span><br>CC = gcc<br><span class="hljs-comment"># Define a macro for the CC flags </span><br>CCFLAGS = -D_DEBUG -g -m486<br><span class="hljs-comment"># A rule for building a object file </span><br><span class="hljs-section">test.o: test.c test.h</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$(CCFLAGS)</span> test.c<br></code></pre></td></tr></table></figure><blockquote><p>makefile变量定义，=两边一定要有空格</p><p>makefile的变量定义要独立在规则之外，一般在最前</p></blockquote></li><li>GNU make的预定义变量<ul><li>$&lt; 第一个依赖文件的名称</li><li>$@ 目标的完整名称</li><li>$^ 所有的依赖文件，以空格分开，不包含重复的</li><li>AR 归档维护程序的名称，默认值ar ARFLAGS 归档维护程序的选项</li><li>AS 汇编程序的名称，默认值as ASGLAGS 汇编程序的选项</li><li>CC c编译器的名称，默认值cc CCFLAGS c编译器的选项 <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#makefile2 for exp</span><br><span class="hljs-section">main: main.o add.o del.o modify.o</span><br>gcc -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><span class="hljs-section">main.o: main.c</span><br>gcc -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">add.o: add.c</span><br>gcc -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">del.o: del.c</span><br>gcc -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">modify.o: modify.c</span><br>gcc -c <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li>自动化变量使用<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#makefile2 for exp</span><br><span class="hljs-section">main: main.o add.o del.o modify.o</span><br>gcc -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><span class="hljs-section">.c.0:</span><br>gcc -c <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h4><p>GNU make的一些内置的隐含规则定义了如何从不同依赖文件建立特定类型的目标文件</p><ul><li>后缀规则suffix rule<br>将一个具有某个后缀的文件转换为具有另一后缀的文件<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">.c.0:</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CCFLAGS)</span> -c -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li><li>模式规则pattern rules<br>在目标的前面多一个%，同时可用来定义目标和依赖文件之间的关系<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">%.o:%.c:</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CCFLAGS)</span> -c -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="makefile目标编译"><a href="#makefile目标编译" class="headerlink" title="makefile目标编译"></a>makefile目标编译</h4><p>如果不指定目标，make会默认第一个target<br>规范的makefile文件有以下常见的几个目标：</p><ul><li>make all 编译所有目标</li><li>make clean 在编译结束后删除.o文件</li><li>make install 编译结束后将最终的可执行文件安装到系统的某一个位置<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#makefile for example</span><br><span class="hljs-section">example: example.o add.o modify.o delete.o</span><br><span class="hljs-variable">$(CC)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><span class="hljs-section">.c.o:</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">all: example</span><br><span class="hljs-section">clean: all</span><br>rm -f *.o<br><span class="hljs-section">install: clean</span><br>cp example /usr/local/bin<br></code></pre></td></tr></table></figure></li></ul><h2 id="GDB调试器和调试方法"><a href="#GDB调试器和调试方法" class="headerlink" title="GDB调试器和调试方法"></a>GDB调试器和调试方法</h2><h4 id="gdb的使用"><a href="#gdb的使用" class="headerlink" title="gdb的使用"></a>gdb的使用</h4><p>为使程序能被调试，需要gcc编译时用-g选项为程序编译时添加调试信息<br><code>gcc -g -o helloworld helloworld.c</code><br>然后在命令行键入gdb并回车就可以运行了</p><h4 id="gdb命令"><a href="#gdb命令" class="headerlink" title="gdb命令"></a>gdb命令</h4><ul><li><p>file 装入想要调试的可执行文件。</p></li><li><p>kill 终止正在调试的程序。</p></li><li><p>list 列出产生执行文件的源代码的一部分。</p></li><li><p>next 执行一行源代码但不进入函数内部。</p></li><li><p>step 执行一行源代码而且进入函数内部。</p></li><li><p>run 执行当前被调试的程序。</p></li><li><p>c 继续运行程序。</p></li><li><p>quit 终止gdb。</p></li><li><p>watch 使你能监视一个变量的值而不管它何时被改变。</p></li><li><p>backtrace 栈跟踪，查出代码被谁调用。</p></li><li><p>print 查看变量的值。</p></li><li><p>make 使你能不退出gdb就可以重新产生可执行文件。</p></li><li><p>shell  使你能不离开gdb就执行UNIX shell命令。</p></li><li><p>whatis 显示变量或函数类型。</p></li><li><p>break 在代码里设断点，这将使程序执行到这里时被挂起。</p><ul><li>break linenum 根据行号设置断点</li><li>break funcname 根据函数名设置断电</li><li>break filename:linenum/funcname 执行非当前源文件的某行或某函数的时候停止执行</li><li>break linenum/funcname if expr 根据条件停止程序执行</li></ul></li><li><p>info break 显示当前断点清单，包括到达断点处的次数等。</p></li><li><p>info files 显示被调试文件的详细信息。</p></li><li><p>info func 显示所有的函数名称。</p></li><li><p>info local 显示当函数中的局部变量信息。</p></li><li><p>info prog 显示被调试程序的执行状态。</p></li><li><p>delete [n] 删除第n个断点。</p></li><li><p>disable[n] 关闭第n个断点。</p></li><li><p>enable[n] 开启第n个断点。</p></li><li><p>ptype 显示结构定义。</p></li><li><p>set variable 设置变量的值。</p></li><li><p>call name(args)  调用并执行名为name，参数为args的函数。</p></li><li><p>Finish 终止当前函数并输出返回值。</p></li><li><p>return value 停止当前函数并返回value给调用者。</p></li></ul><h1 id="GTK"><a href="#GTK" class="headerlink" title="GTK"></a>GTK</h1>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Terminal </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github-tourguide</title>
      <link href="/posts/48683/"/>
      <url>/posts/48683/</url>
      
        <content type="html"><![CDATA[<p>Github 简明教程</p><a id="more"></a><p><a href="http://www.runoob.com/w3cnote_genre/code" rel="external nofollow noreferrer">编程技术</a><br>如果你是一枚Coder，但是你不知道Github，那么我觉的你就不是一个菜鸟级别的Coder，因为你压根不是真正Coder，你只是一个Code搬运工。<br>但是你如果已经在读这篇文章了，我觉的你已经知道Github了。<br><em>正是Github，让社会化编程成为现实。</em></p><h2 id="什么是-Github"><a href="#什么是-Github" class="headerlink" title="什么是 Github?"></a>什么是 Github?</h2><p>github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。<br>Github 由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的版本托管服务。<br>目前看来，GitHub这场冒险已经胜出。根据来自维基百科关于GitHub的描述，我们可以形象地看出GitHub的增长速度：<br><img src="github-repos.png" alt="github-repos"><br>今天，GitHub已是：</p><ul><li>一个拥有143万开发者的社区。其中不乏Linux发明者 <a href="https://github.com/torvalds" rel="external nofollow noreferrer">Torvalds</a> 这样的顶级黑客，以及Rails创始人 <a href="https://github.com/dhh" rel="external nofollow noreferrer">DHH</a> 这样的年轻极客。</li><li>这个星球上最流行的开源托管服务。目前已托管431万git项目，不仅越来越多知名开源项目迁入GitHub，比如Ruby on Rails、jQuery、Ruby、Erlang/OTP；近三年流行的开源库往往在GitHub首发，例如： <a href="https://github.com/twitter/bootstrap" rel="external nofollow noreferrer">BootStrap</a> 、 <a href="https://github.com/joyent/node" rel="external nofollow noreferrer">Node.js</a> 、 <a href="https://github.com/jashkenas/coffee-script" rel="external nofollow noreferrer">CoffeScript</a> 等。</li><li>alexa全球排名414的网站。<h2 id="注册账户以及创建仓库"><a href="#注册账户以及创建仓库" class="headerlink" title="注册账户以及创建仓库"></a>注册账户以及创建仓库</h2>要想使用github第一步当然是注册github账号了， github官网地址： <a href="https://github.com/" rel="external nofollow noreferrer">https://github.com/</a> 。 之后就可以创建仓库了（免费用户只能建公共仓库），Create a New Repository，填好名称后Create，之后会出现一些仓库的配置信息，这也是一个git的简单教程。<h2 id="Github-安装"><a href="#Github-安装" class="headerlink" title="Github 安装"></a>Github 安装</h2></li><li><a href="http://code.google.com/p/git-osx-installer/downloads/list?can=3" rel="external nofollow noreferrer">下载 git OSX 版</a> </li><li><a href="http://msysgit.github.io/" rel="external nofollow noreferrer">下载 git Windows 版</a> </li><li><a href="http://book.git-scm.com/2_installing_git.html" rel="external nofollow noreferrer">下载 git Linux 版</a> <h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2>首先在本地创建ssh key；<br><code>$ ssh-keygen -t rsa -C “your_email@youremail.com”</code><br>后面的<a href="mailto:your_email@youremail.com" rel="external nofollow noreferrer">your_email@youremail.com</a>改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。<br>回到github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便填，粘贴在你电脑上生成的key。<br><img src="github-account.jpg" alt="github-account"><br>为了验证是否成功，在git bash下输入：<br><code>$ ssh -T git@github.com</code></li></ul><h2 id="如果是第一次的会提示是否continue，输入yes就会看到：You’ve-successfully-authenticated-but-GitHub-does-not-provide-shell-access-。这就表示已成功连上github。"><a href="#如果是第一次的会提示是否continue，输入yes就会看到：You’ve-successfully-authenticated-but-GitHub-does-not-provide-shell-access-。这就表示已成功连上github。" class="headerlink" title="如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。"></a>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</h2><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">$ git config —global user.name “your name”<br>$ git config —global user.email “your_email@youremail.com”<br></code></pre></td></tr></table></figure><p>进入要上传的仓库，右键git bash，添加远程地址：<br><code>$ git remote add origin git@github.com:yourName/yourRepo.git</code><br>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。<br>创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。</p><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：<br><code>git clone /path/to/repository</code><br>如果是远端服务器上的仓库，你的命令会是这个样子：<br><code>git clone username@host:/path/to/repository</code></p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。<br>你可以提出更改（把它们添加到暂存区），使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add &lt;filename&gt;<br>git add *<br></code></pre></td></tr></table></figure><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：<br><code>git commit -m “代码提交信息”</code><br>现在，你的改动已经提交到了 <em>HEAD*，但是还没到你的远端仓库。<br><img src="trees-3607800.png" alt="trees-3607800">推送改动你的改动现在已经在本地仓库的 *HEAD</em> 中了。执行如下命令以将这些改动提交到远端仓库：<br><code>git push origin master</code><br>可以把 /master/ 换成你想要推送的任何分支。 </p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br><code>git remote add origin &lt;server&gt;</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，/master/ 是”默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src="branches-3607777.png" alt="branches-3607777"><br>创建一个叫做”feature_x”的分支，并切换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉：<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是 /不为他人所见的/：<br><code>git push origin &lt;branch&gt;</code></p><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在你的工作目录中 /获取（fetch）/ 并 /合并（merge）/ 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：<br><code>git merge &lt;branch&gt;</code><br>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现/冲突（conflicts）/。 这时候就需要你修改这些文件来手动合并这些/冲突（conflicts）/。改完之后，你需要执行如下命令以将它们标记为合并成功：<br><code>git add &lt;filename&gt;</code><br>在合并改动之前，你可以使用如下命令预览差异：<br><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 /1.0.0/ 的标签：<br><code>git tag 1.0.0 1b2e1d63ff</code><br>/1b2e1d63ff/ 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：<br><code>git log</code><br>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：<br><code>git checkout — &lt;filename&gt;</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。<br>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<br><code>git fetch origin</code><br><code>git reset —hard origin/master</code></p><h2 id="实用小贴士"><a href="#实用小贴士" class="headerlink" title="实用小贴士"></a>实用小贴士</h2><p>内建的图形化 git：<br><code>gitk</code><br>彩色的 git 输出：<br><code>git config color.ui true</code><br>显示历史记录时，每个提交的信息只显示一行：<br><code>git config format.pretty oneline</code><br>交互式添加文件到暂存区：<br><code>git add -i</code></p><h2 id="链接与资源"><a href="#链接与资源" class="headerlink" title="链接与资源"></a>链接与资源</h2><p><strong>图形化客户端</strong></p><ul><li><a href="http://gitx.laullon.com/" rel="external nofollow noreferrer">GitX (L) (OSX, 开源软件)</a> </li><li><a href="http://www.git-tower.com/" rel="external nofollow noreferrer">Tower (OSX)</a> </li><li><a href="http://www.sourcetreeapp.com/" rel="external nofollow noreferrer">Source Tree (OSX, 免费)</a> </li><li><a href="http://mac.github.com/" rel="external nofollow noreferrer">GitHub for Mac (OSX, 免费)</a> </li><li><a href="https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12" rel="external nofollow noreferrer">GitBox (OSX, App Store)</a> </li></ul><p><strong>指南和手册</strong></p><ul><li><a href="http://book.git-scm.com/" rel="external nofollow noreferrer">Git 社区参考书</a> </li><li><a href="http://progit.org/book/" rel="external nofollow noreferrer">专业 Git</a> </li><li><a href="http://think-like-a-git.net/" rel="external nofollow noreferrer">像 git 那样思考</a> </li><li><a href="http://help.github.com/" rel="external nofollow noreferrer">GitHub 帮助</a> </li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" rel="external nofollow noreferrer">图解 Git</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    
  
  
</search>
