<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Annewqx</title>
  
  <subtitle>Coding and Life Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.annewqx.top/"/>
  <updated>2023-01-31T03:30:12.496Z</updated>
  <id>https://www.annewqx.top/</id>
  
  <author>
    <name>Anne416wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Mac上浏览和整理文件</title>
    <link href="https://www.annewqx.top/posts/30597/"/>
    <id>https://www.annewqx.top/posts/30597/</id>
    <published>2023-01-31T01:37:26.000Z</published>
    <updated>2023-01-31T03:30:12.496Z</updated>
    
    <content type="html"><![CDATA[<p>一些Finder和Terminal很基础的办公场景使用指南,这类文章应该少数派上有很多, 但还是自己整理一篇~ </p><a id="more"></a><h2 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h2><h4 id="QuickLook-空格键预览"><a href="#QuickLook-空格键预览" class="headerlink" title="QuickLook - 空格键预览"></a>QuickLook - 空格键预览</h4><p>在Finder中选中文件, 键盘使用<code>space</code>空格键可快速预览文件内容, 支持常用的音视频及办公文件格式</p><blockquote><p><a href="https://support.apple.com/zh-cn/guide/mac-help/mh14119/mac" rel="external nofollow noreferrer">官网文档</a> 👈在网页上,三指点击可以快速预览网页链接,更多手势可以前往<code>系统设置-触控板</code>查看. 阅读官网macOS使用手册的其他部分也许能得到更多收获.</p></blockquote><p><img src="/posts/30597/2023-01-31-10-36-52-image.png" alt></p><h5 id="QL增强插件"><a href="#QL增强插件" class="headerlink" title="QL增强插件"></a>QL增强插件</h5><p>支持我们使用ql预览更多的文件类型, 比如<code>.json .md .zip</code>等</p><blockquote><p><a href="https://discussionschinese.apple.com/thread/252673893" rel="external nofollow noreferrer">macOS QuickLook 增强插件安装指南 - Apple 社区</a></p><p><a href="https://github.com/sindresorhus/quick-look-plugins" rel="external nofollow noreferrer">插件源码 - GitHub</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize suspicious-package apparency quicklookase qlvideo<br></code></pre></td></tr></table></figure><p><img src="/posts/30597/2023-01-31-10-37-41-image.png" alt></p><h4 id="文件列表查看"><a href="#文件列表查看" class="headerlink" title="文件列表查看"></a>文件列表查看</h4><p>使用Finder的列表视图查看文件, 使用方向键<code>→</code>展开树形展开, <code>←</code>折叠</p><p><img src="/posts/30597/2023-01-31-10-21-58-image.png" alt></p><h5 id="文件夹图标替换"><a href="#文件夹图标替换" class="headerlink" title="文件夹图标替换"></a>文件夹图标替换</h5><p>mac原生支持的功能, 也有人为了好看的图标使用相关的插件. </p><blockquote><p><a href="https://support.apple.com/zh-cn/guide/mac-help/mchlp2313/mac" rel="external nofollow noreferrer">在Mac上更改文件或文件夹图标 - Apple</a></p></blockquote><ol><li><p>使用<code>command+I</code>快捷键打开文件详情;</p></li><li><p>将已经复制好的图片粘贴到图标位置;</p></li><li><p>完成后目录下会出现<code>icon?</code>的隐藏文件(没有打开隐藏文件查看的话不会看见)</p></li></ol><p><img src="/posts/30597/2023-01-31-10-40-03-image.png" alt></p><h2 id="Terminal终端"><a href="#Terminal终端" class="headerlink" title="Terminal终端"></a>Terminal终端</h2><blockquote><p>Terminal在整理文件方面可以视作是Finder的另一种窗口, 只是我们使用的原始的命令行方式与之交互. 作为非计算机行业的人知道这些命令的作用有多大呢😄? </p><p><a href="https://annewqx.top/posts/55266/" rel="external nofollow noreferrer">Linux终端的基本命令 - Annewqx</a> 这篇博文是本科时学校Linux相关命令课程的笔记.</p></blockquote><ul><li><p>目录, 绝对路径, 相对路径</p><p>将Finder中的文件拖到Terminal的窗口中, 就会自动出现该文件的绝对路径</p><p><img src="/posts/30597/2023-01-31-11-13-45-image.png" alt></p></li><li><p><code>cd 文件绝对路径</code> 进入对应的工作目录<br><img src="/posts/30597/2023-01-31-11-14-06-image.png" alt></p></li><li><p>ls 显示目录内容</p><p>ls -R 递归显示子目录的文件</p><p><img src="/posts/30597/2023-01-31-11-17-41-image.png" alt></p></li><li><p><code>tree</code>命令 展示文件树</p><p><img src="/posts/30597/2023-01-31-11-20-23-image.png" alt></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs md">├── package.json<br>├── public<br>│   ├── favicon.ico<br>│   └── index.html<br>├── src<br>│   ├── App.vue<br>│   ├── assets<br>│   │   └── logo.png<br>│   ├── components<br>│   │   └── HelloWorld.vue<br>│   └── main.js<br>└── yarn.lock<br></code></pre></td></tr></table></figure><blockquote><p>这个功能在程序行业写项目目录用的多一些,复制粘贴项目结构很快. 不过一般开发工具里提供大量的插件使用, 想不起来来用这个.</p><p><code>tree</code>命令不是mac自带的命令,需要使用<code>brew</code>进行安装,可参考<a href="https://juejin.cn/post/7005034414941929509" rel="external nofollow noreferrer">mac系统tree的安装和使用（附带brew） - 掘金</a></p></blockquote></li></ul><h4 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h4><p>提到终端的使用, 我们绕不开homebrew, brew可以看作终端环境下的App Store. 我们使用</p><p><code>brew install</code>下载应用, 使用<code>brew ls</code>查看已经拥有的应用.</p><blockquote><p>关于brew的安装:</p><p>tuna的文档：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" rel="external nofollow noreferrer">homebrew的安装和换源：tuna官方文档</a></p><p>使用m1芯片mac的用户，不要错过少数派的<a href="https://sspai.com/post/63935" rel="external nofollow noreferrer">在 M1 芯片 Mac 上使用 Homebrew</a></p></blockquote><h2 id="Finder和Terminal结合"><a href="#Finder和Terminal结合" class="headerlink" title="Finder和Terminal结合"></a>Finder和Terminal结合</h2><h5 id="PPT和Word批量转换pdf"><a href="#PPT和Word批量转换pdf" class="headerlink" title="PPT和Word批量转换pdf"></a>PPT和Word批量转换pdf</h5><blockquote><p>学生时代用的比较多.</p><p> 少数派及知乎有较多关于相关方法的讨论, 在此仅做总结, 具体步骤不多赘述.</p><p><a href="https://sspai.com/post/44140" rel="external nofollow noreferrer">少数派 - 如何在 macOS 上一键批量把 PPT 和 Word 文件转成 PDF </a></p><p><a href="https://www.zhihu.com/question/64226842" rel="external nofollow noreferrer">知乎 - mac上如何使用automator来完成ppt，pptx批量转换为pdf的操作？</a></p></blockquote><ol><li><p>安装libreOffice, 该软件带有转pdf的终端命令, 安装后可以在终端运行尝试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/Applications/LibreOffice.app/Contents/MacOS/soffice<span class="hljs-string">", "</span>--convert-to<span class="hljs-string">", "</span>pdf<span class="hljs-string">", 文件路径</span><br></code></pre></td></tr></table></figure></li><li><p>在mac自带的<code>Automate</code>中新建<code>快速操作</code></p><p><img src="/posts/30597/2023-01-31-10-51-16-image.png" alt></p></li><li><p>shell脚本命令如下, 关键点在于宏的定义和<code>LibreOffice</code>的安装位置, mac是自带python2环境的, 选择默认的即可</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/opt python</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> subprocess <span class="hljs-keyword">as</span> sp<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> shutil<br><br>my_env = os.environ.copy()<br>my_env[<span class="hljs-string">"PATH"</span>] = <span class="hljs-string">"/usr/local/opt:"</span> + my_env[<span class="hljs-string">"PATH"</span>]<br><span class="hljs-comment"># Note: The first argument is the script's path</span><br><br><span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> sys.argv[<span class="hljs-number">1</span>:]:<br>        fileFolder = os.path.dirname(arg)<br>        new_file= os.path.basename(arg)<br>        my_command = [<span class="hljs-string">"/Applications/LibreOffice.app/Contents/MacOS/soffice"</span>, <span class="hljs-string">"--convert-to"</span>, <span class="hljs-string">"pdf"</span>, arg, <span class="hljs-string">"--outdir"</span>, os.path.dirname(arg)]<br>        sp.check_output(my_command, env=my_env)<br></code></pre></td></tr></table></figure><ol start="4"><li>选择一个或多个文件, 右键菜单的快速操作中选择转为pdf命令. 生成的文件会出现在源文件目录下. </li></ol><p><img src="/posts/30597/2023-01-31-10-42-52-image.png" alt></p><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些Finder和Terminal很基础的办公场景使用指南,这类文章应该少数派上有很多, 但还是自己整理一篇~ &lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://www.annewqx.top/categories/life/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/life/guide/"/>
    
    
      <category term="mac" scheme="https://www.annewqx.top/tags/mac/"/>
    
      <category term="linux" scheme="https://www.annewqx.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>新年祈福弹幕墙</title>
    <link href="https://www.annewqx.top/posts/57945/"/>
    <id>https://www.annewqx.top/posts/57945/</id>
    <published>2023-01-04T02:26:54.000Z</published>
    <updated>2023-01-04T04:17:14.218Z</updated>
    
    <content type="html"><![CDATA[<p>综合说他们需要一个新年祈福弹幕墙, 安排一下. 今年疲于应付产品奇奇怪怪的需求, 年末能响应这么一个能立刻得到反馈的简单小功能还挺高兴. </p><a id="more"></a><h2 id="需求及方案确定"><a href="#需求及方案确定" class="headerlink" title="需求及方案确定"></a>需求及方案确定</h2><ol><li><p>弹幕播放：网上有一些成熟的方案或插件, 这里使用了较为简易的js操作dom实现. 两个细节要求：</p><ul><li><p>弹幕不互相遮挡：网上暂停播放动画的方案都较为复杂. 我们记录每条泳道播放的结束时间即可, 每次向预计结束时间最早（已结束）的泳道装填. </p></li><li><p>尽量铺满屏幕：缩短每条弹幕装填间隙. </p></li></ul></li><li><p>背景音乐：自动循环播放</p></li><li><p>热闹的动效: 使用了来自codepen的代码<a href="https://codepen.io/jusuf-azer/pen/ExYpMRv" rel="external nofollow noreferrer">Countdown to New Year</a> , 它包含</p><ul><li><p>星光背景</p></li><li><p>塑料烟花: 使用canvas实现的烟花很炫, 但是在非暗黑背景时会有轨迹, 我们使用了这套html+css的方案</p></li></ul></li><li><p>未实现的内容：扫码发送弹幕等</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p><img src="/posts/57945/84114afc4b00eb4838f299579d7b19482910df40.png" alt="项目目录" title="项目目录"></p><p>裸项目三件套：<code>index.html  script.js style.css</code>, 使用<code>Jquery</code>插件</p><h3 id="弹幕"><a href="#弹幕" class="headerlink" title="弹幕"></a>弹幕</h3><ol><li><p>读取文件</p><p>理论上应该写一套从Excel读取的方法, 但我手头没写过现成的工具方法. 就使用在线工具复制粘贴Excel转换成json, ，用的是bing搜索出来的第一个<a href="https://uutool.cn/excel2json/" rel="external nofollow noreferrer">在线Excel转JSON工具 - UU在线工具</a></p><blockquote><p>若有需要可参考<code>xlsx.core.min.js</code></p></blockquote><p>转换出来的文件复制到<code>wish.js</code>中存储, vscode自动帮我把json转js了. 如果使用json存储的话需要写一个request获. 。</p><p><img src="/posts/57945/2023-01-04-10-43-43-image.png" alt></p></li><li><p>弹幕播放</p><p>在<code>index.html</code>中添加<code>barrage</code>块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>新年许愿墙<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span><br>      <span class="hljs-attr">href</span>=<span class="hljs-string">"https://fonts.googleapis.com/css?family=Roboto+Mono&amp;display=swap"</span><br>      <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span><br>    /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"./style.css"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"copyright"</span>&gt;</span>xxxxxx技术支持<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"barrage"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- partial --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./wish.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./script.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>script.js</code>中, 执行弹幕装填</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> barrageStrs = [];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readWorkbookFromLocalFile</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; wishList.length; i++) &#123;<br>    barrageStrs.push(wishList[i].sum);<br>    barrageStrs.push(wishList[i].content);<br>  &#125;<br>&#125;<br><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> $barrage = $(<span class="hljs-string">'#barrage'</span>);<br>  readWorkbookFromLocalFile();<br>  <span class="hljs-keyword">var</span> colors = [<br>    <span class="hljs-string">'#F2EF8b'</span>,<br>    <span class="hljs-string">'#f9cb8b'</span>,<br>    <span class="hljs-string">'#DDF0ED'</span>,<br>    <span class="hljs-string">'#ebb10d'</span>,<br>    <span class="hljs-string">'#ffa60f'</span>,<br>    <span class="hljs-string">'#f2e68b'</span>,<br>    <span class="hljs-string">'#f9bd10'</span>,<br>    <span class="hljs-string">'#f2ce2b'</span>,<br>    <span class="hljs-string">'#fba414'</span>,<br>    <span class="hljs-string">'#f0d695'</span>,<br>    <span class="hljs-string">'#EEE8AB'</span>,<br>    <span class="hljs-string">'#f09c5a'</span>,<br>    <span class="hljs-string">'#fbb957'</span>,<br>    <span class="hljs-string">'#DEA681'</span>,<br>    <span class="hljs-string">'#f7c173'</span>,<br>    <span class="hljs-string">'#f9e98b'</span>,<br>    <span class="hljs-string">'#f9bd10'</span>,<br>    <span class="hljs-string">'#f4ce69'</span>,<br>    <span class="hljs-string">'#fca106'</span>,<br>  ];  <br>  <span class="hljs-keyword">var</span> channelList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">9</span>).fill(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">var</span> secondCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> timer = setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**<br>   * 泳道计算, 减小碰撞. <br>   * 如果有硬性完全不遮挡的要求, 这里改为index在channel&lt;min的时候才取，<br>     如果没有符合条件(index返回-1)的项，这一轮计时器结束，不进行后续操作<br>   */</span><br>    index = channelList.findIndex(<span class="hljs-function">(<span class="hljs-params">channel</span>) =&gt;</span> channel === <span class="hljs-built_in">Math</span>.min(...channelList);<br>    <span class="hljs-keyword">const</span> str = barrageStrs[secondCount % barrageStrs.length];<br>    channelList[index] = <span class="hljs-built_in">Math</span>.ceil(secondCount + str.length / <span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> barrage = <span class="hljs-keyword">new</span> Barrage(&#123;<br>      <span class="hljs-attr">str</span>: str,<br>      <span class="hljs-attr">x</span>: <span class="hljs-built_in">window</span>.innerHeight * <span class="hljs-number">0.3</span> + <span class="hljs-number">60</span> * index,<br>      <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">color</span>: colors[random(<span class="hljs-number">0</span>, colors.length - <span class="hljs-number">1</span>)],<br>      <span class="hljs-attr">parent</span>: $barrage,<br>    &#125;);<br>    barrage.move();<br>    secondCount++;<br>  &#125;, <span class="hljs-number">600</span>); <span class="hljs-comment">// 调整每条新弹幕填充的时间</span><br>&#125;);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Barrage</span>(<span class="hljs-params">&#123; str: str, x: x, y: y, color: color, parent: parent &#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;<br>  <span class="hljs-keyword">this</span>.text = str;<br>  <span class="hljs-keyword">this</span>.pos = &#123;<br>    <span class="hljs-attr">x</span>: x + <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">y</span>: y,<br>  &#125;;<br>  <span class="hljs-keyword">this</span>.state = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">this</span>.entity = $(<span class="hljs-string">'&lt;span&gt;'</span>);<br>  <span class="hljs-keyword">this</span>.entity.text(str).css(&#123;<br>    <span class="hljs-attr">position</span>: <span class="hljs-string">'absolute'</span>,<br>    <span class="hljs-attr">top</span>: x,<br>    <span class="hljs-attr">right</span>: y,<br>    <span class="hljs-attr">color</span>: color,<br>    <span class="hljs-attr">fontSize</span>: random(<span class="hljs-number">24</span>, <span class="hljs-number">60</span>) + <span class="hljs-string">'px'</span>,<br>    <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">'bold'</span>,<br>    <span class="hljs-attr">maxWidth</span>: <span class="hljs-string">'10px'</span>,<br>    <span class="hljs-attr">whiteSpace</span>: <span class="hljs-string">'nowrap'</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">this</span>.speed = <span class="hljs-number">2</span>;<br>  parent.append(<span class="hljs-keyword">this</span>.entity);<br>  <span class="hljs-keyword">this</span>.move = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    that.state = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">this</span>.show();<br>    <span class="hljs-keyword">var</span> timer = setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">var</span> left = <span class="hljs-built_in">parseInt</span>(that.entity.css(<span class="hljs-string">'left'</span>));<br>      <span class="hljs-keyword">if</span> (left &lt; <span class="hljs-number">-6000</span>) &#123;<br>        clearInterval(timer);<br>        that.hide();<br>        that.entity.remove();<br>      &#125;<br>      <span class="hljs-keyword">var</span> right = <span class="hljs-built_in">parseInt</span>(that.entity.css(<span class="hljs-string">'right'</span>));<br>      right += that.speed;<br>      that.speed += <span class="hljs-number">0.02</span>;<br>      that.entity.css(&#123; <span class="hljs-attr">right</span>: right &#125;);<br>    &#125;, <span class="hljs-number">25</span>);<br>  &#125;;<br>  <span class="hljs-keyword">this</span>.show = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    that.entity.show();<br>  &#125;;<br>  <span class="hljs-keyword">this</span>.hide = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    that.entity.hide();<br>  &#125;;<br>  <span class="hljs-keyword">this</span>.hide();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">random</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(min + <span class="hljs-built_in">Math</span>.random() * (max - min));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="背景音乐"><a href="#背景音乐" class="headerlink" title="背景音乐"></a>背景音乐</h3><blockquote><p>背景音乐播放需要注意的是<code>Chrome</code>会在用户未进行页面操作时禁止<code>play()</code>的操作, 所以写了个傻瓜的循环计时器</p></blockquote><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vd"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./chun_jie_xu_qu.mp3"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/mp4"</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./chun_jie_xu_qu.ogg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/ogg"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toggleSound</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-literal">undefined</span>;<br>  <span class="hljs-keyword">var</span> music = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'vd'</span>); <span class="hljs-comment">//获取ID</span><br>  <span class="hljs-keyword">if</span> (music.paused) &#123;<br>    <span class="hljs-comment">//判读是否播放</span><br>    music.paused = <span class="hljs-literal">false</span>;<br>    music.play(); <span class="hljs-comment">//没有就播放</span><br>  &#125;<br>&#125;<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>  setInterval(<span class="hljs-string">'toggleSound()'</span>, <span class="hljs-number">1000</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="其他动效"><a href="#其他动效" class="headerlink" title="其他动效"></a>其他动效</h3><blockquote><p><a href="https://codepen.io/jusuf-azer/pen/ExYpMRv" rel="external nofollow noreferrer">Countdown to New Year</a>使用了haml和sass, 又学到一套模板html的写法 ! </p><p>不需使用也别慌, 使用codepen export该项目, 傻瓜照搬dist目录下的原生三件套代码即可.</p></blockquote><p><img src="/posts/57945/2023-01-04-12-06-33-image.png" alt></p><h3 id="背景和其他"><a href="#背景和其他" class="headerlink" title="背景和其他"></a>背景和其他</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(./back.png) center no-repeat;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Roboto Mono'</span>, monospace;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.copyright</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#f9e98b</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>祝大家2023新年快乐! 一切顺利!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;综合说他们需要一个新年祈福弹幕墙, 安排一下. 今年疲于应付产品奇奇怪怪的需求, 年末能响应这么一个能立刻得到反馈的简单小功能还挺高兴. &lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="js" scheme="https://www.annewqx.top/tags/js/"/>
    
      <category term="html" scheme="https://www.annewqx.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>使用taro开发个人微信小程序(未完成)</title>
    <link href="https://www.annewqx.top/posts/51261/"/>
    <id>https://www.annewqx.top/posts/51261/</id>
    <published>2022-07-25T01:46:21.000Z</published>
    <updated>2023-01-04T04:19:01.089Z</updated>
    
    <content type="html"><![CDATA[<p>使用taro + react + vantUI 开发个人微信小程序中遇到的坑<br>  <a id="more"></a></p><h1 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h1><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><ul><li><p>darkmode配置，<code>theme.json</code>中引用的图片未被打包：</p><p>通过theme.json引用的图片会被项目认为未被使用，相关讨论可见<a href="https://github.com/NervJS/taro/issues/11267" rel="external nofollow noreferrer">taro github issue 11267</a>，使用taro配置命令的中的<a href="https://docs.taro.zone/docs/config-detail#copy" rel="external nofollow noreferrer">copy配置项</a>指定将需要的图片的文件输出到dist即可</p></li></ul><h3 id="云开发"><a href="#云开发" class="headerlink" title="云开发"></a>云开发</h3><blockquote><p>参考文档</p><ul><li><p>[微信开发官方文档](<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/init.html" rel="external nofollow noreferrer">初始化 | 微信开放文档</a>)</p></li><li><p><a href="https://segmentfault.com/a/1190000041958555?utm_source=sf-similar-article" rel="external nofollow noreferrer">segmentFault思否指导</a></p></li><li><p><a href="https://taro-docs.jd.com/taro/docs/2.x/wxcloudbase/" rel="external nofollow noreferrer">taro小程序云开发模板</a></p></li></ul></blockquote><p>对于项目开发到一半发现需要云开发的情况，我们不需要按照taro给出的模板来构造项目</p><ol><li><p>在项目的根目录中新建cloud文件夹，并在<code>project</code></p></li><li><p>在微信开发者工具中看到该文件夹中</p></li></ol><ul><li><p>图表插件选择</p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用taro + react + vantUI 开发个人微信小程序中遇到的坑&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="react" scheme="https://www.annewqx.top/tags/react/"/>
    
      <category term="taro" scheme="https://www.annewqx.top/tags/taro/"/>
    
      <category term="小程序" scheme="https://www.annewqx.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下通过docker安装和运行SonarQube</title>
    <link href="https://www.annewqx.top/posts/40079/"/>
    <id>https://www.annewqx.top/posts/40079/</id>
    <published>2022-04-22T14:28:41.000Z</published>
    <updated>2022-07-20T06:35:28.345Z</updated>
    
    <content type="html"><![CDATA[<p>使用postgres数据库的傻瓜式搭建，并针对Mac M1芯片可能遇到的问题。面向突然需要通过SonarQube检查的前端工程师，后端可以直接使用SonarLint在编写代码时进行检查。vscode上并没有特别好的相关插件(eslint一把梭了)</p><a id="more"></a><blockquote><p>准备工作：</p><ol><li>我们将要用到docker。你可能需要一个docker desktop，如果你熟悉docker的命令行操作，则可以忽略。</li><li>我们将要用到homebrew。你永远可以相信tuna的文档：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" rel="external nofollow noreferrer">homebrew的安装和换源：tuna官方文档</a>。而使用m1芯片mac的用户，请不要错过少数派的这篇文章<a href="https://sspai.com/post/63935" rel="external nofollow noreferrer">在 M1 芯片 Mac 上使用 Homebrew</a>。</li></ol><p>本文参考<a href="https://www.cnblogs.com/Simple-Small/p/13408938.html" rel="external nofollow noreferrer">博客园：Docker下，搭建SonarQube环境</a>，在macOS 12.3.1下搭建，</p></blockquote><h2 id="1-Docker"><a href="#1-Docker" class="headerlink" title="1 Docker"></a>1 Docker</h2><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低 (是的，可以通过docker在mac上玩游戏)。</p><p>docker的三个基本概念：</p><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><p>如果此前没有安装过docker，直接通过<a href="https://www.docker.com" rel="external nofollow noreferrer">官网</a>下载docker app即可，它会同时帮你自动下载并配置到docker的命令行工具。</p><h2 id="2-安装并运行数据库"><a href="#2-安装并运行数据库" class="headerlink" title="2 安装并运行数据库"></a>2 安装并运行数据库</h2><p>网上教程也有使用MySQL等数据库的，此处按照本文所参考的教程，使用<a href="http://postgres.cn/v2/home" rel="external nofollow noreferrer">postgreSQL数据库：世界上最先进的开源关系型数据库</a></p><ol><li><p>拉取postgres镜像。进入终端，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull postgres<br></code></pre></td></tr></table></figure></li><li><p>运行镜像容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name db -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -d postgres<br></code></pre></td></tr></table></figure><ul><li><p><code>--name</code>： 容器名称，此处取名为db</p></li><li><p><code>-e</code>：使用值docker将名称为<code>POSTGRES_PASSWORD</code>，<code>POSTGRES_USER</code>的环境变量暴露给容器。</p><ul><li><p><code>POSTGRES_PASSWORD</code>为PostgreSQL的超级用户密码</p></li><li><p><code>POSTGRES_USER</code>设置超级用户名。如果未提供，则超级用户名默认为postgres。</p></li><li><p><code>POSTGRES_DB</code>设置要设置的默认数据库的名称。如果未提供，则默认为POSTGRES_USER的值。</p><p>此处设置的为：数据库名为sonar,超级用户名为sonar,密码为sonar.</p></li></ul></li><li><p><code>-d</code>： 后台运行容器，并返回容器ID</p><p>完成后，docker desktop的containers下出现名为db的容器，且正在运行。</p><p><img src="https://s2.loli.net/2022/07/20/EveGXMDm6fQ75l2.png" alt="创建数据库镜像容器"></p></li></ul></li></ol><h2 id="3-安装并运行SonarQube"><a href="#3-安装并运行SonarQube" class="headerlink" title="3 安装并运行SonarQube"></a>3 安装并运行SonarQube</h2><ol><li><p>下载并安装SonarQube镜像，我们有以下途径</p><ul><li><p><a href="https://www.sonarqube.org" rel="external nofollow noreferrer">SonarQube官网</a>下载，导入docker；</p></li><li><p>直接docker拉取<code>docker pull sonarqube</code></p><p>但是因为我们使用m1芯片为arm64架构，这两种方法下载并运行的镜像可能会遇到问题，因此，我们换用<a href="https://stackoverflow.com/questions/66482075/docker-apple-silicon-m1-preview-sonarqube-no-matching-manifest-for-linux-arm6" rel="external nofollow noreferrer">以下解决方案</a>：</p></li><li><p>拉取SonarQube源码，自行编译为镜像并使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># download 下载，也可通过官网下载</span><br>git <span class="hljs-built_in">clone</span> https://github.com/SonarSource/docker-sonarqube<br><span class="hljs-built_in">cd</span> docker-sonarqube/9/community<br><span class="hljs-comment">#build</span><br>docker build -t sonarqube-arm .<br></code></pre></td></tr></table></figure></li><li><p>直接docker拉取社区已编译好的arm-sonarqube</p><ol><li>使用<code>docker search sonarqube-arm</code>搜索别人上传的arm-sonarqube</li><li>挑选一个并拉取，我使用的是<code>docker pull koolwithk/sonarqube-arm</code></li></ol></li></ul></li><li><p>启动sonar，并连接到数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name sonar --link db -e SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar -e SONARQUBE_JDBC_USERNAME=sonar -e SONARQUBE_JDBC_PASSWORD=sonar -p 9000:9000 -d sonarqube<br></code></pre></td></tr></table></figure><ul><li><p><code>--name</code>：容器名称，此处取名为sonar</p></li><li><p><code>--link 容器名称</code>：与其它容器通信，此处为与名为db的容器，即postgres的数据库</p></li><li><p><code>-e</code>：环境变量</p><p>  添加了SONARQUBE_JDBC_URL环境变量为 jdbc:postgresql://容器名称:端口/数据库名称 （数据库连接驱动）</p><p>  添加了SONARQUBE_JDBC_USERNAME环境变量为sonar（数据库连接用户名）</p><p>  添加了SONARQUBE_JDBC_PASSWORD环境变量为sonar（数据库连接密码）</p></li><li><p><code>-p</code>： 指定端口映射，格式为：主机(宿主)端口:容器端口</p></li><li><p><code>-d</code>：镜像名称，此处我们需要把sonarqube替换为我们所拉取的<code>arm-sonarqube</code>对应的名称或IMAGE ID。使用<code>docker image ls</code>命令可以查看到。</p><p>  <img src="https://s2.loli.net/2022/07/20/sjFx4yzJ7a98QLh.jpg" alt="img"></p></li></ul></li><li><p>在docker desktop中查看</p><p> <img src="https://s2.loli.net/2022/07/20/1vx73nw5Yp4ILV2.jpg" alt="运行效果"></p></li><li><p>在浏览器中，访问<a href="http://localhost:9000/" rel="external nofollow noreferrer">http://localhost:9000</a>，默认用户名admin，密码admin(对于SonarQube9)</p></li><li><p>新建项目，根据需要选择云端导入或manually手动(本地项目选择手动)。</p><p> <img src="https://s2.loli.net/2022/07/20/9svOnVZbfHatzGJ.jpg" alt="新建项目"></p><p> 输入项目名和项目钥，随意。</p><img title src="https://s2.loli.net/2022/07/20/ANpt98omXT47eCS.jpg" alt style="zoom:55%;"><p> 输入你自己的token并生成，点击继续后输入项目的信息，sonar将返回给你一串sonar-scanner命令。复制。</p><p> <img src="https://s2.loli.net/2022/07/20/RSqCwnp7DTg3J8P.jpg" alt="运行"></p></li></ol><h2 id="4-安装sonar-scanner并运行扫描"><a href="#4-安装sonar-scanner并运行扫描" class="headerlink" title="4 安装sonar-scanner并运行扫描"></a>4 安装sonar-scanner并运行扫描</h2><p> 通过<code>brew install sonar-scanner即可</code></p><p>进入我们本地需要sonar扫描的项目文件夹，在终端输入步骤3中所复制的命令，等待片刻。即可在<a href="http://localhost:9000/" rel="external nofollow noreferrer">http://localhost:9000</a>的项目中查看到自己项目的扫描结果。sonar提示的bug一般是是eslint忽略的js文件中，耐心，我们将会解决得很快。祝好运!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用postgres数据库的傻瓜式搭建，并针对Mac M1芯片可能遇到的问题。面向突然需要通过SonarQube检查的前端工程师，后端可以直接使用SonarLint在编写代码时进行检查。vscode上并没有特别好的相关插件(eslint一把梭了)&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="JavaScript" scheme="https://www.annewqx.top/tags/JavaScript/"/>
    
      <category term="SonarQube" scheme="https://www.annewqx.top/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>ES6+对比</title>
    <link href="https://www.annewqx.top/posts/37733/"/>
    <id>https://www.annewqx.top/posts/37733/</id>
    <published>2022-01-24T06:05:27.000Z</published>
    <updated>2022-07-27T01:28:45.835Z</updated>
    
    <content type="html"><![CDATA[<p>es7~es12的新特性</p><a id="more"></a><ul><li><p>es7(2016)</p><ul><li><p>Array.includes() </p><ul><li><p>语法：arr.includes(valueToFind[, fromIndex])</p></li><li><p>功能：判断一个基本类型一维数组是否包含指定值</p></li><li><p>特点：相比indexOf()能够识别<code>NaN</code></p></li></ul></li><li><p>幂运算符<code>**</code></p></li></ul></li><li><p>es8（es2017）</p><ul><li><p>Object键值</p><ul><li><p>Object.values 返回对象可遍历属性值</p></li><li><p>Object.entries 返回对象键值对数组</p></li></ul></li><li><p>Object属性</p><ul><li><p>Object.getOwnPropertyDescriptors 获得对象所有属性的描述符</p></li><li><p>Object.defineProperty(obj,key,config) es5设置对象属性</p></li></ul></li><li><p>字符串填充（目标长度，填充用字符串）</p><ul><li><p>String.padStart(targetLength [, padString])</p></li><li><p>String.padEnd(targetLength [, padString])</p></li></ul></li><li><p>尾逗号</p><ul><li><p>ES8允许函数的最后一个参数有尾逗号(Trailing comma)，从而与数组和对象规则统一</p></li><li><p>function func(param1, param2,)</p></li></ul></li><li><p>async/await</p><ul><li><p>作用：改进链式调用代码观感😅</p></li><li><p>使用：添加async的函数会自动返回一个promise对象，async函数中在调用Promise前加await，之后的代码会等await内的Promise执行完才进行(转异步为同步)</p></li></ul></li></ul></li><li><p>ES9(2018)</p><ul><li><p>Object spread &amp; rest</p><ul><li><p>spread：使用<code>...</code>展开对象。如果属性值是对象，则是浅拷贝</p></li><li><p>rest：用一个变量收敛对象的部分数据(方法可参考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#array_destructuring" rel="external nofollow noreferrer">数组结构</a>)进行理解 rest属性必须始终出现在对象的末尾</p></li></ul></li><li><p>for await of(异步迭代器)</p><ul><li><p>功能：循环等待每个Promise对象变为resolved状态才进入下一步</p></li><li><p>使用：for await (let item of arr)</p></li></ul></li><li><p>Promise.finally()</p><ul><li>功能：promise执行结束，无论结果是fulfilled或者是rejected，在then()和catch()后总会进入finally回调</li></ul></li><li><p>模板字符串扩展</p><ul><li><p>移除转义序列的限制，允许嵌套支持常见转义序列，如unicode字符。</p></li><li><p>遇到不合法转义字符串不再会将整个模板字符串返回空，但会抛出错误</p></li></ul></li></ul></li><li><p>ES10(2019)</p><ul><li><p>Object.formEntries()</p><ul><li><p>把键值对转换为对象，与Object.entries()相对</p></li><li><p>使用例</p><ul><li><p>将map转换为对象：const obj = Object.formEntries(map)</p></li><li><p>过滤：const res = Object.entries(course).filter(([key, val]) =&gt; val &gt; 0)</p></li></ul></li></ul></li><li><p>Array.flat([depth])</p><ul><li><p>url参数转换：const paramObj = Object.fromEntries(URLSearchParams(“?name=jimmy&amp;age=18&amp;height=1.88”));</p></li><li><p>提取嵌套数组，depth指定要提取嵌套数组的结构深度，默认值为 1，array.flat(Infinity)</p></li><li><p>flat会去除数组中的空值</p></li></ul></li><li><p>Array.flatMap(func)：map+flat</p></li><li><p>String.trimStart()/trimLeft()；String.trimEnd()/trimEnd()</p></li><li><p>catch允许省略参数e</p></li><li><p>Symbol.description()</p></li><li><p>JSON.stringfy()修复超出范围的Unicode字符，使用转义字符处理替换编码</p></li><li><p>Function.toString()：新增返回注释、空格和语法等信息</p></li></ul></li><li><p>ES11(2020)</p><ul><li><p><code>??</code>空值合并操作符</p><ul><li><p>作用：左侧为null或undefined时，返回右侧操作数，否则返回左侧</p></li><li><p>区别：<code>||</code>左侧为假是就返回右侧，例如<code>&#39;&#39;</code>,<code>0</code>,<code>NaN</code>,<code>false</code></p></li><li><p>注意：不能与其他逻辑运算符组合使用</p></li></ul></li><li><p><code>?.</code>可选链操作符</p><ul><li>作用：尝试访问并不一定存在的对象属性，不会引起错误</li></ul></li><li><p>globalThis：通用安全的全局对象，全局作用域中的this</p></li><li><p>BigInt：任意大的整数(比Number大的整数)</p><ul><li><p>使用</p><ul><li><p>在数字后面尾缀n <code>const bigInt = 9007199254740993n</code></p></li><li><p>使用BigInt函数 <code>const bigIntNum = BigInt(9007199254740993n)</code></p></li></ul></li><li><p>注意：不能用于Math对象的方法，不能和任何Number实例混合运算，向下转换会丢失精度</p></li></ul></li><li><p>String.marchAll()：方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">array = [...<span class="hljs-string">'test1test2'</span>.matchAll(<span class="hljs-regexp">/t(e)(st(\d?))/g</span>)]; <br><span class="hljs-comment">// array = [["test1", "e", "st1", "1"]， ["test2", "e", "st2", "2"]]</span><br></code></pre></td></tr></table></figure></li><li><p>Promise.allSettled()：改进Promise.all()</p><ul><li>功能：并发执行异步任务，任意任务正常或异常，都会返回对应状态，而非抛出错误</li></ul></li><li><p>动态import：import语句可以放在事件监听函数中执行</p></li></ul></li><li><p>ES12(2021)</p><ul><li><p>逻辑运算符</p><ul><li><p><code>x &amp;&amp;= y</code> 等价于 <code>x &amp;&amp; (x=y)</code>  当x为真时，x=y</p></li><li><p><code>x ||= y</code> 等价于 <code>x || (x=y)</code>  当x为假时，x=y</p></li><li><p><code>x ??= y</code> 等价于 <code>x ??(x=y)</code>  当x为<code>nullish</code>时，x=y</p></li></ul></li><li><p>String.replaceAll(pattern,replacement)</p><ul><li>注意：pattern可以为字符串或正则表达式，正则表达式必须为全局的(尾缀g)</li></ul></li><li><p>长数字允许使用下划线<code>_</code>作为百分位/千分位等分隔符</p></li><li><p>Promise.any()：参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例才会变成rejected状态</p><ul><li>Promise.race() </li></ul></li><li><p>避免使用</p><ul><li><p>WeakRef 允许保留对另一个对象的弱引用，而不会阻止被弱引用对象被GC回收</p></li><li><p>Finalizers 当一个在注册表中注册的对象被回收时，请求在某个时间点上调用一个清理回调。（清理回调有时被称为 finalizer ）</p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es7~es12的新特性&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="JavaScript" scheme="https://www.annewqx.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>react学习笔记</title>
    <link href="https://www.annewqx.top/posts/34831/"/>
    <id>https://www.annewqx.top/posts/34831/</id>
    <published>2022-01-18T02:23:48.000Z</published>
    <updated>2022-09-16T03:45:07.501Z</updated>
    
    <content type="html"><![CDATA[<p>react的入门学习笔记(就是照抄官方文档)</p><a id="more"></a><blockquote><p>学习路径</p><ul><li><a href="https://zh-hans.reactjs.org/docs/dom-elements.html#style" rel="external nofollow noreferrer">React 中文文档</a>   </li><li><a href="https://reactjs.bootcss.com/learn" rel="external nofollow noreferrer">Reactjs中文文档 beta版</a>：内嵌代码编辑器</li><li><a href="https://javascript.info" rel="external nofollow noreferrer">现代JS教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" rel="external nofollow noreferrer">重新介绍JavaScript</a></li><li><a href="https://nx.dev/react-tutorial/01-create-application" rel="external nofollow noreferrer">React NX 脚手架 教程</a></li></ul></blockquote><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="起步实践"><a href="#起步实践" class="headerlink" title="起步实践"></a>起步实践</h3><ol><li><p>用Nx建立第一个react项目</p></li><li><p>封装<a href="https://codepen.io/jusuf-azer/pen/ExYpMRv" rel="external nofollow noreferrer">CSS3-based的烟花组件</a> (学习写css样式的方法、<code>JSX</code>、组件传参<code>Props</code>)</p><blockquote><p><a href="https://blog.csdn.net/weixin_37620905/article/details/86567861" rel="external nofollow noreferrer">React中使用CSS样式的三种方法</a>：</p><ol><li><p>行内/声明样式：样式作为js对象传入组件的style属性</p></li><li><p>import样式</p><p> 使用*.module.css防止样式全局污染，使用<code>className={moduleName.className}</code>以引用</p></li><li><p>styled components：<strong>从组件的层面对 CSS 进行封装</strong></p></li></ol></blockquote></li></ol><h3 id="其他核心概念"><a href="#其他核心概念" class="headerlink" title="其他核心概念"></a>其他核心概念</h3><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><ul><li><p>函数组件转换成class组件</p><ol><li>创建一个同名的 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes" rel="external nofollow noreferrer">ES6 class</a>，并且继承于 <code>React.Component</code>。</li><li>添加一个空的 <code>render()</code> 方法。</li><li>将函数体移动到 <code>render()</code> 方法之中。</li><li>在 <code>render()</code> 方法中使用 <code>this.props</code> 替换 <code>props</code>。</li><li>删除剩余的空函数声明。</li></ol></li><li><p>向class组件添加局部的state</p><ol><li><p>添加一个class构造函数，在函数中为<code>this.state</code>赋初值。同时将<code>props</code>传递到父类的构造函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">constructor</span>(props) &#123;<br>    <span class="hljs-keyword">super</span>(props);<br>    <span class="hljs-keyword">this</span>.state = &#123;<span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>this.state.name</code>调用，使用<code>this.setState()</code>对整个state对象进行更新</p><ul><li><p>不要直接修改<code>State</code>，请使用<code>this.setState</code>方法。构造函数是唯一可以给<code>this.state</code>赋值的地方</p></li><li><p>因为<code>this.props</code>和<code>this.state</code>可能会异步更新，不要依赖他们的值来更新下一个状态，可以通过使<code>this.setState()</code>接受一个函数来解决异步的问题</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Wrong</span><br><span class="hljs-keyword">this</span>.setState(&#123;<br>  <span class="hljs-attr">counter</span>: <span class="hljs-keyword">this</span>.state.counter + <span class="hljs-keyword">this</span>.props.increment,<br>&#125;);<br><span class="hljs-comment">// Correct</span><br><span class="hljs-keyword">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">state, props</span>) =&gt;</span> (&#123;<br>  <span class="hljs-attr">counter</span>: state.counter + props.increment<br>&#125;));<br><span class="hljs-comment">// Correct</span><br><span class="hljs-keyword">this</span>.setState(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state, props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">counter</span>: state.counter + props.increment<br>  &#125;;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><ul><li><p>回调函数必须进行绑定</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> <span class="hljs-comment">// 方案一 构造器绑定</span><br><span class="hljs-keyword">constructor</span>(props) &#123;<br>    <span class="hljs-keyword">super</span>(props);<br>    <span class="hljs-keyword">this</span>.handleClick = <span class="hljs-keyword">this</span>.handleClick.bind(<span class="hljs-keyword">this</span>);<br>  &#125;<br><span class="hljs-comment">// 方案二 public class fields 语法</span><br>handleClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'this is:'</span>, <span class="hljs-keyword">this</span>);<br> &#125;<br><span class="hljs-comment">// 方案三 调用时使用箭头函数(当回调函数作为prop传入子组件时此方案会产生性能问题)</span><br> render() &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;<br>        Click me<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>向事件处理函数传递参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;(e) =&gt; this.deleteRow(id, e)&#125;&gt;Delete Row&lt;/button&gt;<br>&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/button&gt;<br></code></pre></td></tr></table></figure></li><li><p>子组件向父组件通信：在父组件向子组件将某个事件处理函数作为props传入，子组件调用</p></li></ul><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><ul><li>使用变量存储元素</li><li>与运算符<code>&amp;&amp;</code><ul><li><code>true &amp;&amp; expression</code> 总是会返回 <code>expression</code></li><li><code>false &amp;&amp; expression</code> 总是会返回 <code>false</code></li></ul></li><li>三目运算符</li></ul><h4 id="列表和key"><a href="#列表和key" class="headerlink" title="列表和key"></a>列表和key</h4><ul><li>不需要改变列表项目顺序时，才能使用<code>index</code>作为列表key：<a href="https://www.zhihu.com/question/61064119/answer/766607894" rel="external nofollow noreferrer">列表中的key有什么用：知乎</a></li><li>元素的key只有放在就近的数组上下文中才有意义：<code>map()</code>中的元素需要设置key属性</li><li>key值仅仅对React有效，若程序需要获取该值则需要使用其他的属性名传入</li></ul><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><ul><li><p>表单元素（如<code>&lt;input&gt;</code>、 <code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>）之类的表单元素自己维护 state，并根据用户输入进行更新，它们原本是<a href="https://react.docschina.org/docs/uncontrolled-components.html#the-file-input-tag" rel="external nofollow noreferrer">非受控组件</a>。在React可以通过使它们接受<code>value</code>属性，编写<code>onChange()</code>事件方法使它们成为受控组件(受控组件：输入的值由React的state驱动)</p><blockquote><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><ul><li>文件input标签</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;input type=<span class="hljs-string">"file"</span> /&gt;<br></code></pre></td></tr></table></figure></blockquote><ul><li>处理多个输入：给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作</li><li>受控组件上value属性值接受到<code>undefined</code>或<code>null</code>时会重新成为非受控组件，并且终端会提示</li></ul></li></ul><h4 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h4><ul><li>通过<a href="https://react.docschina.org/docs/lifting-state-up.html" rel="external nofollow noreferrer">状态提升的例子</a>理解以上React中的核心概念，实现父子组件传值、兄弟组件通讯</li></ul><h4 id="使用组合代替继承"><a href="#使用组合代替继承" class="headerlink" title="使用组合代替继承"></a>使用组合代替继承</h4><ul><li><p>包含关系</p><ul><li><p>特殊的<code>children</code> prop：组件标签中的所有内容都会作为<code>children</code>prop</p></li><li><p>使用<code>props</code>传入组件并在展示在预留的位置：类似<code>slot</code>的概念，但是React任何东西都是作为<code>props</code>传递</p></li></ul></li><li><p>特例关系：<strong>“特殊”组件可以通过 props 定制并渲染“一般”组件：</strong></p></li></ul><h2 id="理解hook"><a href="#理解hook" class="headerlink" title="理解hook"></a>理解hook</h2><p><code>React ^16.8</code>允许在不编写class的情况下使用state等react属性，Hook开发的动机：</p><ul><li><p>组件间共享状态逻辑</p><blockquote><p>在组件之间重用一些状态逻辑。目前为止，有两种主流方案来解决这个问题：<a href="https://react.docschina.org/docs/higher-order-components.html" rel="external nofollow noreferrer">高阶组件</a>和 <a href="https://react.docschina.org/docs/render-props.html" rel="external nofollow noreferrer">render props</a>。自定义 Hook 可以让你在不增加组件的情况下达到同样的目的。</p></blockquote></li><li><p>拆分复杂组件内相互关联的部分</p></li><li><p>函数组件替代Class组件</p></li></ul><p>hook的使用规则：</p><ul><li>只能在函数最外层调用</li><li>只能在函数组件调用</li></ul><h4 id="内置HooK"><a href="#内置HooK" class="headerlink" title="内置HooK"></a>内置HooK</h4><h5 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h5><p>操作组件state：调用<code>useState()</code>添加state。<code>useState()</code>返回当前状态(<code>this.state.name</code>)和一个更新该状态的函数(<code>this.setState()</code>)，参数为state的初始值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ExampleComponent</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">const</span> [something,setSomething] = useState(<span class="hljs-number">100</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在state hook中更新一个 state 变量，会 <em>替换</em> 它的值。这和 class 中的 <code>this.setState</code>不一样，后者会把更新后的字段 <em>合并</em> 入对象中。因此，建议降低组件中state对象的拆分粒度</p></blockquote><h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><ul><li><p>操作组件的生命周期：它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API。<code>useEffect</code>在执行DOM更新后被调用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 相当于 componentDidMount 和 componentDidUpdate:</span><br>    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// 相当于 componentWillUnmount:</span><br>      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);<br>    &#125;;<br>  &#125;);<br></code></pre></td></tr></table></figure><blockquote><p>大多数情况下，Effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 <a href="https://react.docschina.org/docs/hooks-reference.html#uselayouteffect" rel="external nofollow noreferrer"><code>useLayoutEffect</code></a> Hook 供你使用，其 API 与 <code>useEffect</code> 相同。</p></blockquote></li><li><p>清除effect：在Effect返回一个清除函数，React会在组件卸载的时候执行清除操作。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleStatusChange</span>(<span class="hljs-params">status</span>) </span>&#123;<br>      setIsOnline(status.isOnline);<br>    &#125;<br>    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);<br>    <span class="hljs-comment">// Specify how to clean up after this effect:</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanup</span>(<span class="hljs-params"></span>) </span>&#123;<br>      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);<br>    &#125;;<br>  &#125;);<br></code></pre></td></tr></table></figure></li><li><p>跳过Effect进行性能优化：如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React <strong>跳过</strong>对 effect 的调用，只要传递数组作为 <code>useEffect</code> 的第二个可选参数即可：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">document</span>.title = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>;<br>&#125;, [count]); <span class="hljs-comment">// 仅在 count 更改时更新</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>提示：</p><ul><li>Hook的目的：实现关注点分离(单个操作逻辑完整性)。按照代码的用途分离多个effect</li><li>每次更新都会运行hook，除非指定跳过</li></ul></blockquote><h4 id="Hook规则"><a href="#Hook规则" class="headerlink" title="Hook规则"></a>Hook规则</h4><ul><li>只在最顶层使用，不再循环、条件或嵌套函数中调用Hook。因为React依赖Hook调用顺序确定state对应的useState，Hook 的调用顺序在每次渲染中相同才能保证正确性。</li><li>只在React函数中调用Hook<ul><li>在React函数组件中调用Hook</li><li>在自定义Hook中调用其他Hook</li></ul></li></ul><h4 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h4><ul><li>自定义 Hook 更像是一种约定而不是功能。如果函数的名字以 “<code>use</code>” 开头并调用其他 Hook，我们就说这是一个自定义 Hook。 <code>useSomething</code> 的命名约定可以让我们的 linter 插件在使用 Hook 的代码中找到 bug。</li></ul><blockquote><p>提示</p><ul><li>在多个Hook之间传递信息：</li></ul></blockquote><h5 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h5><p>订阅React的Context</p><h5 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h5><p>通过reducer管理组件本地的复杂state，<a href="https://react.docschina.org/docs/hooks-reference.html#usestate" rel="external nofollow noreferrer"><code>useState</code></a> 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 <code>dispatch</code> 方法。（如果你熟悉 Redux 的话，就已经知道它如何工作了。）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);<br></code></pre></td></tr></table></figure><blockquote><p>tips：</p><ul><li>用户定义的组件名必须以大写字母开头(大驼峰)：<a href="https://react.docschina.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized" rel="external nofollow noreferrer">深入 JSX</a></li><li>事件命名采用小驼峰式</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react的入门学习笔记(就是照抄官方文档)&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="react" scheme="https://www.annewqx.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react native 项目环境搭建</title>
    <link href="https://www.annewqx.top/posts/30803/"/>
    <id>https://www.annewqx.top/posts/30803/</id>
    <published>2022-01-10T05:29:29.000Z</published>
    <updated>2022-07-25T01:47:00.832Z</updated>
    
    <content type="html"><![CDATA[<p>除了官方文档外还需要踩的坑</p><a id="more"></a><p><a href="https://reactnative.cn/docs/environment-setup" rel="external nofollow noreferrer">react native官网-环境搭建官方指导</a></p><ol><li><p>node工具链安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew install node<br>$ brew install watchman<br><span class="hljs-comment"># 使用nrm工具切换淘宝源</span><br>$ npx nrm use taobao<br><span class="hljs-comment"># 如果之后需要切换回官方源可使用</span><br>$ npx nrm use npm<br>$ npm install -g yarn<br></code></pre></td></tr></table></figure><p> 注意事项：</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" rel="external nofollow noreferrer">brew的安装和换源：tuna官方文档</a></li><li><code>watchman</code>安装中brew会多次报找不到模块的错误<code>Error: No such file or directory @ rb_sysopen</code>，根据brew的保存安装对应模块即可，可能存在2~3个模块的缺失</li></ul></li><li><p>ruby包管理工具<code>rvm</code>安装：请检查<code>ruby --version</code>，版本建议<code>&gt;2.6.0 &amp; &lt;=3.0.0</code>，如果版本过高或过低建议下载<code>rvm</code>进行ruby版本的管理和替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装gpg公钥工具</span><br>$ brew install gnupg<br><span class="hljs-comment"># 安装mpapis公钥</span><br>$ gpg --keyserver hkp://pgp.mit.edu --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB<br><span class="hljs-comment"># 安装最新版本Ruby的rvm</span><br>$ \curl -sSL https://get.rvm.io | bash -s stable --ruby<br></code></pre></td></tr></table></figure><p> 注意事项：</p><ul><li><p>使用curl命令需要在终端挂梯子。否则会报<code>SSL443 (43)</code>等各种错误，没有条件的请自行寻找rvm的安装方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip和端口请关注自己服务器设置中inbounds的监听IP和端口。注意http和socks协议端口的不同</span><br>$ <span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:1087 http_proxy=http://127.0.0.1:1087 all_proxy=socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure></li></ul></li><li><p>ios工具链安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gem换源</span><br>$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<br>$ gem sources -l <span class="hljs-comment"># 确保只有 gems.ruby-china.com</span><br>https://gems.ruby-china.com<br><span class="hljs-comment"># cocoapods安装</span><br>$ sudo gem install cocoapods安装<br><span class="hljs-comment"># cocoapods安装换源</span><br>$ pod repo remove master<br>$ pod repo add master https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git<br>$ pod repo update<br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>react native官方文档除了使用<code>gem</code>安装<code>cocoapods</code>还提到使用brew安装，建议使用gem，使用brew安装后续会因为版本和安装位置运行不顺利</li><li>rubyGem源替换：<a href="https://gems.ruby-china.com" rel="external nofollow noreferrer">rubyGem源替换：ruby-china官方文档</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/" rel="external nofollow noreferrer">CocoaPods源替换-tuna官方文档</a></li></ul></li><li><p>编译和运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 详细参数解释参考https://reactnative.cn/docs/environment-setup</span><br>npx react-native init AwesomeTSProject --template react-native-template-typescript<br><span class="hljs-built_in">cd</span> AwesomeProject<br><span class="hljs-built_in">cd</span> ios<br>open -e podFile <span class="hljs-comment"># 在第一行加上 source 'https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git'</span><br><span class="hljs-built_in">cd</span> ..<br>yarn ios<br></code></pre></td></tr></table></figure><ul><li>按照上述过程安装制定版本的ruby和gem后应当能够无报错正常搭建应用，第一次构建的等待时间可能较长(2~5分钟)</li><li>如果正常打开模拟器但终端出现大量关于gem模块版本的报错或者<code>Failed to install CocoaPods template</code>等报错，请检查是否正确按照上述步骤中的官方文档更换ruby gem和CocoaPods源</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了官方文档外还需要踩的坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="react" scheme="https://www.annewqx.top/tags/react/"/>
    
      <category term="ios" scheme="https://www.annewqx.top/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue2+ElementUI+scss开发在线问卷页面</title>
    <link href="https://www.annewqx.top/posts/38332/"/>
    <id>https://www.annewqx.top/posts/38332/</id>
    <published>2021-10-22T01:40:18.000Z</published>
    <updated>2022-07-20T06:35:48.541Z</updated>
    
    <content type="html"><![CDATA[<p>遇到的坑</p><a id="more"></a><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ol><li><p><a href="https://www.cnblogs.com/duanzhenzhen/p/13045613.html" rel="external nofollow noreferrer">Vue下不同页面匹配不同layout</a></p><ul><li><p>坑点：当我在layout布局页面中为块级元素使用<code>class=header</code>的标签后，所有匹配逻辑会失效，查元素检查器发现该layout被直接应用在页面最外层(Vue甚至没有挂载到App)</p><ul><li><p>解决方法：换个自定义class名</p><div>* 解决方法* 学习</div></li></ul></li></ul></li><li><p>Vue数组变动的渲染</p><p>   <a href="https://cn.vuejs.org/v2/guide/reactivity.html" rel="external nofollow noreferrer">深入Vue响应式原理</a> ：出于性能的考虑，Vue不会对<code>数组[index]= newVal</code> <code>数组.length=newLength</code>进行响应，需要使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">vue.$<span class="hljs-keyword">set</span>(array,index,newVal)<br>vm.items.splice(newLength)<br></code></pre></td></tr></table></figure><p> 等写法触发状态更新。</p><p> 在实际应用中，我们可以在数据改变时利用<code>@change</code>等钩子函数同步一下即可。如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">handleAnswerChange(index: number): <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-comment">// 解决Vue响应式原理中数组更新视图不渲染问题</span><br>  <span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(this.array, index, this.array[index])<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>自己编写的可拖拽组件：<a href="drag-component">查看代码</a></p></li><li><p>利用ElementUI的照片墙样式，定制自己的图片上传组件：根据限制数量限制图片上传按钮的出现，自定义<code>http-request</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"upload-pic"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span><br>      <span class="hljs-attr">action</span>=<span class="hljs-string">""</span><br>      <span class="hljs-attr">list-type</span>=<span class="hljs-string">"picture-card"</span><br>      <span class="hljs-attr">:file-list</span>=<span class="hljs-string">"imgFileList"</span><br>      <span class="hljs-attr">:limit</span>=<span class="hljs-string">"limit"</span><br>      <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123; hide: hideUpload &#125;"</span><br>      <span class="hljs-attr">ref</span>=<span class="hljs-string">"upload"</span><br>      <span class="hljs-attr">name</span>=<span class="hljs-string">"files"</span><br>      <span class="hljs-attr">:on-preview</span>=<span class="hljs-string">"handlePreview"</span><br>      <span class="hljs-attr">:before-upload</span>=<span class="hljs-string">"handleBeforeUpload"</span><br>      <span class="hljs-attr">:http-request</span>=<span class="hljs-string">"handleUpload"</span><br>    &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-plus"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"&#123; file &#125;"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-upload-list__item-thumbnail"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"file.url"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-upload-list__item-actions"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span><br>            <span class="hljs-attr">class</span>=<span class="hljs-string">"el-upload-list__item-preview"</span><br>            @<span class="hljs-attr">click</span>=<span class="hljs-string">"handlePreview(file)"</span><br>          &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-zoom-in"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span><br>            <span class="hljs-attr">v-if</span>=<span class="hljs-string">"!disabled"</span><br>            <span class="hljs-attr">class</span>=<span class="hljs-string">"el-upload-list__item-delete"</span><br>            @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleRemove(file)"</span><br>          &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-delete"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"slotText"</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"tip"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-upload__tip"</span>&gt;</span><br>        &#123;&#123; slotText &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">"dialogVisible"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100%"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"dialogImageUrl"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script lang=<span class="hljs-string">"ts"</span>&gt;<br><span class="hljs-comment">/**<br> * @file 带缩略图的单张照片墙组件<br> * @todo 如果需要扩展为多张照片墙，需修改imgUrl的类型为Array&lt;string&gt;<br> */</span><br><span class="hljs-keyword">import</span> &#123; IObject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"@/@types/common"</span><br><span class="hljs-keyword">import</span> &#123; uploadFileUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"@/api/api"</span><br><span class="hljs-keyword">import</span> &#123; Component, Vue, Prop, Watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-property-decorator"</span><br><span class="hljs-keyword">import</span> &#123; InnerFile &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"@/@types/common"</span><br><br>@Component<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadPic</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Vue</span> </span>&#123;<br>  @Prop()<br>  imgType!: string<br><br>  @Prop()<br>  imgUrl!: string<br><br>  @Prop(&#123; <span class="hljs-attr">default</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span> &#125;)<br>  limit!: number<br><br>  @Prop(&#123; <span class="hljs-attr">default</span>: <span class="hljs-string">"该值"</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span> &#125;)<br>  validateText!: string<br><br>  @Prop(&#123; <span class="hljs-attr">default</span>: <span class="hljs-string">""</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span> &#125;)<br>  slotText!: string<br><br>  dialogImageUrl = <span class="hljs-string">""</span><br>  dialogVisible = <span class="hljs-literal">false</span><br>  hideUpload = <span class="hljs-literal">false</span><br>  disabled = <span class="hljs-literal">false</span> <span class="hljs-comment">//是否显示删除按钮</span><br>  <span class="hljs-attr">imgFileList</span>: InnerFile[] = []<br><br>  mounted(): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-keyword">this</span>.handleimgUrl()<br>  &#125;<br><br>  handleimgUrl(): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.imgUrl &amp;&amp; <span class="hljs-keyword">this</span>.imgUrl != <span class="hljs-string">"defaultimg"</span>) &#123;<br>      <span class="hljs-keyword">const</span> fileName = <span class="hljs-keyword">this</span>.imgUrl.match(<span class="hljs-string">"[^/]+(?!.*/)"</span>)<br>      <span class="hljs-keyword">const</span> fileType = fileName ? fileName[<span class="hljs-number">0</span>] : <span class="hljs-string">""</span><br>      <span class="hljs-keyword">const</span> name = <span class="hljs-keyword">this</span>.$store.getters.userInfo.orgId<br>      <span class="hljs-keyword">this</span>.imgFileList.push(&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-keyword">this</span>.imgType + <span class="hljs-string">"_"</span> + name + <span class="hljs-string">"_"</span> + fileType,<br>        <span class="hljs-attr">url</span>: <span class="hljs-keyword">this</span>.imgUrl<br>      &#125;)<br>      <span class="hljs-keyword">this</span>.hideUpload = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br><br>  handleUpload(config: IObject): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-comment">// 上传时不显示多余的上传框</span><br>    <span class="hljs-keyword">this</span>.hideUpload = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">let</span> fd = <span class="hljs-keyword">new</span> FormData()<br>    fd.append(<span class="hljs-string">"businessName"</span>, <span class="hljs-string">"organization"</span>)<br>    fd.append(<span class="hljs-string">"file"</span>, config.file)<br>    fd.append(<span class="hljs-string">"type"</span>, <span class="hljs-keyword">this</span>.imgType)<br>    uploadFileUser(fd).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (res.code === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">"上传成功"</span>)<br>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">"update:imgUrl"</span>, res.data)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.$message.error(res.msg)<br>        <span class="hljs-keyword">this</span>.hideUpload = <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;)<br>  &#125;<br>  handlePreview(file: InnerFile): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-keyword">this</span>.dialogImageUrl = file.url ? file.url : <span class="hljs-string">""</span><br>    <span class="hljs-keyword">this</span>.dialogVisible = <span class="hljs-literal">true</span><br>  &#125;<br><br>  handleRemove(file: InnerFile): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-keyword">const</span> el = <span class="hljs-keyword">this</span>.$refs.upload <span class="hljs-keyword">as</span> IObject<br>    el.handleRemove(file)<br>    <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">"update:imgUrl"</span>, <span class="hljs-string">""</span>)<br>    <span class="hljs-comment">// HACK 删除后才加载添加框 safari加载520，chrome加载1000</span><br>    <span class="hljs-comment">// setTimeout(() =&gt; &#123;</span><br>    <span class="hljs-keyword">this</span>.hideUpload = <span class="hljs-literal">false</span><br>    <span class="hljs-comment">// &#125;, 520)</span><br>  &#125;<br>  handleBeforeUpload(file: File): boolean &#123;<br>    <span class="hljs-keyword">const</span> isPic = file.type === <span class="hljs-string">"image/png"</span> || <span class="hljs-string">"image/jpeg"</span><br>    <span class="hljs-keyword">const</span> isLt2M = file.size / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> &lt; <span class="hljs-number">10</span><br>    <span class="hljs-keyword">if</span> (!isPic) &#123;<br>      <span class="hljs-keyword">this</span>.$message.error(<span class="hljs-string">"上传图片只能是 JPG 或 PNG 格式!"</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!isLt2M) &#123;<br>      <span class="hljs-keyword">this</span>.$message.error(<span class="hljs-string">"上传头像图片大小不能超过 10MB!"</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> isPic &amp;&amp; isLt2M<br>  &#125;<br>&#125;<br>&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">&lt;style lang="scss"&gt;<br>.upload-pic &#123;<br>  .hide .el-upload--picture-card &#123;<br>    display: none;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ol><li><p>可拖动组件<span id="drag-component"></span></p><p> 坑点：鼠标拖拽绑定到元素会有卡顿，触屏拖拽不会</p><p> 解决方法：绑定到窗口</p></li><li><p>窗口自适应变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span><br>    <span class="hljs-attr">class</span>=<span class="hljs-string">"drag__wrapper"</span><br>    <span class="hljs-attr">ref</span>=<span class="hljs-string">"dragRef"</span><br>    <span class="hljs-attr">:style</span>=<span class="hljs-string">"&#123; top: pos.y + 'px', left: pos.x + 'px' &#125;"</span><br>  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"float"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script lang=<span class="hljs-string">"ts"</span>&gt;<br><span class="hljs-keyword">import</span> &#123; env &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"echarts"</span><br><span class="hljs-keyword">import</span> &#123; Component, Vue, Prop &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-property-decorator"</span><br>@Component<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FloatCounter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Vue</span> </span>&#123;<br>  @Prop(&#123;<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span><br>  &#125;)<br>  position!: &#123;<br>    <span class="hljs-attr">top</span>: number<br>    <span class="hljs-attr">left</span>: number<br>  &#125;<br>  @Prop(&#123;<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;)<br>  dragId!: string<br>  pos = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span><br>  &#125;<br><br>  <span class="hljs-comment">// 可拖拽边界值</span><br>  maxX = <span class="hljs-number">0</span><br>  maxY = <span class="hljs-number">0</span><br>  isDown = <span class="hljs-literal">false</span><br>  mounted(): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-comment">// 组件大小</span><br>    <span class="hljs-keyword">const</span> el = <span class="hljs-keyword">this</span>.$refs.dragRef <span class="hljs-keyword">as</span> Element<br>    <span class="hljs-keyword">const</span> rect = el.getBoundingClientRect()<br>    <span class="hljs-comment">// 组件父元素位置</span><br>    <span class="hljs-keyword">const</span> elParent = el.parentElement <span class="hljs-keyword">as</span> HTMLElement<br>    <span class="hljs-comment">// 组件能移动的位置</span><br>    <span class="hljs-keyword">this</span>.maxX = <span class="hljs-built_in">document</span>.body.clientWidth - rect.width<br>    <span class="hljs-keyword">this</span>.maxY = <span class="hljs-built_in">document</span>.body.clientHeight - rect.height<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.position) &#123;<br>      <span class="hljs-keyword">this</span>.handleSlide(<br>        elParent.offsetLeft + elParent.clientWidth - rect.width,<br>        elParent.offsetTop + elParent.clientHeight - rect.height<br>      )<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">this</span>.handleSlide(<span class="hljs-keyword">this</span>.position.left, <span class="hljs-keyword">this</span>.position.top)<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> drag = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-keyword">this</span>.dragId) <span class="hljs-keyword">as</span> HTMLElement<br>    <span class="hljs-keyword">let</span> isMove = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">let</span> mouseX = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> mouseY = <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 鼠标拖拽 绑定到document，否则容易出现延迟</span><br>    drag.onmousedown = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>      isMove = <span class="hljs-literal">true</span><br>      <span class="hljs-keyword">const</span> event = e || <span class="hljs-built_in">window</span>.event<br>      <span class="hljs-keyword">const</span> rect = el.getBoundingClientRect()<br>      <span class="hljs-keyword">this</span>.maxX = <span class="hljs-built_in">document</span>.body.clientWidth - rect.width<br>      <span class="hljs-keyword">this</span>.maxY = <span class="hljs-built_in">document</span>.body.clientHeight - rect.height<br>      <span class="hljs-comment">// 获取鼠标的位置，兼容多浏览器</span><br>      mouseX = event.pageX ? event.pageX : event.clientX<br>      mouseY = event.pageY ? event.pageY : event.clientY<br>      <span class="hljs-comment">// 获取当前元素位置</span><br>      mouseX -= drag.getBoundingClientRect().left<br>      mouseY -= drag.getBoundingClientRect().top<br>      <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (isMove) &#123;<br>          <span class="hljs-keyword">const</span> event = e || <span class="hljs-built_in">window</span>.event<br>          <span class="hljs-keyword">const</span> ox = event.pageX ? event.pageX : event.clientX<br>          <span class="hljs-keyword">const</span> oy = event.pageY ? event.pageY : event.clientY<br><br>          <span class="hljs-keyword">this</span>.handleSlide(<br>            <span class="hljs-built_in">Math</span>.max(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.min(ox - mouseX, <span class="hljs-keyword">this</span>.maxX)),<br>            <span class="hljs-built_in">Math</span>.max(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.min(oy - mouseY, <span class="hljs-keyword">this</span>.maxY))<br>          )<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      isMove = <span class="hljs-literal">false</span><br>      <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-literal">null</span><br>    &#125;<br>    <span class="hljs-comment">// 触屏拖拽 绑定到对象本身</span><br>    drag.addEventListener(<span class="hljs-string">"touchstart"</span>, e =&gt; &#123;<br>      isMove = <span class="hljs-literal">true</span><br>      <span class="hljs-keyword">const</span> rect = el.getBoundingClientRect()<br>      <span class="hljs-keyword">this</span>.maxX = <span class="hljs-built_in">document</span>.body.clientWidth - rect.width<br>      <span class="hljs-keyword">this</span>.maxY = <span class="hljs-built_in">document</span>.body.clientHeight - rect.height<br>      <span class="hljs-comment">// 获取触点的位置</span><br>      <span class="hljs-keyword">const</span> event = e || <span class="hljs-built_in">window</span>.event<br>      <span class="hljs-keyword">const</span> touch = event.touches[<span class="hljs-number">0</span>]<br>      mouseX = touch.clientX - drag.getBoundingClientRect().left<br>      mouseY = touch.clientY - drag.getBoundingClientRect().top<br>    &#125;)<br>    drag.addEventListener(<span class="hljs-string">"touchmove"</span>, e =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (isMove) &#123;<br>        <span class="hljs-keyword">const</span> event = e || <span class="hljs-built_in">window</span>.event<br>        <span class="hljs-keyword">const</span> touch = event.touches[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">const</span> ox = touch.pageX ? touch.pageX : touch.clientX<br>        <span class="hljs-keyword">const</span> oy = touch.pageY ? touch.pageY : touch.clientY<br>        <span class="hljs-keyword">this</span>.handleSlide(<br>          <span class="hljs-built_in">Math</span>.max(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.min(ox - mouseX, <span class="hljs-keyword">this</span>.maxX)),<br>          <span class="hljs-built_in">Math</span>.max(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.min(oy - mouseY, <span class="hljs-keyword">this</span>.maxY))<br>        )<br>        e.preventDefault()<br>      &#125;<br>    &#125;)<br>    drag.addEventListener(<span class="hljs-string">"touchend"</span>, () =&gt; &#123;<br>      isMove = <span class="hljs-literal">false</span><br>    &#125;)<br><br>    <span class="hljs-comment">// 自适应窗口变化</span><br>    <span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">(</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> rect = el.getBoundingClientRect()<br>        <span class="hljs-keyword">this</span>.maxX = <span class="hljs-built_in">document</span>.body.clientWidth - rect.width<br>        <span class="hljs-keyword">this</span>.maxY = <span class="hljs-built_in">document</span>.body.clientHeight - rect.height<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.position) &#123;<br>          <span class="hljs-keyword">const</span> elParent = el.parentElement <span class="hljs-keyword">as</span> HTMLElement<br>          <span class="hljs-keyword">this</span>.handleSlide(<br>            elParent.offsetLeft + elParent.clientWidth - rect.width,<br>            elParent.offsetTop + elParent.clientHeight - rect.height<br>          )<br>        &#125;<br>      &#125;)()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 移动组件位置</span><br>  handleSlide(desX: number, <span class="hljs-attr">desY</span>: number): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-keyword">this</span>.pos.x = desX<br>    <span class="hljs-keyword">this</span>.pos.y = desY<br>  &#125;<br>&#125;<br>&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h2><ol><li><p>选择框</p><ol><li><p>el-radio：选项超出宽度自动换行，换行后自动缩进和顶端对齐：<a href="#el-radio-label">点击跳转到样式部分查看代码</a></p></li><li><p>el-checkbox：存在bug，使用时需绑定<code>checked</code>选中状态才能实时响应</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-checkbox<br>               v-<span class="hljs-keyword">for</span>=<span class="hljs-string">"answer in question.answer"</span><br>               :key=<span class="hljs-string">"answer.option"</span><br>               :label=<span class="hljs-string">"answer.option"</span><br>               <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"horizon"</span><br>               :checked=<span class="hljs-string">"checked"</span><br>               @change=<span class="hljs-string">"checked = !checked"</span><br>             &gt;<br>             &#123;&#123; answer.content &#125;&#125;<br>&lt;<span class="hljs-regexp">/el-checkbox&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>El-Image：相对路径引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-image</span><br>          <span class="hljs-attr">:src</span>=<span class="hljs-string">"require('@/assets/questionair/top.png')"</span><br>          <span class="hljs-attr">fit</span>=<span class="hljs-string">"fill"</span><br>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-image</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ol><li><p>块元素的垂直居中：老生常谈</p><p> 网络上大量“7种垂直居中的方法”“14种垂直居中的方法”，实际运用中大量绝对定位的方法都可以忽略不计。<a href="https://blog.csdn.net/CSDN_bare/article/details/108117295" rel="external nofollow noreferrer">常用的几种方法</a></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// span块</span><br><span class="hljs-selector-class">.span</span>&#123;<br>  <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-comment">// 转为块元素</span><br>  <span class="hljs-attribute">text-align</span>: center; <span class="hljs-comment">// 水平居中</span><br>  <span class="hljs-attribute">line-height</span>：值为所需对齐的<span class="hljs-selector-tag">div</span>块高度; <span class="hljs-comment">// 垂直居中</span><br>&#125;<br><span class="hljs-comment">// flex布局</span><br><span class="hljs-selector-class">.divParent</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex; <br>  <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">// 水平 </span><br>  <span class="hljs-attribute">align-items</span>: center; <span class="hljs-comment">// 垂直</span><br>&#125;<br><span class="hljs-comment">// 定位居中</span><br><span class="hljs-selector-class">.name</span>&#123;<br>  <span class="hljs-attribute">background</span>:<span class="hljs-number">#eee</span>;<br>  <span class="hljs-attribute">position</span>:absolute;<br>  <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: translate(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>   其他还有：<a href="https://segmentfault.com/a/1190000008175320" rel="external nofollow noreferrer">利用table的方法</a></p></li><li><p>文本溢出自动换行，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space" rel="external nofollow noreferrer">应用<code>white-space</code>属性</a> <span id="el-radio-label"></span></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.el-radio__label</span> &#123;<br>   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>   <span class="hljs-attribute">color</span>: <span class="hljs-number">#5e6166</span>;<br>   <span class="hljs-attribute">line-height</span>: <span class="hljs-number">22px</span>;<br>   <span class="hljs-comment">// 解决选项溢出问题</span><br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>   <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>   <span class="hljs-attribute">white-space</span>: normal;<br>  <span class="hljs-comment">// 解决溢出行缩进</span><br>   <span class="hljs-attribute">display</span>: inline-block;<br>   <span class="hljs-attribute">vertical-align</span>: top;<br> &#125;<br> <span class="hljs-selector-class">.el-radio__input</span> &#123;<br>   <span class="hljs-comment">// 对其label文字</span><br>   <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2px</span>;<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p><a href="https://github.com/o2team/H5Skills/issues/75" rel="external nofollow noreferrer">行内块inline-block与行内文本span的对齐</a></p><p> 字体衬线导致即使设置了字体的<code>line-height</code>与块元素<code>height</code>相同，使用<code>verticle-align:middle</code>后两者也不能再同一水平线上。可以使用顶端对齐块元素向下偏移2px的方法</p></li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li><p>排序拖拽组件：<a href="https://github.com/SortableJS/Vue.Draggable" rel="external nofollow noreferrer">sortable draggable </a> </p></li><li><p>markdown组件</p><ol><li><p><a href="http://ckang1229.gitee.io/vue-markdown-editor/zh/" rel="external nofollow noreferrer">vue-markdown-editor</a></p></li><li><p><a href="https://github.com/ravenq/markdown-it-vue" rel="external nofollow noreferrer">markdown-it-vue</a></p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到的坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="vue" scheme="https://www.annewqx.top/tags/vue/"/>
    
      <category term="ElementUI" scheme="https://www.annewqx.top/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>编译原理与设计-Lab5-语法分析实验</title>
    <link href="https://www.annewqx.top/posts/1742/"/>
    <id>https://www.annewqx.top/posts/1742/</id>
    <published>2020-04-14T13:08:30.000Z</published>
    <updated>2022-07-20T06:39:27.034Z</updated>
    
    <content type="html"><![CDATA[<p>选择 C 语言的一个子集，基于 BIT-MiniCC 构建 C 语法子集的语法分 析器，该语法分析器能够读入词法分析器输出的存储在文件中的属性字符流，进 行语法分析并进行错误处理，如果输入正确时输出 JSON 格式的语法树，输入不正确时报告语法错误。</p><a id="more"></a><h2 id="实现的具体过程和步骤"><a href="#实现的具体过程和步骤" class="headerlink" title="实现的具体过程和步骤"></a>实现的具体过程和步骤</h2><h3 id="1-定义C语言子集"><a href="#1-定义C语言子集" class="headerlink" title="1 定义C语言子集"></a>1 定义C语言子集</h3><blockquote><p>参照后续给出的文法，扩充定义自己希望实现的 C 语言语法子集。参考文法只给出了函数定义以及简单的表达式相关的文法。局部变量声明、分支语 句以及循环语句等需要自己进行扩充。采用自顶向下的分析方法时，不能有左递归，避免文法产生式的多个候选式存在公共因子。如果出现左递归或者公共因子， 则可以通过文法等价变换进行消除。</p></blockquote><h4 id="1-根据C11的语法规则编写C语言子集"><a href="#1-根据C11的语法规则编写C语言子集" class="headerlink" title="1 根据C11的语法规则编写C语言子集"></a>1 根据C11的语法规则编写C语言子集</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs c">statement<br>    :   labeledStatement<br>    |   compoundStatement<br>    |   expressionStatement<br>    |   selectionStatement<br>    |   iterationStatement<br>    |   jumpStatement<br>    ;<br>assignmentOperator<br>    :   '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;=' | '^=' | '|='<br>    ;<br>expressionStatement<br>    :   expression? ';'<br>    ;<br>expression<br>    :   assignmentExpression<br>    |   expression ',' assignmentExpression<br>    ;<br>compoundStatement<br>    :   '&#123;' blockItemList? '&#125;'<br>    ;<br>iterationStatement<br>    :   'while' '(' expression ')' statement<br>    |   'do' statement 'while' '(' expression ')' ';'<br>    |   'for' '(' expression? ';' expression? ';' expression? ')' statement<br>    |   'for' '(' declaration expression? ';' expression? ')' statement<br>    ;<br>selectionStatement<br>    :   'if' '(' expression ')' statement ('else' statement)?<br>    |   'switch' '(' expression ')' statement<br>    ;<br>jumpStatement<br>    :   'goto' Identifier ';'<br>    |   'continue' ';'<br>    |   'break' ';'<br>    |   'return' expression? ';'<br>    |   'goto' unaryExpression ';' // GCC extension<br>    ;<br>labeledStatement<br>    :   Identifier ':' statement<br>    |   'case' constantExpression ':' statement<br>    |   'default' ':' statement<br>    ;<br><br>    // 局部变量声明<br>declarationList<br>    :   declaration<br>    |   declarationList declaration<br>    ;<br>declarationSpecifier<br>    :   storageClassSpecifier<br>    |   typeSpecifier<br>    |   typeQualifier<br>    |   functionSpecifier<br>    |   alignmentSpecifier<br>    ;<br>initDeclaratorList<br>    :   initDeclarator<br>    |   initDeclaratorList ',' initDeclarator<br>    ;<br>initDeclarator<br>    :   declarator<br>    |   declarator '=' initializer<br>    ;<br>declarator<br>    :   pointer? directDeclarator gccDeclaratorExtension*<br>    ;<br>directDeclarator<br>    :   Identifier<br>    |   '(' declarator ')'<br>    ;<br>storageClassSpecifier<br>    :   'typedef'<br>    |   'extern'<br>    |   'static'<br>    |   '_Thread_local'<br>    |   'auto'<br>    |   'register'<br>    ;<br>typeSpecifier<br>    :   ('void'<br>    |   'char'<br>    |   'short'<br>    |   'int'<br>    |   'long'<br>    |   'float'<br>    |   'double'<br>    |   'signed'<br>    |   'unsigned'<br>    |   '_Bool'<br>    ;<br>typeQualifier<br>    :   'const'<br>    ;<br>pointer<br>    :   '*' typeQualifierList?<br>    ;<br>initializer<br>    :   assignmentExpression<br>    |   '&#123;' initializerList '&#125;'<br>    |   '&#123;' initializerList ',' '&#125;'<br>    ;<br>initializerList<br>    :   designation? initializer<br>    |   initializerList ',' designation? initializer<br>    ;<br>assignmentExpression<br>    :   conditionalExpression<br>    |   unaryExpression assignmentOperator assignmentExpression<br>    ;<br>// 赋值语句<br>conditionalExpression<br>    :   logicalOrExpression ('?' expression ':' conditionalExpression)?<br>    ;<br>logicalAndExpression<br>    :   inclusiveOrExpression<br>    |   logicalAndExpression '&amp;&amp;' inclusiveOrExpression<br>    ;<br>logicalOrExpression<br>    :   logicalAndExpression<br>    |   logicalOrExpression '||' logicalAndExpression<br>    ;<br>unaryExpression<br>    :   postfixExpression<br>    |   '++' unaryExpression<br>    |   '--' unaryExpression<br>    |   unaryOperator castExpression<br>    |   'sizeof' unaryExpression<br>    |   'sizeof' '(' typeName ')'<br>    ;<br>unaryOperator<br>    :   '&amp;' | '*' | '+' | '-' | '~' | '!'<br>    ;<br>constantExpression<br>    :   conditionalExpression<br>    ;<br>expression<br>    :   assignmentExpression<br>    |   expression ',' assignmentExpression<br>    ;<br>postfixExpression<br>    :   primaryExpression<br>    |   postfixExpression '[' expression ']'<br>    |   postfixExpression '(' argumentExpressionList? ')'<br>    |   postfixExpression '.' Identifier<br>    |   postfixExpression '-&gt;' Identifier<br>    |   postfixExpression '++'<br>    |   postfixExpression '--'<br>    ;<br></code></pre></td></tr></table></figure><h4 id="2-消除左递归"><a href="#2-消除左递归" class="headerlink" title="2 消除左递归"></a>2 消除左递归</h4><ul><li><p>expression</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">expression<br>    :   assignmentExpression<br>    |   expression <span class="hljs-string">','</span> assignmentExpression<br>    ;<br></code></pre></td></tr></table></figure><p>  exp本身不符合LL(0)文法规则，需要消除左递归，消除后expression和expression+分别对应</p></li><li><p>assignmentExpression</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">assignmentExpression<br>    :   conditionalExpression<br>    |   unaryExpression assignmentOperator assignmentExpression<br>    ;<br></code></pre></td></tr></table></figure><p>  conditionalExpression的FIRST几核中包含了unaryExpression的FIRST集合，不符合LL(0)文法规法。BITMiniCC中，对于ASTBinaryExpression节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ASTToken op;<br><span class="hljs-keyword">public</span> ASTExpression expr1;<br><span class="hljs-keyword">public</span> ASTExpression expr2;<br></code></pre></td></tr></table></figure><p>  分别对应assignmentOperator，unaryExpression，assignmentExpression</p></li><li><p>postfixExpression</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">postfixExpression<br>    :   primaryExpression<br>    |   postfixExpression '[' expression ']'<br>    |   postfixExpression '(' argumentExpressionList? ')'<br>    |   postfixExpression '.' Identifier<br>    |   postfixExpression '-&gt;' Identifier<br>    |   postfixExpression '++'<br>    |   postfixExpression '--'<br>    ;<br></code></pre></td></tr></table></figure></li><li><p>argumentExpressionList</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">argumentExpressionList<br>    :   assignmentExpression<br>    |   argumentExpressionList <span class="hljs-string">','</span> assignmentExpression<br>    ;<br></code></pre></td></tr></table></figure><p>  简化为只有一个参数</p></li></ul><h3 id="2-JAVA实现语法分析器"><a href="#2-JAVA实现语法分析器" class="headerlink" title="2 JAVA实现语法分析器"></a>2 JAVA实现语法分析器</h3><blockquote><p>从递归下降分析方法、LL(1)分析方法、LR 分析方法中选择一种算法， 基于 BIT-MiniCC 设计并实现语法分析器。可以使用 ANTLR，也可以手动编码实现。语法分析的输入为词法分析的输 出，因此语法分析器首先要读入 xxx.tokens 文件;在分析的过程中构建语法树。</p></blockquote><h3 id="3-将语法树输出为-JSON-文件"><a href="#3-将语法树输出为-JSON-文件" class="headerlink" title="3 将语法树输出为 JSON 文件"></a>3 将语法树输出为 JSON 文件</h3><p>未完成</p><h2 id="运行效果截图"><a href="#运行效果截图" class="headerlink" title="运行效果截图"></a>运行效果截图</h2><ol><li><p>test0</p><p> <img src="/posts/1742/Screenshot2020-04-16%2000.10.22.png" alt="Example"></p></li><li><p>test1</p><p> <img src="/posts/1742/Screenshot2020-04-16%2000.17.47.png" alt="Screenshot2020-04-16 00.17.47"></p><p> 放大</p><p> <img src="/posts/1742/Screenshot2020-04-16%2000.15.33.png" alt="Screenshot2020-04-16 00.15.33"></p></li><li><p>test2</p><p> <img src="/posts/1742/Screenshot2020-04-16%2000.25.24.png" alt="Screenshot2020-04-16 00.25.24"></p></li><li><p>test3</p><p> <img src="/posts/1742/Screenshot2020-04-16%2000.27.54.png" alt="Screenshot2020-04-16 00.27.54"></p></li></ol><h2 id="实验心得体会"><a href="#实验心得体会" class="headerlink" title="实验心得体会"></a>实验心得体会</h2><ul><li>这次实验对我来说是前所未有的挑战，看懂框架的文法、参照框架和C语言标准实现语法分析器，在编程能力、数据结构、文法基本理解各方面上都有很大的挑战。</li><li>首先是对知识的运用，知识基础之薄弱在应用时原形毕露，</li><li>在编码过程我遇到了很多问题，反复调试了很多次都无法正确的运行。树生成失败，空指针，对象初始化等等问题层出不穷，一方面是本身对于框架的研究不够，另一方面也是没有严谨编程习惯</li><li>这次实验我投入的时间和精力并不足以达到完成这个实验的要求</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;选择 C 语言的一个子集，基于 BIT-MiniCC 构建 C 语法子集的语法分 析器，该语法分析器能够读入词法分析器输出的存储在文件中的属性字符流，进 行语法分析并进行错误处理，如果输入正确时输出 JSON 格式的语法树，输入不正确时报告语法错误。&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="编译原理" scheme="https://www.annewqx.top/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>密码学应用和加密货币实践</title>
    <link href="https://www.annewqx.top/posts/4542/"/>
    <id>https://www.annewqx.top/posts/4542/</id>
    <published>2020-03-29T07:27:21.000Z</published>
    <updated>2022-07-20T06:39:07.884Z</updated>
    
    <content type="html"><![CDATA[<p>Ether</p><a id="more"></a><h2 id="传输数据加密初探"><a href="#传输数据加密初探" class="headerlink" title="传输数据加密初探"></a>传输数据加密初探</h2><ul><li>PPP协议的pap验证：明文传输验证的用户名和密码</li></ul><p><img src="/posts/4542/image-20200329153012935.png" alt="image-20200329153012935"></p><ul><li>PPP协议的chap验证：密文传输密码</li></ul><p><img src="/posts/4542/image-20200329152934684.png" alt="image-20200329152934684"></p><h2 id="实践：发行虚拟货币"><a href="#实践：发行虚拟货币" class="headerlink" title="实践：发行虚拟货币"></a>实践：发行虚拟货币</h2><blockquote><p>以太坊工具：<a href="https://ethfans.org/wikis/Ethereum-Geth-Mirror" rel="external nofollow noreferrer">https://ethfans.org/wikis/Ethereum-Geth-Mirror</a></p><p>运行环境：macOS 10.15.4 / geth 1.8.3</p></blockquote><ol><li><p>进入终端，新建挖矿目录<code>mkdir mine</code>，将下载的可执行文件<code>geth</code>放到这个目录下，进入该目录，</p></li><li><p>新建挖矿数据的目录并初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir mycoin<br>vim test.json<br>geth --datadir=<span class="hljs-string">"mycoin"</span> init <span class="hljs-string">"test.json"</span><br></code></pre></td></tr></table></figure><blockquote><p><code>test.json</code>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br> <span class="hljs-attr">"config"</span>: &#123;<br>       <span class="hljs-attr">"chainId"</span>:<span class="hljs-number">666</span>,<br>       <span class="hljs-attr">"homesteadBlock"</span>: <span class="hljs-number">0</span>,<br>       <span class="hljs-attr">"eip150Block"</span>: <span class="hljs-number">0</span>,<br>       <span class="hljs-attr">"eip155Block"</span>: <span class="hljs-number">0</span>,<br>       <span class="hljs-attr">"eip158Block"</span>: <span class="hljs-number">0</span><br>   &#125;,<br> <span class="hljs-attr">"alloc"</span>      : &#123;&#125;,<br> <span class="hljs-attr">"difficulty"</span> : <span class="hljs-string">"0x400"</span>,<br> <span class="hljs-attr">"extraData"</span>  : <span class="hljs-string">""</span>,<br> <span class="hljs-attr">"gasLimit"</span>   : <span class="hljs-string">"0x7A1200"</span>,<br> <span class="hljs-attr">"parentHash"</span> : <span class="hljs-string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,<br> <span class="hljs-attr">"timestamp"</span>  : <span class="hljs-string">"0x00"</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>进入后台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">geth --networkid <span class="hljs-string">"30"</span> --nodiscover --datadir=<span class="hljs-string">"mycoin"</span> console 2&gt;&gt; <span class="hljs-string">"mycoin"</span>/<span class="hljs-string">"err.log"</span><br></code></pre></td></tr></table></figure></li><li><p>查看指定区块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eth.getBlock(0)<br></code></pre></td></tr></table></figure><p> <img src="/posts/4542/Screenshot2020-03-29%2016.38.27.png" alt="Screenshot2020-03-29 16.38.27"></p></li><li><p>创建账户并查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">personal.newAccount(<span class="hljs-string">"pay"</span>)     <span class="hljs-comment"># 括号里是密码</span><br>personal.newAccount(<span class="hljs-string">"collect"</span>)<br>eth.accounts<br></code></pre></td></tr></table></figure></li><li><p>模拟挖矿</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置挖矿地址，缺省则为第一个</span><br>eth.coinbase<br><span class="hljs-comment"># 查看账户余额</span><br>eth.getBalance(eth.accounts[0])<br><span class="hljs-comment"># 开始挖矿</span><br>miner.start()<br><span class="hljs-comment"># 结束挖矿：</span><br>miner.stop()<br><span class="hljs-comment"># 查看挖矿状态：</span><br>miner.getHashrate()<br></code></pre></td></tr></table></figure><p> <img src="/posts/4542/Screenshot2020-03-29%2016.51.21.png" alt="acounts[1]中余额增加"></p><blockquote><p><a href="https://mp.weixin.qq.com/s/AB9vj1EzOgWT7JyryfQhDg?" rel="external nofollow noreferrer"><code>miner.start()</code>返回null：</a></p><ul><li>geth-1.7.3以上版本的节点，在dev环境下执行miner.start()时，返回null。但其实miner已经执行。使用<code>eth.blockNumber</code>可查看到区块高度在增加</li></ul><p><a href="https://github.com/ethereum/go-ethereum/wiki/mining" rel="external nofollow noreferrer"><code>miner.getHashrate</code>返回0：</a></p><ul><li><p>macOS上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.29_mac.pkg<br>sudo installer -pkg ~/Desktop/cuda_7.0.29_mac.pkg -target /<br>brew update<br>brew tap ethereum/ethereum<br>brew reinstall cpp-ethereum --with-gpu-mining --devel --headless --build-from-source<br></code></pre></td></tr></table></figure></li><li><p>执行命令查看挖矿状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aticonfig --adapter=0 --od-gettemperature<br></code></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>转账</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解锁账户</span><br>personal.unlockAccount(eth.accounts[0], <span class="hljs-string">"pay"</span>)<br>personal.unlockAccount(eth.accounts[1], <span class="hljs-string">"collect"</span>)<br><span class="hljs-comment"># 转账</span><br>eth.sendTransaction(&#123;from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1, <span class="hljs-string">"ether"</span>)&#125;)<br><span class="hljs-comment"># 查看交易</span><br>eth.pendingTransactions<br><span class="hljs-comment"># 继续挖矿，进而完成交易</span><br>miner.start()<br></code></pre></td></tr></table></figure><p> <img src="/posts/4542/Screenshot2020-03-29%2016.58.33.png" alt="accounts[1]中增加1个单位"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ether&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="密码学" scheme="https://www.annewqx.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>编译原理与设计-Lab4-文法设计实验</title>
    <link href="https://www.annewqx.top/posts/33846/"/>
    <id>https://www.annewqx.top/posts/33846/</id>
    <published>2020-03-23T07:05:17.000Z</published>
    <updated>2022-07-20T06:54:56.559Z</updated>
    
    <content type="html"><![CDATA[<p>阅读C11-C规范标准文件并按照规范选择C语言子集，使用BNF文法描述。</p><a id="more"></a><blockquote><p><a href="/file/C11-C.pdf">下载C11-C规范标准文件</a></p><p><a href="/file/jls12.pdf">下载Java SE12规范标准文件</a></p></blockquote><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><ol><li>阅读附件提供的 C 语言和 Java 语言的规范草稿，了解语言规范化定义 应包括的具体内容。</li><li>选定 C 语言子集，并使用 BNF 表示方法文法进行描述，要求至少包括 表达式、赋值语句、分支语句和循环语句；或者设计一个新的程序设计语言，并 使用文法对该语言的词法规则和文法规则进行描述。</li></ol><h2 id="实验过程与方法"><a href="#实验过程与方法" class="headerlink" title="实验过程与方法"></a>实验过程与方法</h2><p>本次实验提供 C 语言和 Java 语言的规范草稿，参考相关内容完成语言的设计和定义工作。此外，可以使用 ANTLRWorks 辅助完成语法的设计工作。</p><h2 id="理解语言规范"><a href="#理解语言规范" class="headerlink" title="理解语言规范"></a>理解语言规范</h2><blockquote><p>语言标准规范是每个语言的说明文档，定义了语言的字符集、词法规则、语法规则和语义规则，也包括了对程序结构、编译过程、标准库程序以及语言实现等各方面的内容。一个标准规范描述为不同视角的参与者提供了一个一致的参考标准，例如程序员可以根据规范标准编写程序，系统设计者则可以根据这一标准 规范设计编译器、完成运行时环境和库的构造和实现。由于编译器基于同一标准 规范设计，因此才能对程序员编写完成的各式各样的程序进行不同层面验证，并 将其最终翻译为目标代码。同理，所有的程序设计人员都基于同一个标准设计程 序，按照给定的接口调用库函数，因此大家才能交换共享并理解对方的代码，并协同工作完成大规模软件项目的开发。</p></blockquote><p>C语言提出之后呢，随着技术的不断发展，曾经衍生过不同的版本，也就是C语言的不同标准规范。这里我们使用C11-C标准规范来分析。、语法规则和语义规则，也包括了对程序结构、编译过程、标准库程序以及语言实现</p><ul><li>语言的字符集。字符集是一个语言中所有可出现字符的集合。C11-C的P40页(chap 5.2)中，给出了可使用的字符集合，源代码字符集(source character set)和运行字符集 (execution character set)两种，分别在C语言源码和执行程序中使用，这两个字符集又各自被分为基本字符集(basic character set)和拓展字符集(estended character set)。字符集是设计分割源代码的有限自动机的基础；</li><li>语言的词法规则。P76(chap6.4 Lexical element)开始，给出了所有词法元素：<ul><li>词法分析中的token：关键字 keyword， identifier， constant， string-literal， punctuation；</li><li>预处理的token：头文件名，标识符，pp-number，字符常量，字符串字面量、分隔符和任何不能匹配上述规则的非空白字符</li></ul></li><li>语言的语义规则：P94(chap6.5~6.10)：给出详细的语义规则。</li><li>这份规范中甚至还给出了对C语言未来发展方向的指导。</li></ul><p>阅读关于一个程序设计语言的标准是一件非常痛苦的事情，C11-C标准规范的正文的长度大约有670页，阅读这样一份标准确实需要很多的时间。但这份规范所包涵的内容极广，无论是语言书写者阅读还是为语言设计提供参考都是一份和好的材料。</p><p>在C11-C标准规范的p476开始，给出了C语言的句法规范总结<strong>Language syntax summary</strong> 。我们使用BNF描述C语言，依据的正是这个规范总结，规范总结中对于C语言的描述大概是下面这样:</p><img src="/posts/33846/Screenshot2020-03-2318.17.38.png" alt="分支语句" style="zoom:33%;"><p>这个描述的意思是，对于分支语句，一共有三种格式if，if-else，switch。并且这个描述在语法上对每个格式里各部分组成进行了明确定义。之后按照语法规则得到的结构又被分割为一个个的token和词法分析。这就是一个分支语句。</p><p>在C语言的标准规范中不仅仅针对语言本身，更明确了C语言源代码到转译为可执行程序的每一步，以及每一步里的数据结构，转换方法、存储进行了严格说明。C语言规范保证了语言的严谨性，尽力消除歧义。但这份规范中也存在较为宽泛的问题。比如说数据类型，它定义 long型数据长度不短于 int 型，short 型不长于 int 型。这会导致对于 int 型的变量，在 Turbo C 里面它占16位。 然而在VC 里面，一个整型变量却占有32位。在不同的开发平台上关于整型变量的定义不同，导致相同的程序在不同的编译器上运行 可能会有不同的解释 从而造成相同的程序在不同的平台上的运行结果也有可能是不同的。</p><h2 id="C语言文法设计报告"><a href="#C语言文法设计报告" class="headerlink" title="C语言文法设计报告"></a>C语言文法设计报告</h2><h3 id="字母表"><a href="#字母表" class="headerlink" title="字母表"></a>字母表</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 非数字 Nondigits</span><br>    <span class="hljs-string">a..z|A..Z</span><br><span class="hljs-comment"># 数字 Digits</span><br>    <span class="hljs-number">0</span><span class="hljs-string">..9</span><br><span class="hljs-comment"># 29个符号：</span><br>    <span class="hljs-string">!"#%&amp;'()*+,-./:</span> <span class="hljs-string">;&lt;=&gt;?[\]^_&#123;|&#125;~</span><br></code></pre></td></tr></table></figure><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><blockquote><p>使用ANTLR文法描述方法</p><p>以下将使用ANTLR文法描述C语言的语法规则。ANTLR输入文法是一种扩展的 BNF 表示方法。以下的文法规则并不完整， declaration和 functionDefinition的文法较为庞杂，在此不表。</p><p>语法分析的终结符一共有5种：关键字 keyword /标识符 Identifier /字符串字面量 StringLiteral /常量 Constant /分隔符及运算符 punctuator，即词法分析得到的5种token。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">// 文法分析入口<br>translationUnit<br>    :   externalDeclaration<br>    |   translationUnit externalDeclaration<br>    ;<br>externalDeclaration<br>    :   functionDefinition<br>    |   declaration<br>    |   ';' // stray ;<br>    ;<br>// 语句类型<br>statement<br>    :   labeledStatement<br>    |   compoundStatement<br>    |   expressionStatement<br>    |   selectionStatement<br>    |   iterationStatement<br>    |   jumpStatement<br>    |   ('__asm' | '__asm__') ('volatile' | '__volatile__') '(' (logicalOrExpression (',' logicalOrExpression)*)? (':' (logicalOrExpression (',' logicalOrExpression)*)?)* ')' ';'<br>    ;<br></code></pre></td></tr></table></figure><h4 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h4><p>赋值语句，语法成分为 assignmentExpression ，有两种类型</p><ol><li><p>条件表达式 conditionalExpression ，因为用多元运算符也可以对变量进行赋值操作</p></li><li><p>一元表达式 unaryExpression +赋值运算符 assignmentOperator +赋值语句 assignmentExpression</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c">// 赋值语句<br>assignmentExpression<br>    :   conditionalExpression<br>    |   unaryExpression assignmentOperator assignmentExpression<br>    ;<br>// 赋值运算符<br>assignmentOperator<br>    :   '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '&lt;&lt;=' | '&gt;&gt;=' | '&amp;=' | '^=' | '|='<br>    ;<br>// 判断语句<br>conditionalExpression<br>    :   logicalOrExpression ('?' expression ':' conditionalExpression)?<br>    ;<br>// 逻辑语句<br>logicalAndExpression<br>    :   inclusiveOrExpression<br>    |   logicalAndExpression '&amp;&amp;' inclusiveOrExpression<br>    ;<br>logicalOrExpression<br>    :   logicalAndExpression<br>    |   logicalOrExpression '||' logicalAndExpression<br>    ;<br>// 一元表达式<br>unaryExpression<br>    :   postfixExpression<br>    |   '++' unaryExpression<br>    |   '--' unaryExpression<br>    |   unaryOperator castExpression<br>    |   'sizeof' unaryExpression<br>    |   'sizeof' '(' typeName ')'<br>    |   '_Alignof' '(' typeName ')'<br>    |   '&amp;&amp;' Identifier // GCC extension address of label<br>    ;<br>// 一元运算符<br>unaryOperator<br>    :   '&amp;' | '*' | '+' | '-' | '~' | '!'<br>    ;<br>postfixExpression<br>    :   primaryExpression<br>    |   postfixExpression '[' expression ']'<br>    |   postfixExpression '(' argumentExpressionList? ')'<br>    |   postfixExpression '.' Identifier<br>    |   postfixExpression '-&gt;' Identifier<br>    |   postfixExpression '++'<br>    |   postfixExpression '--'<br>    |   '(' typeName ')' '&#123;' initializerList '&#125;'<br>    |   '(' typeName ')' '&#123;' initializerList ',' '&#125;'<br>    |   '__extension__' '(' typeName ')' '&#123;' initializerList '&#125;'<br>    |   '__extension__' '(' typeName ')' '&#123;' initializerList ',' '&#125;'<br>    ;<br></code></pre></td></tr></table></figure><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">expression<br>    :   assignmentExpression<br>    |   expression <span class="hljs-string">','</span> assignmentExpression<br>    ;<br></code></pre></td></tr></table></figure><h4 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h4><p>分支语句，语法成分为 selectionStatement ，有三种类型(ANTLR简写为两种)</p><ol><li>关键字<code>if</code>开头，expression 作为判断条件，然后是执行的结构体 statement ；如果只有有else关键字，则还有一个执行的结构体  statement</li><li>关键字<code>switch</code>开头， expression作为判断条件，然后是执行的结构体 statement</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">selectionStatement</span><br>    <span class="hljs-string">:</span>   <span class="hljs-string">'if'</span> <span class="hljs-string">'('</span> <span class="hljs-string">expression</span> <span class="hljs-string">')'</span> <span class="hljs-string">statement</span> <span class="hljs-string">('else'</span> <span class="hljs-string">statement)?</span><br>    <span class="hljs-string">|</span>   <span class="hljs-string">'switch'</span> <span class="hljs-string">'('</span> <span class="hljs-string">expression</span> <span class="hljs-string">')'</span> <span class="hljs-string">statement</span><br>    <span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>循环语句，语法成分为&lt; Iteration-statement，有四种类型</p><ol><li><code>while</code>：<code>while</code>关键字开头，其后 expression 为条件， statement 为执行结构体</li><li><code>do-while</code>：<code>do</code>关键字开头，其后 statement 为执行结构体，<code>while</code>关键字，其后 expression 为条件</li><li><code>for(;;)</code></li><li><code>for(;)</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">iterationStatement</span><br>    <span class="hljs-string">:</span>   <span class="hljs-string">'while'</span> <span class="hljs-string">'('</span> <span class="hljs-string">expression</span> <span class="hljs-string">')'</span> <span class="hljs-string">statement</span><br>    <span class="hljs-string">|</span>   <span class="hljs-string">'do'</span> <span class="hljs-string">statement</span> <span class="hljs-string">'while'</span> <span class="hljs-string">'('</span> <span class="hljs-string">expression</span> <span class="hljs-string">')'</span> <span class="hljs-string">';'</span><br>    <span class="hljs-string">|</span>   <span class="hljs-string">'for'</span> <span class="hljs-string">'('</span> <span class="hljs-string">expression?</span> <span class="hljs-string">';'</span> <span class="hljs-string">expression?</span> <span class="hljs-string">';'</span> <span class="hljs-string">expression?</span> <span class="hljs-string">')'</span> <span class="hljs-string">statement</span><br>    <span class="hljs-string">|</span>   <span class="hljs-string">'for'</span> <span class="hljs-string">'('</span> <span class="hljs-string">declaration</span> <span class="hljs-string">expression?</span> <span class="hljs-string">';'</span> <span class="hljs-string">expression?</span> <span class="hljs-string">')'</span> <span class="hljs-string">statement</span><br>    <span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h3 id="具体实验"><a href="#具体实验" class="headerlink" title="具体实验"></a>具体实验</h3><p><img src="/posts/33846/Screenshot2020-03-2317.29.39.png" alt="在IntelliJ使用ANTLR"></p><h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><ul><li>这次实验中，我难得有机会阅读了C语言的规范文件。对C语言的产生过程和前端的编译过程有了更深一步的认识，了解程序设计语言的演化过程和相关标准的制定过程，掌握文法的概念， 并能够使用文法对给定的语言进行描述；</li><li>同时这次实验也进一步了加深我对C语言语法的理解，了解了一些不常使用的库函数或者过程，比如C语言多线程执行的过程。C语言的文法规则体现了C语言及其设计者的严谨性。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读C11-C规范标准文件并按照规范选择C语言子集，使用BNF文法描述。&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="编译原理" scheme="https://www.annewqx.top/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>网络安全工程-实验2-密码学基础与实践</title>
    <link href="https://www.annewqx.top/posts/12800/"/>
    <id>https://www.annewqx.top/posts/12800/</id>
    <published>2020-03-22T07:18:22.000Z</published>
    <updated>2022-07-20T06:39:17.706Z</updated>
    
    <content type="html"><![CDATA[<p>truecrypt和bitlocker的使用</p><a id="more"></a><blockquote><p>参考网址：</p><p><a href="http://truecrypt.sourceforge.net" rel="external nofollow noreferrer">http://truecrypt.sourceforge.net</a></p></blockquote><h2 id="TrueCrypt工具使用"><a href="#TrueCrypt工具使用" class="headerlink" title="TrueCrypt工具使用"></a>TrueCrypt工具使用</h2><ol><li><p>从该地址下载旧版TrueCrypt工具：<a href="http://soft.down9.xyz/TrueCrypt_5284.zip" rel="external nofollow noreferrer">http://soft.down9.xyz/TrueCrypt_5284.zip</a></p><blockquote><p><a href="http://truecrypt.sourceforge.net" rel="external nofollow noreferrer">TrueCrypt</a>官网上的软件都只能用于解密而不能用于创造保险箱。官网首页是Windows上的使用和下载。在页面最低部找到<code>If you use TrueCrypt on other platform than Windows, click</code><a href="http://truecrypt.sourceforge.net/OtherPlatforms.html" rel="external nofollow noreferrer">here</a> 可进入Mac版使用指南。</p><ul><li><p>Truecrypt工具虽然有Mac版本，但是安装时会有<code>TrueCrypt requires Mac OS X 10.4 or later.</code>的错误提示。实测<code>10.15</code>版本的Catalina是无法安装的。</p></li><li><p>Windows则要求Win7及以下的系统(win10会出建议使用<code>BitLocker</code> 的Warning，</p></li><li><p>Linux系统会有和Windows一样的Warning。</p><p> <code>The development of TrueCrypt was ended in 5/2014 after Microsoft terminated support of Windows XP. Windows 8/7/Vista and later offer integrated support for encrypted disks and virtual disk images.</code></p></li></ul></blockquote></li><li><p>下载后，以管理员身份运行.exe文件</p></li><li><p>逐步选择需要的属性</p><img src="/posts/12800/Screenshot2020-03-2216.40.37.png" alt="选择完后的加载界面" style="zoom:33%;"><p> <img src="/posts/12800/Screenshot2020-03-2216.42.27.png" alt="在选择的位置下出现一个相应大小的不可读文件"></p></li><li><p>挂载加密卷，可以看到分配的盘符为O</p><img src="/posts/12800/Screenshot2020-03-2216.43.45.png" alt="选在自动加载设备选项后界面" style="zoom:25%;"><img src="/posts/12800/Screenshot2020-03-2216.45.09.png" alt="打开我的电脑，磁盘O即为保险箱" style="zoom:33%;"></li></ol><h2 id="BitLocker"><a href="#BitLocker" class="headerlink" title="BitLocker"></a>BitLocker</h2><ol><li><p>右键选择要加密宗卷<code>(F:)</code>，点击BitLocker选项</p><img src="/posts/12800/Screenshot2020-03-2215.42.15.png" alt="Screenshot" style="zoom:33%;"></li><li><p>按照需要选择加密的选项</p></li><li><p>加密完成后，所选磁盘出现🔐的图标，需要密码才能进入</p><p> <img src="/posts/12800/Screenshot2020-03-2215.48.40.png" alt="Screenshot"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;truecrypt和bitlocker的使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="网络安全" scheme="https://www.annewqx.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全工程-实验1-Shodan</title>
    <link href="https://www.annewqx.top/posts/30293/"/>
    <id>https://www.annewqx.top/posts/30293/</id>
    <published>2020-03-16T08:24:48.000Z</published>
    <updated>2022-07-20T06:38:13.626Z</updated>
    
    <content type="html"><![CDATA[<p>Shodan 是一个搜索引擎</p><a id="more"></a><h1 id="网络安全工程-Shodan"><a href="#网络安全工程-Shodan" class="headerlink" title="网络安全工程-Shodan"></a>网络安全工程-Shodan</h1><blockquote><p><a href="https://www.shodan.io/" rel="external nofollow noreferrer">https://www.shodan.io/</a></p></blockquote><h2 id="初步体验"><a href="#初步体验" class="headerlink" title="初步体验"></a>初步体验</h2><h3 id="摄像头检索"><a href="#摄像头检索" class="headerlink" title="摄像头检索"></a>摄像头检索</h3><ul><li><p>检索：JAWS，我尝试了多个结果，发现常用密码其实并不常用，但是密码为空是真的很常用</p><img src="/posts/30293/Screenshot2020-03-1516.27.56.png" alt="Screenshot2020-03-1516.27.56" style="zoom:33%;"></li><li><p>用户名：admin 密码：空</p><img src="/posts/30293/Screenshot2020-03-1516.29.10.png" alt="Screenshot2020-03-1516.29.10" style="zoom: 25%;"></li><li><p>下载</p><img src="/posts/30293/Screenshot2020-03-1516.30.01.png" alt="Screenshot2020-03-1516.29.10" style="zoom: 25%;"></li></ul><p>其他：</p><ul><li>关键词：JAWS / 地址：中国长春 / 密码：无</li></ul><img src="/posts/30293/Screenshot2020-03-1516.35.01.png" alt="Screenshot2020-03-1516.35.01" style="zoom: 25%;"><ul><li>关键词：JAWS / 地址：<a href="http://203.63.123.147:60001/view2.html" rel="external nofollow noreferrer">澳大利亚罗泽尔</a> /   密码：无</li></ul><img src="/posts/30293/Screenshot2020-03-1516.38.53.png" alt="Screenshot2020-03-1516.38.53" style="zoom: 25%;"><ul><li>关键词：Jaws / 地址：<a href="http://156.216.21.30:60001/view2.html" rel="external nofollow noreferrer">埃及</a> / 密码：无</li></ul><img src="/posts/30293/Screenshot2020-03-1516.42.37.png" alt="Screenshot2020-03-1516.42.37" style="zoom:20%;"><ul><li><p>使用webcam关键词得到的网址<a href="http://173.0.76.63:443/，指向色情网站。其盈利模式为会员制，内容核心是利用网络摄像头进行直播。其IP地址的keyword中出现webcam" rel="external nofollow noreferrer">http://173.0.76.63:443/，指向色情网站。其盈利模式为会员制，内容核心是利用网络摄像头进行直播。其IP地址的keyword中出现webcam</a></p><p><img src="/posts/30293/Screenshot2020-03-1516.47.26.png" alt="Screenshot2020-03-1516.47.26"></p><img src="/posts/30293/Screenshot2020-03-1516.53.06.png" alt="Screenshot2020-03-1516.53.06" style="zoom:20%;"></li></ul><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>使用<code>port: 22</code>搜索22号端口的主机信息，表明下面的主机开放了22号端口，对应SSH服务。</p><img src="/posts/30293/Screenshot2020-03-1517.07.07.png" alt="Screenshot2020-03-1517.07.07" style="zoom:20%;"><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>搜索<code>IP ADDRESS</code>尝试搜索主机。这里我尝试了在DO购买的SFO主机，返回的信息中，地区有误</p><img src="/posts/30293/Screenshot2020-03-1517.16.26.png" alt="Screenshot2020-03-1517.16.26" style="zoom:20%;"><p>我又尝试了阿里云的香港主机，返回的信息中提示软件服务可能存在漏洞</p><img src="/posts/30293/Screenshot2020-03-1517.19.39.png" alt="Screenshot2020-03-1517.19.39" style="zoom:20%;"><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ul><li>Shodan或许能做很多事。如果像我一样只是漫无目的的在里面乱逛的话，它其实仅仅是一个比较特别的搜索引擎</li><li>大多数监控摄像头都是没有设置密码的。我在尝试使用Server: Hikvision-Webs”的关键字时，发现这个摄像头的登录中设置了仅仅允许进行6次尝试。网络安全的保障是多方面共同努力的。网站的管理员一定要做好安全工作，密码复杂和验证、防火墙等都是必要的。尽管实际中我时常为了使用方便而关闭服务器的防火墙，把防护的信心全都放在服务器的提供商身上—-我错了，下次还敢。</li><li>在这次体验中，我体会到了虽然网络安全的攻防往来明面上面向网络，面向软件，面向计算机的，但其实其根本还是面向人。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shodan 是一个搜索引擎&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="网络安全" scheme="https://www.annewqx.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>编译原理与设计-Lab3-词法分析实验</title>
    <link href="https://www.annewqx.top/posts/62214/"/>
    <id>https://www.annewqx.top/posts/62214/</id>
    <published>2020-03-15T10:07:08.000Z</published>
    <updated>2022-07-25T01:46:57.258Z</updated>
    
    <content type="html"><![CDATA[<p>使用ANTLR自动生成词法分析器</p><a id="more"></a><h2 id="实验目的和内容"><a href="#实验目的和内容" class="headerlink" title="实验目的和内容"></a>实验目的和内容</h2><p>根据 C 语言的词法规则，设计识别 C 语言所有单词类的词法分析器的DFA。并使用 Java，利用ANTLR自动生成词法分析器。。词法分析器的输入为 C 语言源程序，输出为属性字流。</p><h2 id="实验过程与方法"><a href="#实验过程与方法" class="headerlink" title="实验过程与方法"></a>实验过程与方法</h2><p>实现词法分析的功能，首先需要了解实验提供的编译器的使用方法和实现架构，实验提供的BITMiniCC 是以Java为实现语言实现的C语言编译器，此次实现的词法分析功能属于编译器的前端功能词法分析一般是以预处理的结果为基础进行的，但是由于BIT-MINICC框架的预处理部分存在缺陷，所以本次实验中跳过了预处理部分。</p><h4 id="1-框架"><a href="#1-框架" class="headerlink" title="1 框架"></a>1 框架</h4><ol><li><p>从 github 下载 <a href="https://github.com/jiweixing/bit-minic-compiler" rel="external nofollow noreferrer">BIT-MINICC</a> 框架，导入IntelliJ或Eclipse;</p></li><li><p>在<code>test/scanner_example.c</code>中，输入提供的<code>testFile.c</code>作为测试源代码；更改<code>config.xml</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- &lt;phase skip="false" type="java" path="" name="preprocess" /&gt;</span><br><span class="hljs-deletion">- &lt;phase skip="false" type="java" path="" name="scan" /&gt;</span><br><span class="hljs-addition">+ &lt;phase skip="true" type="java" path="" name="preprocess" /&gt;</span><br><span class="hljs-addition">+ &lt;phase skip="false" type="java" path="bit.minisys.minicc.scanner.AWScanner" name="scan" /&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>lib</code>下已有antlr包，省去导入的过程</p></li></ol><h4 id="2-编写语法"><a href="#2-编写语法" class="headerlink" title="2 编写语法"></a>2 编写语法</h4><p>按照C11标准编写<code>C.g4</code>文件。参考<a href="https://github.com/antlr/grammars-v4/blob/master/c/C.g4" rel="external nofollow noreferrer">ANTLR官方的C Grammar语法规范文件</a></p><ul><li>开首<code>grammar C;</code> C必须与文件名C.g4一致</li><li>然后是一些形如<code>规则名 : 分支1 | ... | 分支N ;</code>的规则，一段文本匹配规则相当于它匹配其中一个分支，分支中可用单引号包围要按字面匹配的字符串、用子规则名表示按子规则匹配，另外还可用一些类似正则表达式的记号如<code>?</code>、<code>*</code>、<code>+</code>、<code>|</code>和<code>()</code><ul><li>语法规则名以小写字母开始，不同语法规则生成解析树不同类型的结点，各分支说明这种结点的子结点序列可以是什么样子</li><li>词法规则名以大写字母开始，不同词法规则生成不同语类的词，各分支说明这类词可以是什么样子</li><li>以fragment 开首的规则可以被词法规则引用以便重用代码，但本身不会生成对解析器可见的词</li></ul></li></ul><h4 id="3-生成解析器"><a href="#3-生成解析器" class="headerlink" title="3 生成解析器"></a>3 生成解析器</h4><ol><li><p>在intelliJ中下载<code>ANTLR v4 grammar plugin</code></p><img src="/posts/62214/109881584948744_.pic_hd.jpg" alt="ANTLR v4 grammar plugin" style="zoom:25%;"></li><li><p>添加<code>C.g4</code>语法文件，在列表中右键点击该语法文件，选择生成ANTLR，configure选项可以编辑生成文件的输出地址。</p><img src="/posts/62214/109811584948714_.pic_hd.jpg" alt="generate ANTLR Recognizer" style="zoom:25%;"></li><li><p>在<code>gen.bit.minisys.minicc.scanner</code>目录下，得到生成的解析器。其中分词器<code>CLexer</code>(以下仅给出部分)。其最后</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Generated from /Users/apple/Downloads/lab3/BIT-MiniCC-master/src/bit/minisys/minicc/scanner/C.g4 by ANTLR 4.8</span><br><span class="hljs-keyword">package</span> gen.bit.minisys.minicc.scanner;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.Lexer;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.CharStream;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.Token;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.TokenStream;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.*;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.atn.*;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.dfa.DFA;<br><span class="hljs-keyword">import</span> org.antlr.v4.runtime.misc.*;<br><br><span class="hljs-meta">@SuppressWarnings</span>(&#123;<span class="hljs-string">"all"</span>, <span class="hljs-string">"warnings"</span>, <span class="hljs-string">"unchecked"</span>, <span class="hljs-string">"unused"</span>, <span class="hljs-string">"cast"</span>&#125;)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLexer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Lexer</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123; RuntimeMetaData.checkVersion(<span class="hljs-string">"4.8"</span>, RuntimeMetaData.VERSION); &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DFA[] _decisionToDFA;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> PredictionContextCache _sharedContextCache =<br>        <span class="hljs-keyword">new</span> PredictionContextCache();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span><br>        T__0=<span class="hljs-number">1</span>, T__1=<span class="hljs-number">2</span>, T__2=<span class="hljs-number">3</span>, T__3=<span class="hljs-number">4</span>, T__4=<span class="hljs-number">5</span>, T__5=<span class="hljs-number">6</span>, T__6=<span class="hljs-number">7</span>, T__7=<span class="hljs-number">8</span>, T__8=<span class="hljs-number">9</span>, <br>        T__9=<span class="hljs-number">10</span>, T__10=<span class="hljs-number">11</span>, T__11=<span class="hljs-number">12</span>, T__12=<span class="hljs-number">13</span>, T__13=<span class="hljs-number">14</span>, Auto=<span class="hljs-number">15</span>, Break=<span class="hljs-number">16</span>, Case=<span class="hljs-number">17</span>, <br>        Char=<span class="hljs-number">18</span>, Const=<span class="hljs-number">19</span>, Continue=<span class="hljs-number">20</span>, Default=<span class="hljs-number">21</span>, Do=<span class="hljs-number">22</span>, Double=<span class="hljs-number">23</span>, Else=<span class="hljs-number">24</span>, <br>        Enum=<span class="hljs-number">25</span>, Extern=<span class="hljs-number">26</span>, Float=<span class="hljs-number">27</span>, For=<span class="hljs-number">28</span>, Goto=<span class="hljs-number">29</span>, If=<span class="hljs-number">30</span>, Inline=<span class="hljs-number">31</span>, Int=<span class="hljs-number">32</span>, <br>        Long=<span class="hljs-number">33</span>, Register=<span class="hljs-number">34</span>, Restrict=<span class="hljs-number">35</span>, Return=<span class="hljs-number">36</span>, Short=<span class="hljs-number">37</span>, Signed=<span class="hljs-number">38</span>, Sizeof=<span class="hljs-number">39</span>, <br>        Static=<span class="hljs-number">40</span>, Struct=<span class="hljs-number">41</span>, Switch=<span class="hljs-number">42</span>, Typedef=<span class="hljs-number">43</span>, Union=<span class="hljs-number">44</span>, Unsigned=<span class="hljs-number">45</span>, Void=<span class="hljs-number">46</span>, <br>        Volatile=<span class="hljs-number">47</span>, While=<span class="hljs-number">48</span>...;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] channelNames = &#123;<br>        <span class="hljs-string">"DEFAULT_TOKEN_CHANNEL"</span>, <span class="hljs-string">"HIDDEN"</span><br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] modeNames = &#123;<br>        <span class="hljs-string">"DEFAULT_MODE"</span><br>    &#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String[] makeRuleNames() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[] &#123;<br>            <span class="hljs-string">"T__0"</span>, <span class="hljs-string">"T__1"</span>, <span class="hljs-string">"T__2"</span>, <span class="hljs-string">"T__3"</span>, <span class="hljs-string">"T__4"</span>, <span class="hljs-string">"T__5"</span>, <span class="hljs-string">"T__6"</span>, <span class="hljs-string">"T__7"</span>, <span class="hljs-string">"T__8"</span>, <br>            <span class="hljs-string">"T__9"</span>, <span class="hljs-string">"T__10"</span>, <span class="hljs-string">"T__11"</span>, <span class="hljs-string">"T__12"</span>, <span class="hljs-string">"T__13"</span>, <span class="hljs-string">"Auto"</span>, <span class="hljs-string">"Break"</span>, <span class="hljs-string">"Case"</span>, <br>            <span class="hljs-string">"Char"</span>, <span class="hljs-string">"Const"</span>, <span class="hljs-string">"Continue"</span>, <span class="hljs-string">"Default"</span>, <span class="hljs-string">"Do"</span>, <span class="hljs-string">"Double"</span>, <span class="hljs-string">"Else"</span>, <span class="hljs-string">"Enum"</span>, <br>            <span class="hljs-string">"Extern"</span>, <span class="hljs-string">"Float"</span>, <span class="hljs-string">"For"</span>, <span class="hljs-string">"Goto"</span>, <span class="hljs-string">"If"</span>, <span class="hljs-string">"Inline"</span>, <span class="hljs-string">"Int"</span>, <span class="hljs-string">"Long"</span>, <span class="hljs-string">"Register"</span>, <br>            <span class="hljs-string">"Restrict"</span>, <span class="hljs-string">"Return"</span>, <span class="hljs-string">"Short"</span>, <span class="hljs-string">"Signed"</span>, <span class="hljs-string">"Sizeof"</span>, <span class="hljs-string">"Static"</span>, <span class="hljs-string">"Struct"</span>, <br>            <span class="hljs-string">"Switch"</span>, <span class="hljs-string">"Typedef"</span>, <span class="hljs-string">"Union"</span>, <span class="hljs-string">"Unsigned"</span>, <span class="hljs-string">"Void"</span>, <span class="hljs-string">"Volatile"</span>, <span class="hljs-string">"While"</span>, <br>            <span class="hljs-string">"Alignas"</span>, <span class="hljs-string">"Alignof"</span>, <span class="hljs-string">"Atomic"</span>, <span class="hljs-string">"Bool"</span>...<br>        &#125;;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] ruleNames = makeRuleNames();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String[] makeLiteralNames() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[] &#123;<br>            <span class="hljs-keyword">null</span>, <span class="hljs-string">"'__extension__'"</span>, <span class="hljs-string">"'__builtin_va_arg'"</span>, <span class="hljs-string">"'__builtin_offsetof'"</span>, <br>            <span class="hljs-string">"'__m128'"</span>, <span class="hljs-string">"'__m128d'"</span>, <span class="hljs-string">"'__m128i'"</span>, <span class="hljs-string">"'__typeof__'"</span>, <span class="hljs-string">"'__inline__'"</span>, <br>            <span class="hljs-string">"'__stdcall'"</span>, <span class="hljs-string">"'__declspec'"</span>, <span class="hljs-string">"'__asm'"</span>, <span class="hljs-string">"'__attribute__'"</span>, <span class="hljs-string">"'__asm__'"</span>, <br>            <span class="hljs-string">"'__volatile__'"</span>, <span class="hljs-string">"'auto'"</span>, <span class="hljs-string">"'break'"</span>, <span class="hljs-string">"'case'"</span>, <span class="hljs-string">"'char'"</span>, <span class="hljs-string">"'const'"</span>, <br>            <span class="hljs-string">"'continue'"</span>, <span class="hljs-string">"'default'"</span>, <span class="hljs-string">"'do'"</span>, <span class="hljs-string">"'double'"</span>, <span class="hljs-string">"'else'"</span>, <span class="hljs-string">"'enum'"</span>, <span class="hljs-string">"'extern'"</span>, <br>            <span class="hljs-string">"'float'"</span>, <span class="hljs-string">"'for'"</span>, <span class="hljs-string">"'goto'"</span>, <span class="hljs-string">"'if'"</span>, <span class="hljs-string">"'inline'"</span>, <span class="hljs-string">"'int'"</span>, <span class="hljs-string">"'long'"</span>, <br>            <span class="hljs-string">"'register'"</span>, <span class="hljs-string">"'restrict'"</span>, <span class="hljs-string">"'return'"</span>, <span class="hljs-string">"'short'"</span>, <span class="hljs-string">"'signed'"</span>, <span class="hljs-string">"'sizeof'"</span>, <br>            <span class="hljs-string">"'static'"</span>, <span class="hljs-string">"'struct'"</span>, <span class="hljs-string">"'switch'"</span>, <span class="hljs-string">"'typedef'"</span>, <span class="hljs-string">"'union'"</span>, <span class="hljs-string">"'unsigned'"</span>, <br>            <span class="hljs-string">"'void'"</span>, <span class="hljs-string">"'volatile'"</span>, <span class="hljs-string">"'while'"</span>, <span class="hljs-string">"'_Alignas'"</span>, <span class="hljs-string">"'_Alignof'"</span>, <span class="hljs-string">"'_Atomic'"</span>, <br>            <span class="hljs-string">"'_Bool'"</span>, <span class="hljs-string">"'_Complex'"</span>, <span class="hljs-string">"'_Generic'"</span>, <span class="hljs-string">"'_Imaginary'"</span>, <span class="hljs-string">"'_Noreturn'"</span>, <br>            <span class="hljs-string">"'_Static_assert'"</span>, <span class="hljs-string">"'_Thread_local'"</span>, <span class="hljs-string">"'('"</span>, <span class="hljs-string">"')'"</span>, <span class="hljs-string">"'['"</span>, <span class="hljs-string">"']'"</span>, <span class="hljs-string">"'&#123;'"</span>, <br>            <span class="hljs-string">"'&#125;'"</span>, <span class="hljs-string">"'&lt;'"</span>, <span class="hljs-string">"'&lt;='"</span>, <span class="hljs-string">"'&gt;'"</span>, <span class="hljs-string">"'&gt;='"</span>, <span class="hljs-string">"'&lt;&lt;'"</span>, <span class="hljs-string">"'&gt;&gt;'"</span>, <span class="hljs-string">"'+'"</span>, <span class="hljs-string">"'++'"</span>, <span class="hljs-string">"'-'"</span>, <br>            <span class="hljs-string">"'--'"</span>, <span class="hljs-string">"'*'"</span>, <span class="hljs-string">"'/'"</span>, <span class="hljs-string">"'%'"</span>, <span class="hljs-string">"'&amp;'"</span>, <span class="hljs-string">"'|'"</span>, <span class="hljs-string">"'&amp;&amp;'"</span>, <span class="hljs-string">"'||'"</span>, <span class="hljs-string">"'^'"</span>, <span class="hljs-string">"'!'"</span>, <br>            <span class="hljs-string">"'~'"</span>, <span class="hljs-string">"'?'"</span>, <span class="hljs-string">"':'"</span>, <span class="hljs-string">"';'"</span>, <span class="hljs-string">"','"</span>, <span class="hljs-string">"'='"</span>, <span class="hljs-string">"'*='"</span>, <span class="hljs-string">"'/='"</span>, <span class="hljs-string">"'%='"</span>, <span class="hljs-string">"'+='"</span>, <br>            <span class="hljs-string">"'-='"</span>, <span class="hljs-string">"'&lt;&lt;='"</span>, <span class="hljs-string">"'&gt;&gt;='"</span>, <span class="hljs-string">"'&amp;='"</span>, <span class="hljs-string">"'^='"</span>, <span class="hljs-string">"'|='"</span>, <span class="hljs-string">"'=='"</span>, <span class="hljs-string">"'!='"</span>, <span class="hljs-string">"'-&gt;'"</span>, <br>            <span class="hljs-string">"'.'"</span>, <span class="hljs-string">"'...'"</span><br>        &#125;;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] _LITERAL_NAMES = makeLiteralNames();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String[] makeSymbolicNames() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[] &#123;<br>            <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <br>            <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">"Auto"</span>, <span class="hljs-string">"Break"</span>, <span class="hljs-string">"Case"</span>, <span class="hljs-string">"Char"</span>, <span class="hljs-string">"Const"</span>, <span class="hljs-string">"Continue"</span>, <br>            <span class="hljs-string">"Default"</span>, <span class="hljs-string">"Do"</span>, <span class="hljs-string">"Double"</span>, <span class="hljs-string">"Else"</span>, <span class="hljs-string">"Enum"</span>, <span class="hljs-string">"Extern"</span>, <span class="hljs-string">"Float"</span>, <span class="hljs-string">"For"</span>, <br>            <span class="hljs-string">"Goto"</span>, <span class="hljs-string">"If"</span>, <span class="hljs-string">"Inline"</span>, <span class="hljs-string">"Int"</span>, <span class="hljs-string">"Long"</span>, <span class="hljs-string">"Register"</span>, <span class="hljs-string">"Restrict"</span>, <span class="hljs-string">"Return"</span>, <br>            <span class="hljs-string">"Short"</span>, <span class="hljs-string">"Signed"</span>, <span class="hljs-string">"Sizeof"</span>, <span class="hljs-string">"Static"</span>, <span class="hljs-string">"Struct"</span>, <span class="hljs-string">"Switch"</span>, <span class="hljs-string">"Typedef"</span>, <br>            <span class="hljs-string">"Union"</span>, <span class="hljs-string">"Unsigned"</span>, <span class="hljs-string">"Void"</span>, <span class="hljs-string">"Volatile"</span>, <span class="hljs-string">"While"</span>...<br>        &#125;;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] _SYMBOLIC_NAMES = makeSymbolicNames();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Vocabulary VOCABULARY = <span class="hljs-keyword">new</span> VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);<br><br>    <span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@deprecated</span> Use &#123;<span class="hljs-doctag">@link</span> #VOCABULARY&#125; instead.<br>     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] tokenNames;<br>    <span class="hljs-keyword">static</span> &#123;<br>        tokenNames = <span class="hljs-keyword">new</span> String[_SYMBOLIC_NAMES.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tokenNames.length; i++) &#123;<br>            tokenNames[i] = VOCABULARY.getLiteralName(i);<br>            <span class="hljs-keyword">if</span> (tokenNames[i] == <span class="hljs-keyword">null</span>) &#123;<br>                tokenNames[i] = VOCABULARY.getSymbolicName(i);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (tokenNames[i] == <span class="hljs-keyword">null</span>) &#123;<br>                tokenNames[i] = <span class="hljs-string">"&lt;INVALID&gt;"</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> String[] getTokenNames() &#123;<br>        <span class="hljs-keyword">return</span> tokenNames;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Vocabulary <span class="hljs-title">getVocabulary</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> VOCABULARY;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CLexer</span><span class="hljs-params">(CharStream input)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(input);<br>        _interp = <span class="hljs-keyword">new</span> LexerATNSimulator(<span class="hljs-keyword">this</span>,_ATN,_decisionToDFA,_sharedContextCache);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGrammarFileName</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">"C.g4"</span>; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] getRuleNames() &#123; <span class="hljs-keyword">return</span> ruleNames; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSerializedATN</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> _serializedATN; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] getChannelNames() &#123; <span class="hljs-keyword">return</span> channelNames; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] getModeNames() &#123; <span class="hljs-keyword">return</span> modeNames; &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ATN <span class="hljs-title">getATN</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> _ATN; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String _serializedATN =<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ATN _ATN =<br>        <span class="hljs-keyword">new</span> ATNDeserializer().deserialize(_serializedATN.toCharArray());<br>    <span class="hljs-keyword">static</span> &#123;<br>        _decisionToDFA = <span class="hljs-keyword">new</span> DFA[_ATN.getNumberOfDecisions()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; _ATN.getNumberOfDecisions(); i++) &#123;<br>            _decisionToDFA[i] = <span class="hljs-keyword">new</span> DFA(_ATN.getDecisionState(i), i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-调用词法解析器"><a href="#4-调用词法解析器" class="headerlink" title="4 调用词法解析器"></a>4 调用词法解析器</h4><p>在<code>src/bit/minisys/minicc/scanner</code>目录下，新建<code>AWScanner.java</code></p><ul><li><p><code>AWScanner</code>是<code>IMiniCCScanner</code>的一种实现</p></li><li><p>输入输出文件和字符流(使用system.out打印的内容将全部输出到文件<code>outputFile</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 传入函数的是预处理过后的文件名</span><br>String outputFileName = MiniCCUtil.removeAllExt(fileName) + MiniCCCfg.MINICC_SCANNER_OUTPUT_EXT;<br><span class="hljs-comment">// 输出文件</span><br>File outputFile = <span class="hljs-keyword">new</span> File(outputFileName);<br>outputFile.createNewFile();<br>FileOutputStream outFileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(outputFile);<br>PrintStream localPrintStream = <span class="hljs-keyword">new</span> PrintStream(outFileOutputStream);<br>System.setOut(localPrintStream);<br></code></pre></td></tr></table></figure></li><li><p>调用<code>Clexer</code>词法分析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">CharStream stream = CharStreams.fromFileName(fileName, Charset.defaultCharset());<br>CLexer lexer = <span class="hljs-keyword">new</span> CLexer(stream);<br>CommonTokenStream tokens = <span class="hljs-keyword">new</span> CommonTokenStream(lexer);<br>tokens.fill();<br><span class="hljs-keyword">for</span> (Token tok : tokens.getTokens()) &#123;<br>  <span class="hljs-keyword">if</span> ( tok <span class="hljs-keyword">instanceof</span> CommonToken) &#123;<br>      System.out.println(((CommonToken)tok).toString(lexer));<br>   &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      System.out.println(tok.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出文件</p></li></ul><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><h3 id="1-testFile运行结果"><a href="#1-testFile运行结果" class="headerlink" title="1 testFile运行结果"></a>1 testFile运行结果</h3><p><img src="/posts/62214/Screenshot2020-03-1603.13.59.png" alt="Screenshot2020-03-1603.13.59"></p><h2 id="实验心得体会"><a href="#实验心得体会" class="headerlink" title="实验心得体会"></a>实验心得体会</h2><ul><li>本次实验中加深对 C 语言的词法规则的了解，了解了编译器词法分析器的主要功能和实现技术</li><li>进一步了解 Flex 工作原理和基本思想，学习如何使用 Antlr 自动生成词法分析器</li><li>本次实验中初步了解了到词法分析模块与其他模块之间的交互过程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用ANTLR自动生成词法分析器&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="编译原理" scheme="https://www.annewqx.top/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-exp1-分层的协议栈体系结构</title>
    <link href="https://www.annewqx.top/posts/23959/"/>
    <id>https://www.annewqx.top/posts/23959/</id>
    <published>2020-03-12T13:38:09.000Z</published>
    <updated>2022-07-20T06:35:55.286Z</updated>
    
    <content type="html"><![CDATA[<p>wireshark抓包实验</p><a id="more"></a><h1 id="计算机网络实验1-分层的协议栈体系结构"><a href="#计算机网络实验1-分层的协议栈体系结构" class="headerlink" title="计算机网络实验1-分层的协议栈体系结构"></a>计算机网络实验1-分层的协议栈体系结构</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>分层的网络协议体系结构是网络的核心概念，本实验的目的是在学习掌握网络协议分析器工具的基础上，借助网络协议分析器学习在数据包中如何表示协议和分层。</p><h2 id="实验工具"><a href="#实验工具" class="headerlink" title="实验工具"></a>实验工具</h2><ul><li>Wireshark - Version 3.2.1 (v3.2.1-0-gbf38a67724d0) </li><li>curl</li></ul><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><blockquote><p>加深对网络协议的理解通常可以通过观察协议的运行和不断调试协议完成，观察两个 协议实体之间交换的报文序列，深入了解协议操作的细节，执行某些动作，然后观察这些动作产生的结果。</p><p>在第一个 Wireshark 实验中，让我们熟悉 Wireshark，做一些简单的抓包和观察。</p></blockquote><h3 id="1-捕获数据包"><a href="#1-捕获数据包" class="headerlink" title="1 捕获数据包"></a>1 捕获数据包</h3><blockquote><p>本步骤用你的计算机从 Web 服务器获取一个 URL，捕获这次 HTTP 通信的数据包并 观察协议数据包结构。</p></blockquote><ol><li>打开Capture-option菜单，选择接口，设置过滤器为<code>tcp port 80</code>, 选择选项页面下的“解析网络名字”复选框；取消复选框 “混杂”</li></ol><p><img src="/posts/23959/Screenshot2020-03-1221.56.29.png" alt="Screenshot2020-03-1221.56.29"></p><ol start="2"><li><p>打开终端，运行<code>wget www.baidu.com</code>, 获取成功后返回Wireshark</p><p><img src="/posts/23959/Screenshot2020-03-1222.03.10.png" alt="Screenshot2020-03-1222.03.10"></p></li><li><p>检查捕获的数据包</p><p>运行命令<code>curl www.baidu.com</code>，对应的过滤结果：</p><p><img src="/posts/23959/Screenshot2020-03-1222.11.33.png" alt="Screenshot2020-03-1222.11.33"></p><p>查看其中的GET数据包</p><p><img src="/posts/23959/Screenshot2020-03-1222.19.09.png" alt="Screenshot2020-03-1222.19.09"></p><ul><li>GET包分为四个部分，分别是Ethernet，IPV4，TCP和 HTTP，数据帧4，数据链路层的source是本机的MAC地址，destination是路由器的地址</li></ul></li><li><p>数据包结构</p><ul><li><p>IPV4中的Dst 是百度的IPV4地址，从TCP中可以看出源端口为53883，目的端口为80，打开下方的HTTP协议 可以看到具体的内容，访问方式为GET，HOST为<a href="http://www.baidu.com，用户代理为curl，配合" rel="external nofollow noreferrer">www.baidu.com，用户代理为curl，配合</a> 下方的详细信息可以看出一个包的头部的封装结构，协议栈是自底向上组织的，头部的结构也是和协议栈的 顺序相同，各层数据包的嵌套关系图如下：</p><p>  <img src="/posts/23959/IMG_E4EC6479C0CD-1.jpeg" alt="IMG_E4EC6479C0CD-1"></p></li></ul></li><li><p>协议开销</p><ul><li><p>使用命令<code>wget https://annewqx.top/gallery/thumbnails/caddy.png</code>，设置捕获选项为<code>tcp port 443</code></p></li><li><p>监听结果</p><p>  <img src="/posts/23959/Screenshot2020-03-1921.14.31.png" alt="Screenshot2020-03-1921.14.31"></p><p>  <img src="/posts/23959/Screenshot2020-03-1921.14.41.png" alt="Screenshot2020-03-1921.14.41"></p><ul><li>1~3为TCP/IP三次握手，和服务端建立连接</li><li>4是Get类型的HTTP请求；之后是数个TCP包；</li><li>71是HTTP，带着图片信息，其详细信息展示图片共51480bytes，由38个总长度为51935bytes的数据帧组成；效率99.12%，开销较小<img src="/posts/23959/Screenshot2020-03-1921.29.51.png" alt="Screenshot2020-03-1921.29.51"></li></ul></li></ul></li><li><p>复用/分用键字段</p><p> Ethernet的复用/分用键为首部末尾的2个字节，上层协议为IP(IPv4)时为08 00，IPv6为86 dd IP的复用/分用键为首部的第10个字节，为06</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wireshark抓包实验&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="计算机网络" scheme="https://www.annewqx.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>编译原理与设计-Lab2-编译器认知实验</title>
    <link href="https://www.annewqx.top/posts/673/"/>
    <id>https://www.annewqx.top/posts/673/</id>
    <published>2020-03-03T10:02:04.000Z</published>
    <updated>2022-04-22T14:34:16.044Z</updated>
    
    <content type="html"><![CDATA[<p>GCC编译器和LLVM编译器的编译过程以及效率对比</p><a id="more"></a><h2 id="实验目的和内容"><a href="#实验目的和内容" class="headerlink" title="实验目的和内容"></a>实验目的和内容</h2><p>本实验主要的内容为在 Linux 平台上安装和运行工业界常用的编译器 GCC 和 LLVM，如果系统中没有安装，则需要首先安装编译器，安装完成后编写简单的测 试程序，使用编译器编译，并观察中间输出结果。</p><h2 id="实现的内容与方法"><a href="#实现的内容与方法" class="headerlink" title="实现的内容与方法"></a>实现的内容与方法</h2><blockquote><p>本机环境： 系统masOS Catalina，已安装homebrew</p></blockquote><h3 id="1-编译器安装"><a href="#1-编译器安装" class="headerlink" title="1 编译器安装"></a>1 编译器安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装gcc8</span><br>brew install gcc@8<br><span class="hljs-comment"># 安装clang</span><br>xcode-select --install<br></code></pre></td></tr></table></figure><h3 id="2-编写测试程序"><a href="#2-编写测试程序" class="headerlink" title="2 编写测试程序"></a>2 编写测试程序</h3><ul><li><p>单个程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"hello\n"</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多个程序</p><p><code>cal.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> num1, num2;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;num1,&amp;num2);<br>  <span class="hljs-keyword">int</span> res = add(num1,num2);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, res);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>add.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"add.h"</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span>&#123;<br><span class="hljs-keyword">return</span> num1+num2;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-运行编译器进行观测"><a href="#3-运行编译器进行观测" class="headerlink" title="3 运行编译器进行观测"></a>3 运行编译器进行观测</h3><h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h4><ul><li><p>查看编译器版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -v<br>$ gcc version 8.3.0 (Homebrew GCC 8.3.0_2)<br></code></pre></td></tr></table></figure></li><li><p>使用gcc编译单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o hello hello.c<br></code></pre></td></tr></table></figure></li><li><p>使用gcc编译链接多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o cal cal.c add.c<br></code></pre></td></tr></table></figure></li><li><p>查看预处理结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -E hello.c -o hello.i<br></code></pre></td></tr></table></figure></li><li><p>查看语法分析树</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fdump-tree-all hello.c<br></code></pre></td></tr></table></figure><p>生成的文件列表，使用<code>ls -ltr</code> 查看(按生成顺序倒序排列)</p><img src="/posts/673/Screenshot2020-03-0321.36.26.png" alt="执行命令后产生的文件列表"><p>查看中间代码生成结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fdump-rtl-all hello.c<br></code></pre></td></tr></table></figure><p>生成的文件列表，使用<code>ls -ltr</code> 查看(按生成顺序倒序排列)</p><img src="/posts/673/Screenshot2020-03-0321.37.11.png" alt="执行命令后产生的文件列表" style="zoom:33%;"></li></ul><ul><li><p>查看生成的目标代码(汇编代码)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o hello.asm -S hello.c<br></code></pre></td></tr></table></figure></li></ul><h4 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h4><ul><li><p>查看编译器的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -v<br></code></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Apple clang version 11.0.0 (clang-1100.0.33.17)<br>Target: x86_64-apple-darwin19.3.0<br>Thread model: posix<br>InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin<br></code></pre></td></tr></table></figure></li><li><p>使用编译器编译单个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -o hello hello.c<br></code></pre></td></tr></table></figure></li><li><p>使用编译器编译链接多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -o cal cal.c add.c<br></code></pre></td></tr></table></figure></li><li><p>查看编译流程和阶段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -ccc-print-phases test.c -c<br></code></pre></td></tr></table></figure><p>终端的输出：</p><img src="/posts/673/Screenshot2020-03-0321.59.14.png" alt="终端的输出"></li><li><p>查看词法分析结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -fsyntax-only -Xclang -dump-tokens<br></code></pre></td></tr></table></figure></li><li><p>查看词法分析结果 2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c  -fsyntax-only -Xclang -dump-raw-tokens<br></code></pre></td></tr></table></figure><p>生成的结果：</p><img src="/posts/673/Screenshot2020-03-0322.43.03.png" alt="终端的输出"></li><li><p>查看语义分析结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -Xclang -ast-dump <span class="hljs-comment"># error link</span><br>clang -fsyntax-only -Xclang -ast-dump test.c<br></code></pre></td></tr></table></figure><p>部分结果：</p><img src="/posts/673/Screenshot2020-03-0322.44.20.png" alt="终端输出的末尾"></li><li><p>查看语义分析结果 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -Xclang -ast-view    <span class="hljs-comment"># clang: error: linker command failed with exit code 1 </span><br>clang test.c -fsyntax-only -Xclang -ast-view  <span class="hljs-comment"># 因为缺乏gv环境 此命令未能得到成功结果</span><br></code></pre></td></tr></table></figure><p>部分结果：</p><img src="/posts/673/Screenshot2020-03-0322.51.40.png" alt="终端的输出"></li><li><p>查看编译优化的结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang test.c -S -mllvm -<span class="hljs-built_in">print</span>-after-all<br></code></pre></td></tr></table></figure><p>部分结果：</p><img src="/posts/673/Screenshot2020-03-0323.03.18.png" alt="终端输出的末尾"></li><li><p>查看生成的目标代码结果 Target code generation</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang –S test.c<br></code></pre></td></tr></table></figure><p>生成的目标代码文件开头：</p><img src="/posts/673/Screenshot2020-03-0323.07.04.png" alt="test.s文件"></li></ul><h2 id="运行结果分析"><a href="#运行结果分析" class="headerlink" title="运行结果分析"></a>运行结果分析</h2><p><img src="/posts/673/856214-20170831203214640-1792176674.png" alt="gcc编译全过程"></p><h3 id="GCC-运行结果分析"><a href="#GCC-运行结果分析" class="headerlink" title="GCC 运行结果分析"></a>GCC 运行结果分析</h3><blockquote><p><a href="https://blog.csdn.net/njys1/article/details/53448558" rel="external nofollow noreferrer">GCC进行编译的大概步骤：</a></p><p>词法分析 –&gt;  语法分析 –&gt;  生成语法树 –&gt; 高级gimple –&gt;  低级gimple  –&gt;  cfg  –&gt; ssa –&gt;RTL –&gt;目标代码(汇编代码)</p><p><a href="https://blog.csdn.net/doniexun/article/details/38324577" rel="external nofollow noreferrer">GENERIC、GIMPLE和RTL三者构成了gcc中间语言的全部，它们以GIMPLE为核心，由GENERIC承上，由RTL启下，在源文件和目标指令之间的鸿沟之上构建了一个三层的过渡。</a></p></blockquote><h4 id="预处理结果"><a href="#预处理结果" class="headerlink" title="预处理结果"></a>预处理结果</h4><ul><li><p>运行<code>gcc -E hello.c –o hello.i</code>，将会产生 hello.i 文件，这就是 hello.c 经过预处理后的文件。原本4行的程序，经过预处理，得到了580行的预处理文件</p><p>预处理文件开头：</p><p><img src="/posts/673/Screenshot2020-03-0521.27.27.png" alt="预处理文件开头"></p><p>预处理文件结尾：</p><p><img src="/posts/673/Screenshot2020-03-0521.28.30.png" alt="预处理文件结尾"></p></li><li><p>可以看到， hello.c 经过预处理后得到的 hello.i文件，除了原本的几行代码之外，还包含了很多额外的变量、函数等等，这些都是预处理器处理的结果。</p></li></ul><h4 id="语法分析树"><a href="#语法分析树" class="headerlink" title="语法分析树"></a>语法分析树</h4><ul><li><p>运行<code>gcc -fdump-tree-all hello.c</code>后，一共生成了22个文件，其命名格式均为<code>filename.c.&lt;num&gt;t.name</code></p>  <img src="/posts/673/Screenshot2020-03-0522.08.47-3423784.png" alt="语法分析树"></li><li><p>分析这22个文件内容(顺序为生成的先后顺序)：</p><ul><li>046t.profile_estimate/318t.statistics为空白；</li><li>007t.lower/010t.eh相同；</li><li>012t.ompexp/013t.printf-return-value1/019t.fixup_cfg1相同；</li><li>020t.ssa/027t.fixup_cfg3/029t.einline/088t.fixup_cfg4/222t.veclower/223t.cplxlower0/225t.switchlower/232t.optimized相同</li><li>028t.local-fnsummary1/050t.local-fnsummary2相同</li><li>其余还有004t.gimple/006t.omplower/011t.cfg /049t.release_ssa 不与其他相同</li></ul></li><li><p>以下重点对比源文件与004t.gimple/010(即007t.lower)/013的区别，其排序与生成顺序一致<br>  <img src="/posts/673/Screenshot2020-03-0520.38.22.png" alt="四个重要文件对比"></p></li></ul><ol><li><p><strong>main函数转变为高端gimple的过程</strong> ：004t.Gimple</p><blockquote><p>GCC 利用 “gimplifier” 将 GENERIC 中间表示转换为 GIMPLE中间表示。</p><p>语法树到高端gimple的转化是以语法树的节点为单位进行遍历的</p></blockquote><ul><li>以函数为单位进行转化，并且将函数内部的所有变量以及编译器为方便生成运行时结构所创建的临时变量都提高到函数最开始的位置，为计算栈空间和使用寄存器提供依据</li><li>将函数执行语句集中到一起，并且其顺序与语法树种所表现的顺序一致，为配合运行时结构会增减一些语句</li></ul></li><li><p><strong>return语句转低端gimple的处理</strong>：007t.lower/010t.eh：</p><blockquote><p>GIMPLE中有一个lower的动作，用于将高层次的GIMPLE表示，解析成低层次的，这个lower动作在pass_lower_cf中完成。</p><p>高端gimple到低端gimple主要完成数据合并，代码合并和返回语句合并，有利于最后生成更规整的后端代码</p></blockquote><ul><li>在gimple_return语句的位置插入一条goto lable跳转语句</li><li>将gimple_return语句暂存起来，将gimple语句序列中的gimple_return语句删掉</li><li>待所有的语句都lower gimple转换完之后，再将gimple_return语句做gimple_return的处理，处理过程是先添加一个标号，以便于第一句的goto  lable对应上，然后再把return  语句插入gimple语句序列</li></ul></li></ol><blockquote><p>经过以上处理得到的低端gimple已经足以支持生成最终的目标代码，确定运行时结构了，但是gcc考虑到优化，在此基础上转化了cfg和ssa结构</p></blockquote><ol start="3"><li><p><strong>低端gimple到cfg结构中间代码</strong>：012t.ompexp/013t.printf-return-value1/019t.fixup_cfg1</p><blockquote><p>GCC设计cfg ( control  flow  graph ) 主要是用于函数内部的控制流转化，跨函数间的逻辑优化由于逻辑比较复杂，GCC目前还没有完成</p><p>cfg的主要作用是在低端gimple的基础上将语句分成几个基本块(basic block)，在基本块内，代码是顺序执行的，不存在跳转语句，如果有跳转语句，则放在块的最后，保证跳转只发生在块与块之间，即在gimple中，指令跳转的语句就是基本块的边界</p></blockquote><ul><li>013t与之后生成的hello.c.019t.fixup_cfg1/hello.c.027t.fixup_cfg3内容一致。相比007t.lower/010t.eh，语句被划分为几块，goto语句被取代。</li></ul></li><li><p><strong>cfg转ssa</strong>：020t.ssa</p><blockquote><p>为每个变量增加一个版本号，用于数据流的优化，它的结构是跟低端gimple的结构相同的</p></blockquote><p>  如下cfs1与ssa的对比，变量int下多了一个版本号</p><p><img src="/posts/673/Screenshot2020-03-0522.28.18.png" alt="cfs1与ssa"></p></li></ol><h4 id="中间结果及目标代码"><a href="#中间结果及目标代码" class="headerlink" title="中间结果及目标代码"></a>中间结果及目标代码</h4><blockquote><p>考虑到平台的通用性，gcc生成了一套通用的RTL结构，将在RTL的基础上转化为目标代码</p></blockquote><p>使用<code>gcc -fdump-tree-all hello.c</code> 查看生成的中间结果</p><img src="/posts/673/Screenshot2020-03-0522.36.09.png" alt="生成的中间结果文件列表"><ul><li><p>生成RTL</p><p>由于GCC是支持多种平台的，在不同的平台上生成的汇编代码的格式肯定是不同的，如果为每个平台的汇编代码都写一套优化逻辑，是不太现实的，为了解决这个问题，GCC提供了一种中间形式的汇编语言RTL(Register  Transfer  Language)，它与具体的平台无关，这样所有的优化都可以基于RTL了，在所有的优化完成之后，再转变成针对不同硬件平台的汇编代码，每一条RTL语句称为一条insn语句</p></li><li><p>转化为RTL阶段的主要步骤</p><ul><li>转化为初始的RTL</li><li>明确初始的RTL中的运行时结构信息，此时把虚拟寄存器更新为真实的寄存器</li></ul></li><li><p>RTL生成目标代码，也就是汇编代码，<code>gcc -o hello.asm -S hello.c</code> 查看</p><p>﻿<img src="/posts/673/Screenshot2020-03-0522.41.55.png" alt="hello.c源文件与hello.asm对比"></p></li></ul><h3 id="LLVM-运行结果分析"><a href="#LLVM-运行结果分析" class="headerlink" title="LLVM 运行结果分析"></a><a href>LLVM 运行结果分析</a></h3><ul><li><p>查看编译流程和阶段<code>clang -ccc-print-phases test.c -c</code></p><p>返回的结果</p><p><img src="/posts/673/Screenshot2020-03-0321.59.14.png" alt="终端的输出"></p><ul><li>0：获得源代码<code>main.c</code>，c语言文件</li><li>1：预处理阶段，做相应处理</li><li>2：编译阶段</li><li>3：步骤通过后端进行汇编前的处理</li><li>4：汇编阶段</li><li>5：链接阶段，做相应处理<br>通过如上步骤可以了解到整个过程以及过程中的一些信息。例如首先进行的预处理操作可以使用如下命令查看具体信息：</li></ul></li></ul><ol><li><p>预处理阶段 <code>clang -E test.c</code></p><p>这个过程包括宏的替换，头文件的导入等等</p></li><li><p>词法分析</p><p>在此步骤会把代码切成一个个Token，比如大小括号，等于号还有字符串等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 词法分析1</span><br>clang -fsyntax-only -Xclang -dump-tokens test.c<br><span class="hljs-comment"># 词法分析2</span><br>clang test.c  -fsyntax-only -Xclang -dump-raw-tokens<br></code></pre></td></tr></table></figure><p>图片中依次为词法分析1，词法分析2和源文件</p><p><img src="/posts/673/Screenshot2020-03-0523.09.17.png" alt="词法分析1，词法分析2和源文件"></p><p>可以看到，-dump-raw-tokens仅仅输出我们编写的test.c的词法分析结果，而-dump-tokens输出还包括所有头文件的词法分析结果</p></li><li><p>语法分析</p><p>验证程序的语法是否正确，然后将所有的节点组成抽象语法树AST</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法分析1</span><br>clang -fsyntax-only -Xclang -ast-dump test.c<br><span class="hljs-comment"># 语法分析2</span><br>clang test.c -fsyntax-only -Xclang -ast-view  <span class="hljs-comment"># 因为缺乏gv环境 此命令未能得到成功结果</span><br></code></pre></td></tr></table></figure><p>下图依次是语法分析1得到的抽象语法树ast，语法分析2的得到的语法树生成图的源文件。test.c的源代码</p><p><img src="/posts/673/Screenshot2020-03-0523.17.14.png" alt="ast"></p></li><li><p>这些步骤完成之后就要开始进行IR中间代码的生成了，代码生成器CodeGen会负责将语法树自顶向下遍历逐步翻译成LLVM IR，IR就是编译过程的前端的输出以及后端的输入；此步骤LLVM会去做些优化工作，在Xcode的编译设置里也可以设置优化的级别-01，-03，-0s等；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看生成的IR中间代码</span><br>clang -S -fobjc-arc -emit-llvm main.m -o main.ll<br><span class="hljs-comment"># 查看LLVM编译优化的结果</span><br>clang test.c -S -mllvm -<span class="hljs-built_in">print</span>-after-all<br></code></pre></td></tr></table></figure><p>下图依次为中间代码，LLVM编译优化的结果</p><p><img src="/posts/673/Screenshot2020-03-0523.27.37.png" alt="中间代码及优化结果"></p></li><li><p>生成汇编文件<code>clang –S test.c</code></p><p>下图左为源文件，右为生成的汇编代码</p><p><img src="/posts/673/Screenshot2020-03-0523.30.49.png" alt="源文件和汇编代码"></p></li></ol><h3 id="GCC-与-LLVM-对比分析"><a href="#GCC-与-LLVM-对比分析" class="headerlink" title="GCC 与 LLVM 对比分析"></a>GCC 与 LLVM 对比分析</h3><p>源文件均为C语言的hello world</p><p>下图左为gcc生成的汇编文件，右为llvm生成的汇编文件</p><p><img src="/posts/673/Screenshot2020-03-0523.31.58.png" alt="汇编文件对比"></p><h2 id="优化编译"><a href="#优化编译" class="headerlink" title="优化编译"></a>优化编译</h2><blockquote><p><a href="https://blog.csdn.net/qq_31108501/article/details/51842166" rel="external nofollow noreferrer">gcc提供了从O0-O3以及Os这几种不同的优化级别供大家选择</a></p><ul><li>O0： 不做任何优化，这是默认的编译选项。 </li><li>-O和-O1： 对程序做部分编译优化，对于大函数,优化编译占用稍微多的时间和相当大的内存。使用本项优化，编译器会尝试减小生成代码的尺寸，以及缩短执行时间，但并不执行需要占用大量编译时间的优化。 </li><li>-O2： 是比O1更高级的选项，进行更多的优化。Gcc将执行几乎所有的不包含时间和空间折中的优化。当设置O2选项时，编译器并不进行循环打开（）loop unrolling以及函数内联。与O1比较而言，O2优化增加了编译时间的基础上，提高了生成代码的执行效率。 </li><li>-O3： 比O2更进一步的进行优化。在包含了O2所有的优化的基础上，又打开了以下优化选项： <ul><li>-finline-functions：内联简单的函数到被调用函数中。由编译器启发式的决定哪些函数足够简单可以做这种内联优化。默认情况下，编译器限制内联的尺寸，3.4.6中限制为600（具体含义不详，指令条数或代码size？）可以通过-finline-limit=n改变这个长度。这种优化技术不为函数创建单独的汇编语言代码， 而是把函数代码包含在调度程序的代码中。 对于多次被调用的函数来说, 为每次函数调用复制函数代码。 虽然这样对于减少代码长度不利, 但是通过最充分的利用指令缓存代码, 而不是在每次函数调用时进行分支操作, 可以提高性能。 </li><li>-fweb：构建用于保存变量的伪寄存器网络。 伪寄存器包含数据, 就像他们是寄存器一样, 但是可以使用各种其他优化技术进行优化, 比如cse和loop优化技术。这种优化会使得调试变得更加的不可能，因为变量不再存放于原本的寄存器中。 </li><li>-frename-registers：在寄存器分配后，通过使用registers left over来避免预定代码中的虚假依赖。这会使调试变得非常困难，因为变量不再存放于原本的寄存器中了。 </li><li>-funswitch-loops：将无变化的条件分支移出循环，取而代之的将结果副本放入循环中。</li></ul></li></ul></blockquote><p>优化编译测试文件采用<a href="/posts/53125/">Lab1</a>中的快速排序代码</p><h3 id="GCC优化编译"><a href="#GCC优化编译" class="headerlink" title="GCC优化编译"></a>GCC优化编译</h3><ul><li><p>规模为50000的1000000以内的不重复随机数(算法效率$O(log_n))$</p><img src="/posts/673/Screenshot2020-03-0523.55.03.png" alt="gcc优化编译1"></li><li><p>规模为50000的逆序排列(算法效率$O(n^2)$)</p><img src="/posts/673/Screenshot2020-03-0523.57.14.png" alt="gcc优化编译2"></li><li><p>每组实验重复5次，最后运行时间取平均数，单位为ms</p><table><thead><tr><th><strong>优化方式</strong></th><th><strong>O(logn)</strong></th><th><strong>O(N^2)</strong></th></tr></thead><tbody><tr><td>-O0</td><td>6</td><td>2830</td></tr><tr><td>-O1</td><td>3</td><td>505.4</td></tr><tr><td>-O2</td><td>4</td><td>835</td></tr><tr><td>-O3</td><td>3</td><td>567</td></tr></tbody></table></li><li><p>gcc四种优化编译效率对比<img src="/posts/673/Screenshot2020-03-0600.45.28.png" alt="gcc四种优化效率对比"></p></li></ul><h3 id="LLVM优化编译"><a href="#LLVM优化编译" class="headerlink" title="LLVM优化编译"></a>LLVM优化编译</h3><ul><li><p>规模为50000的1000000以内的不重复随机数</p><img src="/posts/673/Screenshot2020-03-0523.58.45.png" alt="lvmm优化编译1"></li><li><p>规模为50000的逆序排列</p><img src="/posts/673/Screenshot2020-03-0600.00.30.png" alt="lvmm优化编译2"></li><li><p>每组实验重复5次，最后运行时间取平均数，单位为ms</p><table><thead><tr><th><strong>优化方式</strong></th><th><strong>O(logn)</strong></th><th><strong>O(N^2)</strong></th></tr></thead><tbody><tr><td>-O0</td><td>6</td><td>2368</td></tr><tr><td>-O1</td><td>3</td><td>567</td></tr><tr><td>-O2</td><td>3</td><td>574</td></tr><tr><td>-O3</td><td>3</td><td>556</td></tr></tbody></table></li></ul><p>llvm四种优化编译效率对比</p><p><img src="/posts/673/Screenshot2020-03-0600.51.28.png" alt="llvm四种优化编译效率对比"></p><h3 id="GCC与LLVM优化编译效果对比"><a href="#GCC与LLVM优化编译效果对比" class="headerlink" title="GCC与LLVM优化编译效果对比"></a>GCC与LLVM优化编译效果对比</h3><p><img src="/posts/673/Screenshot2020-03-0600.52.06.png" alt="GCC与LLVM优化编译效果对比"></p><ul><li>可以看出，总体而言，llvm优化效率是优于gcc的</li><li>面对快排这样的少循环多递归的情况，-O2的优化效率是不如-O1和-O3的</li></ul><h2 id="实验心得体会"><a href="#实验心得体会" class="headerlink" title="实验心得体会"></a>实验心得体会</h2><ul><li><p>了解工业界常用的编译器 GCC 和 LLVM。以前我对编译器之前的区别并没有比较明确的认知，这此实验之后我才知道macOS系统里的gcc命令实际上调用的是clang命令；</p></li><li><p>熟悉编译器的安装和使用过程。本次实验的过程较实验1曲折了很多，过程中也遇到了很多波折，虽然很多波折是与实验本身无关的—-比如安装GCC编译器需要把下载源换为国内的tuna/USTC；<code>wget</code> <code>brew</code>等软件包管理工具，在下载软件不成功的时候会尝试下载软件的源代码，然后在本地编译；</p></li><li><p>了解编译器的优化效果。本次实验并不是我们第一次接触gcc命令，以前我们学习过了基础的gcc命令参数，怎么进行gdb调试，以及makefile的写法；通过本次实验，我终于又系统了解了一遍gcc命令的相关参数的作用，进一步了解了编译优化；</p></li><li><p>观察编译器工作过程中生成的中间文件的格式和内容。本次实验中，我进一步了解了GCC编译器编译的全过程，以及这些过程存在的原因。gcc编译的过程有词法分析 –&gt;  语法分析 –&gt;  生成语法树 –&gt; 高级gimple –&gt;  低级gimple  –&gt;  cfg  –&gt; ssa –&gt;RTL –&gt;目标代码(汇编代码)。低端gimple已经足以支持生成最终的目标代码，确定运行结构了，但是gcc考虑到优化，还在此基础上转化了cfg和ssa结构。RTL结构是gcc为了平台的通用性而生成的一套通用的RTL结构，最终在RTL的基础上转化为汇编代码。</p></li><li><p>本次实验进一步为我们对编译器的学习和构造奠定了基础。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GCC编译器和LLVM编译器的编译过程以及效率对比&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="编译原理" scheme="https://www.annewqx.top/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ssr to v2ray</title>
    <link href="https://www.annewqx.top/posts/30155/"/>
    <id>https://www.annewqx.top/posts/30155/</id>
    <published>2020-03-02T11:05:16.000Z</published>
    <updated>2022-11-09T08:02:18.721Z</updated>
    
    <content type="html"><![CDATA[<p>三月一日到了，成熟的小孩要学会自己换梯子的协议了</p><a id="more"></a><blockquote><p>引用连接：</p><ul><li>官方GitHub：<a href="https://github.com/v2ray/v2ray-core" rel="external nofollow noreferrer">v2ray/<em>v2ray</em>-core</a> </li><li>官方网站：<a href="https://www.v2ray.com" rel="external nofollow noreferrer">Project V</a></li><li>Mac/Windows/Android客户端： <a href="https://www.v2ray.com/awesome/tools.html" rel="external nofollow noreferrer">图形客户端</a></li><li>一键式脚本<ul><li><a href="https://github.com/233boy/v2ray" rel="external nofollow noreferrer">233boy/<em>v2ray</em></a>（Github内容已经不展示）</li><li><a href="https://233v2.com/post/1/" rel="external nofollow noreferrer">指导手册</a> （需要翻墙） <a href="https://github.com/233boy/v2ray/wiki/V2Ray搭建详细图文教程" rel="external nofollow noreferrer">指导手册备用地址</a></li></ul></li></ul><p>V2Ray 是一个于 Shadowsocks 之后非常好用的代理软件，但是由于 V2Ray 的配置略复杂，GUI 客户端不完善，所以 V2Ray 并没有像 Shadowsocks 在科学上网人群之中那么流行。</p><p>但目前来看ssr的服务越发不稳定，所以我们需要换用v2ray</p></blockquote><h2 id="0-先决条件"><a href="#0-先决条件" class="headerlink" title="0 先决条件"></a>0 先决条件</h2><ul><li>本文前导文章为 <a href="/posts/9931/">VPS和Shadowsocks配置</a></li><li>开了firewalld防火墙的话请自行添加对应端口</li></ul><h2 id="1-服务端配置"><a href="#1-服务端配置" class="headerlink" title="1 服务端配置"></a>1 服务端配置</h2><blockquote><p>如果已经使用其他方式安装v2ray，想要换为脚本，删除方法如下：</p><ul><li><p>卸载：其中 systemd 和 sysv 二选一，取决于你的系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#停用并卸载服务（systemd）：</span><br>systemctl stop v2ray<br>systemctl <span class="hljs-built_in">disable</span> v2ray<br><br><span class="hljs-comment">#停用并卸载服务（sysv）：</span><br>service v2ray stop<br>update-rc.d -f v2ray remove<br></code></pre></td></tr></table></figure></li><li><p>删除残留文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rm -rf /etc/v2ray/*  <span class="hljs-comment">#(配置文件)</span><br>rm -rf /usr/bin/v2ray/*  <span class="hljs-comment">#(程序)</span><br>rm -rf /var/<span class="hljs-built_in">log</span>/v2ray/*  <span class="hljs-comment">#(日志)</span><br>rm -rf /lib/systemd/system/v2ray.service  <span class="hljs-comment">#(systemd 启动项)</span><br>rm -rf /etc/init.d/v2ray  <span class="hljs-comment">#(sysv 启动项)</span><br></code></pre></td></tr></table></figure></li></ul><p>参考：<a href="https://github.com/v2ray/v2ray-core/issues/187" rel="external nofollow noreferrer">v2ray-core/issues/187</a></p></blockquote><blockquote><p>可选用的脚本(来源：<a href="https://v2raycn.com/" rel="external nofollow noreferrer">V2Ray中文网</a> » <a href="https://v2raycn.com/176.html" rel="external nofollow noreferrer">好用的 V2Ray 一键脚本整理与分享</a></p><h4 id="V2Ray-官方一键脚本"><a href="#V2Ray-官方一键脚本" class="headerlink" title="V2Ray 官方一键脚本"></a>V2Ray 官方一键脚本</h4><p>V2Ray 官方提供 V2Ray 一键脚本，新手可以非常方便的在自己的 VPS 上一键搭建 V2Ray，详细介绍参考：<a href="https://v2raycn.com/46.html" rel="external nofollow noreferrer">V2Ray 官方教程：V2Ray 官方一键脚本搭建与配置文件生成</a>。</p><h4 id="233-V2Ray-一键脚本"><a href="#233-V2Ray-一键脚本" class="headerlink" title="233 V2Ray 一键脚本"></a>233 V2Ray 一键脚本</h4><p>233 V2Ray 一键脚本是由 233boy 开发并维护的一个 V2Ray 脚本，是目前用的比较广泛的 V2Ray 一键脚本，自带管理面板与加速功能，详细介绍参考：<a href="https://v2raycn.com/89.html" rel="external nofollow noreferrer">233 V2Ray 一键脚本，自带管理与加速功能，v2ray.sh</a>。</p><h4 id="V2ray-Fun-一键脚本"><a href="#V2ray-Fun-一键脚本" class="headerlink" title="V2ray.Fun 一键脚本"></a>V2ray.Fun 一键脚本</h4><p>V2ray.Fun 是一个比较常用的 V2Ray 一键脚本，由 FunctionClub 开发并维护，这个脚本自带 Web 可视化控制面板，详细介绍参考：<a href="https://v2raycn.com/111.html" rel="external nofollow noreferrer">V2Ray 一键脚本，自带 Web 可视化控制板面板，V2ray.Fun</a></p></blockquote><p>我选用的是233boy的脚本</p><ol><li><p>ssh登陆到服务器root用户，使用<a href="https://github.com/233boy/v2ray" rel="external nofollow noreferrer">一键式脚本安装</a></p><p><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code></p></li><li><p>选择[1]安装；</p><ul><li>选择默认传输协议TCP；</li><li>没有特别需要的话，回车确认默认端口；</li><li>广告拦截默认关闭(专业的人做专业的事)；</li><li>是否配置Shadowsocks看自己的需要(不过既然我们都从ss过来了，就不用了吧)</li></ul></li><li><p>安装完成后，输入<code>v2ray url</code>  得到vmess URL；或者<code>v2ray qr</code> 得到二维码链接</p></li><li><p>备份脚本</p><ul><li><p>将脚本Fork一份：<a href="https://github.com/233boy/v2ray/fork" rel="external nofollow noreferrer">备份地址</a></p></li><li><p>Fork后，安装在服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/你的GitHub用户名/v2ray -b master<br><span class="hljs-built_in">cd</span> v2ray<br>chmod +x install.sh<br>./install.sh <span class="hljs-built_in">local</span> <span class="hljs-comment"># 此即为运行脚本</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>常用命令：</p><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p></blockquote></li></ol><h2 id="2-客户端配置"><a href="#2-客户端配置" class="headerlink" title="2 客户端配置"></a>2 客户端配置</h2><ul><li><p>打开客户端-服务器设置-左上服务器列表中‘+’-右侧url后复制粘贴刚刚得到的vmess URL即可</p><p>或者打开刚刚得到的二维码链接，直接在菜单中选择扫描屏幕上的二维码</p></li><li><p>因为v2ray的多入口多出口特性， 一个 V2Ray 进程可并发支持多个入站和出站协议，每个协议可独立工作，因此如果没有统计流量的需要，几人共用的话，不用做分割，如果有需要，请看下一部分</p></li><li><p>锐速或者加速服务我们依然可以用<a href="/posts/9931/">VPS和Shadowsocks配置</a> 中的四合一脚本<code>wget &quot;https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code> 重启服务即可</p></li></ul><h2 id="多用户配置"><a href="#多用户配置" class="headerlink" title="多用户配置"></a>多用户配置</h2><blockquote><p>233boy的v2ray脚本中似乎没有关于这方面的快速命令，因此需要我们自己动手</p></blockquote><ol><li><p>使用<code>cat /proc/sys/kernel/random/uuid</code>新建一个用户id，记下这个ID号</p></li><li><p>打开v2ray配置文件<code>vi /etc/v2ray/config.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"inbounds"</span>: [<br>    &#123;<br>    <span class="hljs-comment">//这是第一个用户的配置</span><br>    <span class="hljs-attr">"port"</span>: <span class="hljs-number">12345</span>, <span class="hljs-comment">//端口号</span><br>    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"vmess"</span>,<br>    <span class="hljs-attr">"settings"</span>: &#123;<br>      <span class="hljs-attr">"clients"</span>: [<br>        &#123;<br>          <span class="hljs-attr">"id"</span>: <span class="hljs-string">"f8123442-a199-4ba3-b66c-3751234fbb47"</span>, <span class="hljs-comment">//USER ID</span><br>          <span class="hljs-attr">"level"</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">"alterId"</span>: <span class="hljs-number">64</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;, <span class="hljs-comment">//注意这个逗号</span><br>  <span class="hljs-comment">// 这是第二个用户的配置</span><br>  &#123;<br>    <span class="hljs-attr">"port"</span>: <span class="hljs-number">12346</span>, <span class="hljs-comment">//新的端口号</span><br>    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"vmess"</span>,<br>    <span class="hljs-attr">"settings"</span>: &#123;<br>      <span class="hljs-attr">"clients"</span>: [<br>        &#123;<br>          <span class="hljs-attr">"id"</span>: <span class="hljs-string">"0ff12347-7664-65d9-b10a-5b1234050c07"</span>, <span class="hljs-comment">//刚刚记下的USER ID</span><br>          <span class="hljs-attr">"level"</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">"alterId"</span>: <span class="hljs-number">64</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<span class="hljs-comment">//注意这里没有逗号</span><br>],<br></code></pre></td></tr></table></figure><p>即完成多用户配置</p></li><li><p>使用 <code>v2ray restart</code> 命令重启服务</p></li><li><p><a href="https://v2.ziyls.com" rel="external nofollow noreferrer">打开自动生成inbound的json文件和客户端配置链接的网站</a>，把刚刚的新用户配置输入<img src="/posts/30155/Screenshot2020-03-0122.03.15.png" alt="https://v2.ziyls.com">,点击生成链接，然后输入服务器IP，得到二维码和链接，添加到服务端即可</p></li></ol><h2 id="PAC设置"><a href="#PAC设置" class="headerlink" title="PAC设置"></a>PAC设置</h2><h3 id="从GFW-LIST地址更新PAC文件"><a href="#从GFW-LIST地址更新PAC文件" class="headerlink" title="从GFW LIST地址更新PAC文件"></a>从GFW LIST地址更新PAC文件</h3><ul><li><p>黑名单：<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" rel="external nofollow noreferrer">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p></li><li><p>白名单：<a href="https://raw.githubusercontent.com/R0uter/gfw_domain_whitelist/master/data/whitelist.pac" rel="external nofollow noreferrer">https://raw.githubusercontent.com/R0uter/gfw_domain_whitelist/master/data/whitelist.pac</a></p></li></ul><h3 id="手动编写PAC文件"><a href="#手动编写PAC文件" class="headerlink" title="手动编写PAC文件"></a>手动编写PAC文件</h3><p>以ipip.net为例</p><ul><li><p>需要走代理，全匹配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">||ipip.net^<br></code></pre></td></tr></table></figure></li><li><p>需要直连，不走代理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">@@||example.com<br></code></pre></td></tr></table></figure></li><li><p>详细语法规则</p><figure class="highlight JavaScript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">=== 通配符支持 =&gt; *<br>*.example.com/ <br>代表 http:<span class="hljs-comment">//example.com http://233.example.com https://233.example.com https://666.example.com/233.mp4 全部走代理。</span><br>同时<span class="hljs-string">"*"</span>可省略，.example.com/ 与 *.example.com/ 效果是一样的<br><br>=== 正则表达式支持<br>以 \ 开始和结束，\[\w]+:\/\/example.com\<br><br>=== 例外规则 =&gt; @@<br>@@*.example.com/ 表示<span class="hljs-string">"@@"</span>后面的网址规则(*.example.com)不走代理<br>如：@@www.baidu.com 表示 www.baidu.com 不走代理<br><br>=== 匹配地址开始和结尾规则 =&gt; |<br>|http:<span class="hljs-comment">//example.com、example.com| 分别表示 以http://example.com开始 和 以example.com结束 的地址</span><br>如：|http:<span class="hljs-comment">//233.com ，代表 http://233.com 开头的网址才会走代理，即 https://233.com http://1.233.com 都不会走代理</span><br>如：<span class="hljs-number">233.</span>com|，代表 <span class="hljs-number">233.</span>com 结尾的网站才会走代理，即 http:<span class="hljs-comment">//233.com https://233.com http://1.233.com 都会走带了，而 http://233.com/index.html 不会走代理。</span><br><br>=== 全匹配规则 =&gt; ||<br>||example.com 则代表 http:<span class="hljs-comment">//example.com、https://example.com、ftp://example.com 等协议的地址全部走代理</span><br>如：||<span class="hljs-number">233.</span>com ，即 http:<span class="hljs-comment">//233.com、https://233.com、ftp://233.com 等地址全都走代理</span><br><br>=== 注释规则 =&gt; !<br>!我是注释<span class="hljs-number">233</span><br>!我也是注释<span class="hljs-number">666</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三月一日到了，成熟的小孩要学会自己换梯子的协议了&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="VPS" scheme="https://www.annewqx.top/tags/VPS/"/>
    
      <category term="科学上网" scheme="https://www.annewqx.top/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Caddy替换Nginx运行网站</title>
    <link href="https://www.annewqx.top/posts/2210/"/>
    <id>https://www.annewqx.top/posts/2210/</id>
    <published>2020-03-01T05:54:39.000Z</published>
    <updated>2020-03-23T14:23:06.195Z</updated>
    
    <content type="html"><![CDATA[<p>Caddy的使用真的太傻瓜了! </p><a id="more"></a><blockquote><p>参考文章：</p><ul><li>入门： <a href="https://dengxiaolong.com/caddy/zh/" rel="external nofollow noreferrer">Caddy中文文档</a></li><li>中阶： <a href="https://3mile.github.io/archives/118/" rel="external nofollow noreferrer">3mile：如何在CentOS 7上安装和配置Caddy</a></li><li>Caddyfile的配置：<a href="https://liuzhichao.com/2018/caddy/" rel="external nofollow noreferrer">liuzhichao：替换 Nginx 使用 Caddy 作为博客静态服务器</a></li><li>脚本介绍： <a href="https://wzfou.com/caddy/" rel="external nofollow noreferrer">Caddy-最容易上手的Web Server</a></li></ul><p>本博客基于<a href="https://dengxiaolong.com/caddy/zh/beginner.html" rel="external nofollow noreferrer">Caddy中文文档</a>，结合其他文章进行介绍，上接本博客博文<a href="/posts/65182/">把hexo博客部署到VPS服务器</a>，请注意，这次我们需要一个域名。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为什么要用 <a href="https://caddyserver.com/" rel="external nofollow noreferrer">Caddy</a> 替换掉 Nginx ？最主要的原因是 <strong><a href="https://caddyserver.com/" rel="external nofollow noreferrer">Caddy</a> 能让网站自动支持 HTTPS</strong>。同样是使用 Let’s Encrypt，换成 Nginx 我们就必须手工操作，并且还需要设置三个月更新证书的计划任务。Caddy默认支持 http/2，很多东西都不需要我们配置了。另外它的配置文件也比 Nginx 的要简单很多，几十行的 Nginx 配置文件 <a href="https://caddyserver.com/" rel="external nofollow noreferrer">Caddy</a> 仅需要几行就可以搞定了。关于能否将Caddy用作正式的生产环境，目前来看还是有待商榷的，但是Caddy用为简单的Http服务器是没有问题的。</p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>一个搭载CentOS 7 x64的VPS服务器</li><li>一个域名<code>example.com</code>已被配置为指向<code>VPS IP</code>，具体方法参见<a href="/posts/65182/">把hexo博客部署到VPS服务器</a> 域名部分</li><li>已经利用git把hexo博客部署到VPS的<code>/var/www/blog</code>文件夹</li><li>如果已经运行nginx的，需要<code>nging -s stop</code>关闭</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>我们使用Caddy官方的一键安装脚本</p><p>大部分caddy的第三方一键脚本对于centOS都仅支持<code>6.8</code>或<code>7.2</code>版本(查看Linux版本方法<code>cat /etc/centos-release</code>)</p><ul><li><a href="https://github.com/sayem314/Caddy-Web-Server-Installer" rel="external nofollow noreferrer">sayem314</a></li></ul></blockquote><p>在Linux，Mac或BSD操作系统上，使用以下命令安装Caddy最新稳定的系统特定版本：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">curl https://getcaddy.com | bash -s personal<br></code></pre></td></tr></table></figure><p>Caddy二进制文件将被安装到该<code>/usr/local/bin</code>目录。使用以下命令确认：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">which</span> caddy<br></code></pre></td></tr></table></figure><p>为了安全起见，<strong>切勿</strong>以root身份运行Caddy二进制文件。为了让Caddy能够以非root用户的身份绑定到特权端口（例如80,443），需要<code>setcap</code>。按如下所示运行该命令：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo <span class="hljs-built_in">setcap</span> <span class="hljs-string">'cap_net_bind_service=+ep'</span> /usr/<span class="hljs-built_in">local</span>/bin/caddy<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>默认情况下，Caddy使用当前目录（执行命令的目录，而不是caddy二进制文件所在目录）作为网站根目录，因此运行本地站点非常方便。</p><p>使用终端或者命令行，切换到站点目录所在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> path/to/my/site<span class="hljs-comment"># 在我们的服务器上是/var/www/blog</span><br>caddy<br></code></pre></td></tr></table></figure><p>浏览器打开<a href="http://localhost:2015/，如果出现404页面，说明caddy运行正常。使用`Ctrl+C`退出，caddy将尽可能优雅中断。" rel="external nofollow noreferrer">http://localhost:2015/，如果出现404页面，说明caddy运行正常。使用`Ctrl+C`退出，caddy将尽可能优雅中断。</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="方案1：来自Caddy官方文档的快速开始"><a href="#方案1：来自Caddy官方文档的快速开始" class="headerlink" title="方案1：来自Caddy官方文档的快速开始"></a>方案1：来自Caddy官方文档的快速开始</h3><blockquote><p>如果服务器设置了防火墙，则打开80和443端口</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo firewall-cmd --permanent --zone=public --add-service=http <br>sudo firewall-cmd --permanent --zone=public --add-service=https<br>sudo firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>请确保你的域名能解析到你的服务器，具体方法参见<a href="/posts/65182/">把hexo博客部署到VPS服务器</a> 最后一部分</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo caddy -host example.com<br></code></pre></td></tr></table></figure><p>当第一次使用一个真正的域名（不是localhost）运行Caddy时，会出现提示要求输入你的email地址。这是因为Caddy需要验证你的域名，并将验证信息安全地存储在硬盘上。</p><p>Caddy必须将40和443端口绑定到一个真正的站点，这需要root或者Administrator的权限</p><p>现在我们的网站已经按照在运行了!</p><p><strong>&lt;全文完&gt;</strong></p><hr><p>&lt;其实并不，Caddy可以很简单的开始，但总有高阶玩家可以把简单的事情变得更复杂，当然，也更安全&gt;</p><h3 id="方案2：从Caddyfile开始"><a href="#方案2：从Caddyfile开始" class="headerlink" title="方案2：从Caddyfile开始"></a>方案2：从Caddyfile开始</h3><p>创建一个专门的系统用户：<code>caddy</code> 和一组同名的Caddy：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo useradd -r -d /var/www -M -s /sbin/nologin caddy<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<em>此处创建**的用户caddy只能用于管理Caddy服务，不能用于登录。</em></p><p><code>/var/www</code>为Caddy Web服务器创建主目录，并<code>/var/www/blog</code>为您的站点创建主目录：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo mkdir -p /var/www/blog<br>sudo chown -R caddy:caddy /var/www<br></code></pre></td></tr></table></figure><p>创建一个目录来存储SSL证书：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo mkdir /etc/ssl/caddy<br>sudo chown -R caddy:root /etc/ssl/caddy<br>sudo chmod 0770 /etc/ssl/caddy<br></code></pre></td></tr></table></figure><p>创建专用目录来存储Caddy配置文件<code>Caddyfile</code>：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo mkdir /etc/caddy<br>sudo chown -R root:caddy /etc/caddy<br></code></pre></td></tr></table></figure><p>创建名为的Caddy配置文件<code>Caddyfile</code> 以下仅是一个普通配置，详细的配置参见本文<a href="#Caddyfile">Caddyfile部分</a></p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo touch /etc/caddy/Caddyfile<br>sudo chown caddy:caddy /etc/caddy/Caddyfile<br>sudo chmod 444 /etc/caddy/Caddyfile<br>cat &lt;&lt;EOF | sudo tee -a /etc/caddy/Caddyfile<br>www.example.com &#123;<br>redir https://example.com&#123;uri&#125;<br>&#125;<br>example.com &#123;<br>    root /var/www/blog<br>    gzip<br>    tls example@outlook.com<br>    header / Strict-Transport-Security <span class="hljs-string">"max-age=31536000"</span><br>    gzip<br>    errors &#123;<br>       404 404.html<br>       403 403.html<br>     &#125; <br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>使用<code>caddy -conf /etc/caddy/Caddyfile</code> 按照配置文件运行caddy。第一次运行会验证邮箱，并进行ssh申请等，等待后将网页浏览器指向<code>http://example.com</code>或<code>https://example.com</code>。可看到网站运行的样子</p><p>关于Caddyfile的书写解释，可见本文<a href="#Caddyfile">Caddyfile</a>部分</p><h3 id="方案3：使用caddy-service-此部分有缺陷，未解决"><a href="#方案3：使用caddy-service-此部分有缺陷，未解决" class="headerlink" title="方案3：使用caddy.service(此部分有缺陷，未解决)"></a>方案3：使用caddy.service(此部分有缺陷，未解决)</h3><blockquote><p>github: <a href="https://github.com/caddyserver/caddy/tree/master/dist/init/linux-systemd" rel="external nofollow noreferrer">systemd Service Unit for Caddy</a></p><p>这部分目前我遇到的问题</p><ul><li>使用<code>systemctl status caddy.service</code>提示用户错误。错误的原因一个是systemd version太低，虽然caddy.service要求是219即可，实际上大概是需要229以上才行；</li><li>文件夹权限的问题，涉及到用户和用户组，不太熟，如果把自己搞得ssh拒绝登录就傻了；</li></ul><p>等有时间的时候再回头修这个吧😑</p></blockquote><p>为了方便Caddy的操作，我们可以使用systemd<code>为Caddy 设置一个单元文件，然后用它</code>systemd`来管理Caddy。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service  <span class="hljs-comment"># 从 github 下载 systemd 配置文件</span><br>chown root:root /etc/systemd/system/caddy.service   <span class="hljs-comment"># 配置权限</span><br>chmod 744 /etc/systemd/system/caddy.service<br></code></pre></td></tr></table></figure><p>启动Caddy服务并使其在系统引导时自动启动：</p><figure class="highlight Bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 重启systemd使服务生效</span><br>sudo systemctl daemon-reload<br><span class="hljs-comment"># 开始运行caddy服务</span><br>sudo systemctl start caddy.service<br><span class="hljs-comment"># 设置开机自启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> caddy.service<br><span class="hljs-comment"># 查看caddy服务运行状态</span><br>sudo systemctl status caddy.service<br></code></pre></td></tr></table></figure><p>最后，将网页浏览器指向<code>http://example.com</code>或<code>https://example.com</code>。可看到网站运行的样子。</p><span id="Caddyfile"><h2 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h2></span>**Caddyfile**用来告诉Caddy如何提供服务的文本文件。他通常和网站放在一起。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> path/to/site<br>vim Caddyfile<br></code></pre></td></tr></table></figure><p>Caddy的一般结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">www.mysite.com &#123;<br>    redir https:<span class="hljs-comment">//mysite.com&#123;uri&#125;</span><br>&#125;<br>mysite.com &#123;<br>        root /var/www/blog<br>        <span class="hljs-built_in">log</span> / /var/<span class="hljs-built_in">log</span>/caddy/mysite.<span class="hljs-built_in">log</span> <span class="hljs-string">"&#123;remote&#125; &#123;when&#125; &#123;method&#125; &#123;uri&#125; &#123;proto&#125; &#123;status&#125; &#123;size&#125; &#123;&gt;User-Agent&#125; &#123;latency&#125;"</span><br>        tls 邮箱账号<br>        header / Strict-Transport-Security <span class="hljs-string">"max-age=31536000"</span><br>        gzip<br>        errors &#123;<br>         <span class="hljs-number">404</span> <span class="hljs-number">404.</span>html<br>         <span class="hljs-number">403</span> <span class="hljs-number">403.</span>html<br>       &#125;<br>       expires &#123;<br>         match .css$ <span class="hljs-number">1</span>m<br>         match .js$ <span class="hljs-number">1</span>m<br>         match .png$ <span class="hljs-number">1</span>m<br>         match .jpg$ <span class="hljs-number">1</span>m<br>      &#125;<br>      ipfilter / &#123;<br>        rule  block<br>        blockpage /var/www/liuzhichao.com/<span class="hljs-number">403.</span>html<br>        ip <span class="hljs-number">148.251</span><span class="hljs-number">.8</span><span class="hljs-number">.250</span> <span class="hljs-number">136.243</span><span class="hljs-number">.37</span><span class="hljs-number">.219</span> <span class="hljs-number">144.76</span><span class="hljs-number">.38</span><span class="hljs-number">.40</span> <span class="hljs-number">69.197</span><span class="hljs-number">.177</span><span class="hljs-number">.50</span> <span class="hljs-number">199.58</span><span class="hljs-number">.86</span><span class="hljs-number">.211</span> <span class="hljs-number">5.9</span><span class="hljs-number">.97</span><span class="hljs-number">.200</span> <span class="hljs-number">144.76</span><span class="hljs-number">.91</span><span class="hljs-number">.79</span><br>      &#125;<br><br>     rewrite &#123;<br>        <span class="hljs-keyword">if</span> &#123;&gt;User-agent&#125; has <span class="hljs-string">"MJ12bot"</span><br>        to /forbidden<br>    &#125;<br>     status <span class="hljs-number">403</span> /forbidden<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">www.mysite.com &#123;<br>    redir https://mysite.com&#123;uri&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>是将 www 跳转到非 www 的域名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tls mail@mysite.com<br></code></pre></td></tr></table></figure><p>tls后面改为你的邮箱地址，会自动配置 https。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">header / Strict-Transport-Security <span class="hljs-string">"max-age=31536000"</span><br></code></pre></td></tr></table></figure><p>是一条 https 的优化配置，加上之后，在<a href="https://www.ssllabs.com/ssltest/analyze.html?d=liuzhichao.com&hideResults=on" rel="external nofollow noreferrer">SSLLabs</a>上测试评分可以拿到A+,想想之前使用 Nginx 的时候，网络上找了各种配置参考都只优化到了 A，所以 Caddy 的自动 Https 功能确实还是很方便的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">errors &#123;<br>        404 404.html<br>        403 403.html<br>    &#125;<br></code></pre></td></tr></table></figure><p>是自定义错误页面配置。确保你网站的根目录有相应的文件，不然启动服务会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">expires &#123;<br>        match .css$ 1m<br>        match .js$ 1m<br>        match .png$ 1m<br>        match .jpg$ 1m<br>     &#125;<br></code></pre></td></tr></table></figure><p>expires 是控制页面的缓存，上面的配置是将 css,js,png,jpg 这样的静态资源缓存1个月。此配置依赖http.expires这个插件，如果你没有安装，配置后启动 caddy 会出错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipfilter / &#123;<br>        rule  block<br>        blockpage /var/www/liuzhichao.com/403.html<br>        ip 148.251.8.250 136.243.37.219 144.76.38.40 69.197.177.50 199.58.86.211 5.9.97.200 144.76.91.79<br>     &#125;<br></code></pre></td></tr></table></figure><p>ipfilter是根据配置过滤到一些非正常的 IP，可以查看访问log，经常会有一些爬虫频繁的访问网站，没有任何用处反而加大服务器的负载，对于这样的 IP 可以直接过滤掉。blockpage是配置这些 IP 访问网址时显示的页面，依赖http.ipfilter插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">rewrite &#123;<br>       <span class="hljs-keyword">if</span> &#123;&gt;User-agent&#125; has <span class="hljs-string">"MJ12bot"</span><br>       to /forbidden<br>   &#125;<br>   status 403 /forbidden<br></code></pre></td></tr></table></figure><p>与上面的ipfilter功能类似，都是过滤掉一些非正常的访问用户，不同的是ipfilter是屏蔽 IP，这段配置则是根据<code>User-agent</code> block掉一些爬虫。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Caddy的使用真的太傻瓜了! &lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="nginx" scheme="https://www.annewqx.top/tags/nginx/"/>
    
      <category term="caddy" scheme="https://www.annewqx.top/tags/caddy/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客：装修</title>
    <link href="https://www.annewqx.top/posts/65512/"/>
    <id>https://www.annewqx.top/posts/65512/</id>
    <published>2020-02-25T12:29:31.000Z</published>
    <updated>2023-01-04T02:28:16.155Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>基于icarus主题的Hexo博客装修。本文将介绍除了icarus在_config.yml中提供的功能以外，通过修改其源代码实现的其他扩展功能，页面文件样式的进一步美化等。属于深度定制自己的主题，需要基础的CSS和HTML知识。</p></blockquote><a id="more"></a><div class="tip">  本文不涉及icarus主题的配置文档`_config.yml`里已经有的配置! 仅对icarus v2.6版本里未加入的功能或者个人觉得不完善的功能进行补充。由于icarus3.0中作者使用jsx取代了ejs，并且把所有能共用的js代码抽取到了inferno插件中，icarus v3请谨慎参考</div><blockquote><p>参考文章</p><ul><li><a href="http://yearito.cn/tags/Hexo/" rel="external nofollow noreferrer">Yearito：Hexo 搭建个人博客系列</a>  – 基于Next主题</li><li><a href="https://www.chingow.cn/tags/Hexo/" rel="external nofollow noreferrer">chingow：Hexo+NexT(v7.0+) 搭建博客</a> – 基于Next主题，较Yearito的博客全面一些</li><li><a href="https://www.alphalxy.com/2019/03/customize-icarus/" rel="external nofollow noreferrer">alphalxy-Icarus 主题自定义</a> – 基于Icarus主题</li><li>本文所修改的主题文件已fork到<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne" rel="external nofollow noreferrer">GitHub仓库</a></li></ul></blockquote><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><blockquote><p>需要了解的几个文档：</p><ul><li><a href="https://hexo.io/zh-cn/docs/variables" rel="external nofollow noreferrer">hexo官方文档里对于变量的说明</a></li><li><a href="https://hexo.io/zh-cn/docs/helpers" rel="external nofollow noreferrer">hexo官方文档里对于辅助函数的说明</a></li><li><a href="https://ejs.bootcss.com" rel="external nofollow noreferrer">ejs嵌入开发各个标签的含义</a></li><li><a href="https://bulma.zcopy.site/documentation/" rel="external nofollow noreferrer">bulma框架中文文档</a></li></ul></blockquote><p>首先我们要知道icarus的文件结构。icarus采用了ejs模板语言生成页面，使用Bulma框架作为页面样式的控制框架。icatus源代码良好书写习惯的可扩展性是我们修改的基础。icarus所有的页面样式都存在<code>themes/icarus/layout</code>中，我们重点需要关注的文件有:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">|-- icarus<br>    |-- _config.yml<br>    |-- includes<br>    |   |-- generators<br>    |   |   |-- categories.js<br>    |   |   |-- category.js    <span class="hljs-comment"># 需要修改，换目录页为时间轴展示</span><br>    |   |   |-- insight.js<br>    |   |   |-- tag.js            <span class="hljs-comment"># 后期加入，换标签页为时间轴展示</span><br>    |   |   |-- tags.js<br>    |-- layout<br>    |   |-- archive.ejs            <span class="hljs-comment"># 控制归档页页面</span><br>    |   |-- category.ejs        <span class="hljs-comment"># 用于控制单个目录页页面</span><br>    |   |-- categories.ejs    <span class="hljs-comment"># 用于控制母目录页页面</span><br>    |   |-- tag.ejs                    <span class="hljs-comment"># 用于控制单个标签页页面</span><br>    |   |-- tags.ejs                <span class="hljs-comment"># 用于控制母标签页页面</span><br>    |   |-- custom_cat.ejs    <span class="hljs-comment"># 后期加入，模仿archive.ejs，替换category.ejs</span><br>    |   |-- custom_tag.ejs    <span class="hljs-comment"># 后期加入，模仿archive.ejs，替换tag.ejs</span><br>    |   |-- layout.ejs            <span class="hljs-comment"># 控制homepage的页面和比例</span><br>    |   |-- comment<br>    |   |   |-- valine.ejs    <span class="hljs-comment"># 补充源主题缺少的头像控制</span><br>    |   |-- common        <span class="hljs-comment"># common中存放控制各个页面共有区域</span><br>    |   |   |-- head.ejs        <span class="hljs-comment"># 控制每个网页的&lt;head&gt;中的信息，设置seo时修改</span><br>    |   |   |-- footer.ejs    <span class="hljs-comment"># 控制每个网页的脚注</span><br>    |   |   |-- article.ejs <span class="hljs-comment"># 控制博客正文页面</span><br>    |   |   |-- navbar.ejs    <span class="hljs-comment"># 控制导航栏</span><br>    |   |   |-- widget.ejs    <span class="hljs-comment"># 控制所有widget比例</span><br>    |   |   |-- copyright.ejs    <span class="hljs-comment"># 后期加入，添加文末版权栏</span><br>    |   |-- widget        <span class="hljs-comment"># 存放各个widget界面</span><br>    |       |-- map.ejs            <span class="hljs-comment"># 添加访客地图widget</span><br>    |       |-- map.locals.js            <span class="hljs-comment"># 缓存文件</span><br>    |       |-- music.ejs        <span class="hljs-comment"># 添加音乐widget</span><br>    |       |-- music.locals.js        <span class="hljs-comment"># 缓存文件</span><br>    |-- source<br>        |-- css<br>        |   |-- back-to-top.css<br>        |   |-- copyright.styl    <span class="hljs-comment"># 后期加入控制版权栏的页面样式</span><br>        |   |-- progressbar.css<br>        |   |-- style.styl    <span class="hljs-comment"># 大部分的页面样式</span><br>        |-- images<br>        |   |-- thumbnail.svg<br>        |   |-- Alipay.jpg<br>        |   |-- wechatpay.jpg<br>        |-- js<br></code></pre></td></tr></table></figure><ul><li>其余我想要做改动的还有plugin文件夹，用于存放分析和计数需要的工具；search文件夹，用于存放几种搜索所需要的工具(icarus作者并没有使用hexo-generate-search的插件生成索引，而是自己写了一个insight函数生成索引列表。respect🤔。但是它的搜索展现思路变为了仅显示包含搜索条件的文章名和首行，这与我们希望显示搜索条件出现在文章的哪一处的需求不同😑) <code>icarus v3.0中已经改变insight🔍展示文章内容</code></li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><blockquote><p>插件是最简单的提升博客丰富性的方法。而多数插件只需要一行js代码就能实现</p></blockquote><h3 id="访客地球"><a href="#访客地球" class="headerlink" title="访客地球"></a>访客地球</h3><div align="center">    <img src="/posts/65512/Screenshot2020-03-0622.22.35.png" alt="revolvermaps" style="zoom: 50%;"></div><ul><li><p>功能：展示页面的总浏览量/页面浏览人来源的的热力图/同时在线人的地址标签</p></li><li><p>地址：<a href="https://www.revolvermaps.com" rel="external nofollow noreferrer">RevolverMaps官网</a></p></li><li><p>使用方法：</p></li></ul><ol><li><p>在官网复制所给的js代码</p></li><li><p>在<code>/icarus/layout/widget</code>目录下，新建文件<code>map.ejs</code>和<code>map.locals.js</code>。把复制的js代码粘贴到<code>map.ejs</code>文件中，而<code>map.locals.js</code>中复制它隔壁的profile.locals.js中的内容即可。该文件的作用是绑定渲染该ejs文件(可以不添加)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">"text/javascript"</span> src=<span class="hljs-string">"//rf.revolvermaps.com/0/0/6.js?i=53u8jvixw8q&amp;m=7&amp;c=e63100&amp;cr1=ffffff&amp;f=arial&amp;l=0&amp;bv=90&amp;lx=-420&amp;ly=420&amp;hi=20&amp;he=7&amp;hc=a8ddff&amp;rs=80"</span> <span class="hljs-keyword">async</span>=<span class="hljs-string">"async"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">ctx, locals</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> locals;  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在<code>/icarus/_config.yml</code>配置文件中，模仿已有的widget，添加如下字段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span><br> <span class="hljs-attr">type:</span> <span class="hljs-string">map</span><br> <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br></code></pre></td></tr></table></figure></li><li><p>现在我们有一个访客地球的widget了!</p></li></ol><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><div align="center">    <img src="/posts/65512/Screenshot2020-03-0623.39.29.png" alt="netEaseMusic" style="zoom: 50%;"></div><ul><li><p>功能：网易云音乐外链播放器</p></li><li><p>地址：<a href="https://music.163.com/" rel="external nofollow noreferrer">网易云音乐官网</a></p></li><li><p>使用方法：</p><ol><li><p>在网易云音乐官网，登录后，选择一个歌单，点击歌单左上角的生成外链播放器，注意，歌单中不能包含VIP歌曲，否则会提示版权不允许</p><p><img src="/posts/65512/Screenshot2020-03-0700.01.12.png" alt="歌单页面示例"></p></li><li><p>生成iframe插件。建议使用iframe插件，一方面是可以自己调整插件的属性，另一方面是很多浏览器现在对flash的使用有限制。复制给出的HTML代码</p><p><img src="/posts/65512/Screenshot2020-03-0700.00.43.png" alt="生成插件页面"></p></li><li><p>与添加访客地球widget的过程类似，在<code>/icarus/layout/widget</code>目录下，新建文件<code>music.ejs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;iframe <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"card widget"</span> height=<span class="hljs-number">400</span> width=<span class="hljs-number">100</span>% src=<span class="hljs-string">"//music.163.com/outchain/player?type=0&amp;id=4878237788&amp;auto=0&amp;height=430"</span>&gt;&lt;<span class="hljs-regexp">/iframe&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>music.locals.js</code>填入与之前一样的绑定渲染函数</p></li><li><p>在<code>/icarus/_config.yml</code>配置文件中，模仿已有的widget，添加如下字段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">netEase</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br></code></pre></td></tr></table></figure></li><li><p>现在我们有一个播放器的widget了😺</p></li></ol></li></ul><h3 id="人体时钟"><a href="#人体时钟" class="headerlink" title="人体时钟"></a>人体时钟</h3><div align="center">  <img src="/posts/65512/Screenshot2020-03-0700.16.52.png" alt="clock" style="zoom: 50%;"></div><ul><li><p>功能：在导航栏上添加一个有交互性的小人时钟</p></li><li><p>地址：<a href="http://chabudai.org/blog/?p=59" rel="external nofollow noreferrer">ホネホネ・クロック 時計・ブログパーツ</a>(这个作者审美超级好🥰)</p></li><li><p>使用方法：</p><ol><li><p>复制作者给的js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script charset=<span class="hljs-string">"Shift_JIS"</span> src=<span class="hljs-string">"http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>/icarus/layout/common/nvabar.ejs</code>中，在第四行，添加一个新的块。<code>class=&quot;is-hidden-mobile&quot;</code>是bulma框架中的一种样式，意为当屏幕宽度小于desktop时，不显示该元素。因为平板和手机的浏览器中一般没有flash插件，所以做这个处理。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;nav class="navbar navbar-main"&gt;<br>    &lt;div class="container"&gt;<br>        &lt;div class="navbar-brand is-flex-center"&gt;<br>          &lt;!--以下是新插入的块 --&gt;<br><span class="hljs-addition">+                &lt;div class="is-hidden-mobile"&gt; </span><br><span class="hljs-addition">+                    &lt;script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"&gt;&lt;/script&gt;</span><br><span class="hljs-addition">+                &lt;/div&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="添加密码"><a href="#添加密码" class="headerlink" title="添加密码"></a>添加密码</h3><p>该功能由 <a href="https://github.com/MikeCoder/hexo-blog-encrypt" rel="external nofollow noreferrer">hexo-blog-encrypt</a> 插件提供，效果可见<a href="/posts/27073/">DUDES</a></p><p>使用方法参阅<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" rel="external nofollow noreferrer">hexo-blog-encrypt官方文档</a>即可</p><h3 id="黑暗模式"><a href="#黑暗模式" class="headerlink" title="黑暗模式"></a>黑暗模式</h3><blockquote><p><a href="https://github.com/ppoffice/hexo-theme-icarus/issues/564" rel="external nofollow noreferrer">imaegoo：[tutorial] support night dark mode</a></p></blockquote><p>在命令行，进入博客的根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入icarus目录</span><br><span class="hljs-built_in">cd</span> themes/icarus<br><span class="hljs-comment"># 添加远端仓库night</span><br>git remote add night https://github.com/imaegoo/hexo-theme-icarus.git<br><span class="hljs-comment"># 从远端仓库的night拉取night分支</span><br>git pull night night<br><span class="hljs-comment"># 查看并确认当前分支是master</span><br>git status<br><span class="hljs-comment"># 合并master分支和night分支，原master分支合并是不会有conflict的，如果有的话修一下</span><br>git merge night<br></code></pre></td></tr></table></figure><p>现在博客的navbar中新出现了一个小灯泡图标，点一下就能看到黑暗模式效果了</p><p>现在我们添加根据浏览器设置自动变为黑暗模式的代码，除了根据浏览器的配色模式，如果当晚/日，用户已经有与浏览器模式不同的选择，要遵循用户的选择 (即当晚浏览器是dark mode时，用户在博客内选择light mode，或相反)</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ let mode = window.matchMedia('(prefers-color-scheme: dark)').matches;</span><br><span class="hljs-addition">+ if(mode.toString() != localStorage.getItem('current'))&#123;</span><br><span class="hljs-addition">+    localStorage.setItem('switched', 'false');</span><br><span class="hljs-addition">+    localStorage.setItem('current', window.matchMedia('(prefers-color-scheme: dark)').matches);</span><br><span class="hljs-addition">+ &#125;</span><br><span class="hljs-addition">+ if(localStorage.getItem('switched') != 'true')&#123;</span><br><span class="hljs-addition">+    isNight = window.matchMedia('(prefers-color-scheme: dark)').matches;</span><br><span class="hljs-addition">+ &#125;</span><br>findNightNav();<br>applyNight(isNight);<br></code></pre></td></tr></table></figure><blockquote><p>js获取浏览器颜色模式代码：<code>window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches</code></p></blockquote><h3 id="related-post-widget"><a href="#related-post-widget" class="headerlink" title="related post widget"></a>related post widget</h3><ul><li>在每篇博文增加一个widget，展示和这篇文章有相同tag的文章列表</li></ul><ol><li>添加文件<code>layout/widget/related_posts.ejs</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build_list</span>(<span class="hljs-params">tags,post</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> tags.map(<span class="hljs-function"><span class="hljs-params">tag</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> result =<span class="hljs-string">''</span>;<br>        post.tags.map(<span class="hljs-function"><span class="hljs-params">ptag</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>( ptag.name === tag.name &amp;&amp; post.title != page.title &amp;&amp; flag === <span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">if</span> (get_config(<span class="hljs-string">'article.thumbnail'</span>)=== <span class="hljs-literal">true</span> )&#123;<br>                    result+= <span class="hljs-string">`&lt;article class="media"&gt; &lt;a href="<span class="hljs-subst">$&#123;url_for(post.link ? post.link : post.path)&#125;</span>" class="media-left"&gt;<br>                        &lt;p class="image is-64x64"&gt;<br>                            &lt;img class="thumbnail" src="<span class="hljs-subst">$&#123;get_thumbnail(post)&#125;</span>" alt="<span class="hljs-subst">$&#123;post.title&#125;</span>"&gt;<br>                        &lt;/p&gt;<br>                    &lt;/a&gt;`</span>;<br>                &#125;<br>                result+=<span class="hljs-string">`&lt;div class="media-content"&gt;<br>                    &lt;div class="content"&gt;<br>                        &lt;div&gt;&lt;time class="has-text-grey is-size-7 is-uppercase" datetime="<span class="hljs-subst">$&#123;date_xml(post.date)&#125;</span>"&gt;<span class="hljs-subst">$&#123;date(post.date)&#125;</span>&lt;/time&gt;&lt;/div&gt;<br>                        &lt;a href="<span class="hljs-subst">$&#123;url_for((post.link?post.link:post.path))&#125;</span>" class="title has-link-black-ter is-size-6 has-text-weight-normal"&gt;<span class="hljs-subst">$&#123;post.title&#125;</span>&lt;/a&gt;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            &lt;/article&gt;`</span>;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;)<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;).join(<span class="hljs-string">''</span>);<br>&#125;<br>%&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card widget"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-content"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"menu-label"</span>&gt;</span><br>            related posts<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">site.posts.forEach</span>(<span class="hljs-attr">post</span> =&gt;</span> &#123; %&gt; <br>            <span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">build_list</span>(<span class="hljs-attr">page.tags</span> , <span class="hljs-attr">post</span>) %&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125;) %&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>同目录下添加渲染绑定js文件<code>related_posts.locals.js</code>，使该widget仅对posts页面生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">ctx, locals</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; layout, content &#125; = ctx.page;<br>    <span class="hljs-keyword">const</span> &#123; get_config &#125; = ctx;<br>    <span class="hljs-keyword">if</span> (layout !== <span class="hljs-string">'page'</span> &amp;&amp; layout !== <span class="hljs-string">'post'</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(locals, &#123; content &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>_config.yml</code>中，widget下添加related_posts</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff">widget:<br><span class="hljs-addition">+    -</span><br><span class="hljs-addition">+        type: recent_posts</span><br><span class="hljs-addition">+        position: left</span><br></code></pre></td></tr></table></figure><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="修改分栏比例"><a href="#修改分栏比例" class="headerlink" title="修改分栏比例"></a>修改分栏比例</h3><blockquote><p>参考文章：</p><ul><li><a href="https://bulma.zcopy.site/documentation/" rel="external nofollow noreferrer">bulma框架中文文档</a></li><li><a href="https://lqwang.net/5.html" rel="external nofollow noreferrer">Hexo&amp;icarus主题修改</a></li><li>我在主题修改中把比例配置抽取到_config.yml中了，可见<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne" rel="external nofollow noreferrer">GitHub仓库</a></li></ul></blockquote><ul><li>原本icarus最大化后三栏居中，两侧会有很宽的空白，我想消灭这个空白；</li><li>我想实现的展示逻辑是，屏幕宽度足够时，首页显示三栏，博文页显示两栏；如果屏幕宽度再增加，则都显示三栏。以下把profile\link\recent_poat\tag\archive这几个widget分类为个人资料栏(统称profile栏)，top\tagcloud\music\map分类为目录工具栏(统称目录栏)，中间的最大的那一栏统称博文栏。目录栏在博文页居左，个人资料栏在首页居左。</li><li>首先是icarus主题的<code>_config.yml</code>，加入以下配置。相关配置含义之后会做解释。我们的网页最大化后两侧宽阔的白边主要就是由于原来的配置里每一栏最后相加之和不是12(bulma的12格布局)，没有占满整个屏幕。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">proportion:</span><br>    <span class="hljs-attr">homepage:</span> <span class="hljs-comment"># 非博文页</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-3-widescreen is-one-fifth-fullhd'</span><br>        <span class="hljs-attr">article:</span> <span class="hljs-string">'is-two-thirds-tablet is-6-desktop is-6-widescreen is-5-fullhd'</span><br>    <span class="hljs-attr">post:</span> <span class="hljs-comment">#博文页面</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-one-fifth-widescreen is-one-fifth-fullhd'</span><br>        <span class="hljs-attr">article:</span> <span class="hljs-string">'is-two-thirds-tablet is-9-desktop is-three-fifths-widescreen is-three-fifths-fullhd'</span><br></code></pre></td></tr></table></figure><ul><li><p>对ejs文件的改动主要涉及三个文件<code>layout/layout.ejs</code> <code>layout/common/widget.ejs</code>以及<code>source/css/style.styl</code><br>   |– icarus</p><pre><code>|-- layout|   |-- [layout.ejs](https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/layout.ejs)|   |-- common    |   |   |-- [widget.ejs](https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/widget.ejs)|-- source    |-- css    |   |-- [style.styl](https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/source/css/style.styl)</code></pre><ol><li><p><code>style.styl</code>：先说css文件，因为通过这个文件我们能更好的理解bulma框架。bulma框架自动根据屏幕大小对照我们的预设适配不同比例的页面：mobile-手机/tablet-平板/desktop-pc/widescreen-全屏/fullhd-全屏。至于不同屏幕对应哪个大小，我们可以采用icarus原有的方案，也可以用更为严格的方案：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">gap = 64px<br>screen-tablet = 769px<br>screen-desktop = 1088pxs<br>screen-widescreen = 1280px<br>screen-fullhd = 1472px<br></code></pre></td></tr></table></figure><p>根据我的经验，使用13inch的mbp，按照icarus原有的方案，屏幕的1/3是手机模式，屏幕的2/3是平板(tablet)模式，大于屏幕的2/3是pc(desktop)模式，大于屏幕的8/9是全屏(widescreen)模式</p></li><li><p><code>layout.ejs</code>：更改控制博文栏占页面比例的函数<code>main_column_class()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main_column_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (column_count()) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">'is-12'</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">'is-8-tablet is-8-desktop is-8-widescreen'</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-keyword">if</span>(is_post() === <span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.homepage.article'</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.post.article'</span>);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure><p><code>_config.yml</code>中对应设置含义：当存在三栏的配置时，如果屏幕大于平板小于pc，博文栏占2/3；如果屏幕大于pc小于全屏，对于博文页，博文栏占9/12(即3/4)，对于非博文页，博文栏占6/12(即1/2)；如果屏幕大于全屏，博文栏占3/5；fullhd以此类推</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">proportion:<br>    homepage:<br>        article: <span class="hljs-string">'is-two-thirds-tablet is-6-desktop is-6-widescreen is-5-fullhd'</span><br>    <span class="hljs-attr">post</span>:<br>        article: <span class="hljs-string">'is-two-thirds-tablet is-9-desktop is-three-fifths-widescreen is-three-fifths-fullhd'</span><br></code></pre></td></tr></table></figure></li><li><p><code>layout/common/widget.ejs</code></p><ol><li>更改控制边栏占页面比例的函数<code>side_column_class()</code>：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">_&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">side_column_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">switch</span> (column_count()) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">'is-4-tablet is-4-desktop is-3-widescreen'</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>             <span class="hljs-keyword">if</span>(is_post() === <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.homepage.sidebar'</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> get_config(<span class="hljs-string">'proportion.post.sidebar'</span>);<br>            &#125;<br>    &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure><p>  <code>_config.yml</code>中对应设置含义：当存在三栏的配置时，当屏幕大于平板小于pc，仅显示左侧栏，占1/3，当屏幕大于pc小于全屏，博文页仅显示左侧栏，占3/12，非博文页显示左右两栏，各占3/12；以此类推</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">proportion:</span><br>    <span class="hljs-attr">homepage:</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-3-widescreen is-one-fifth-fullhd'</span><br>    <span class="hljs-attr">post:</span><br>        <span class="hljs-attr">sidebar:</span> <span class="hljs-string">'is-one-third-tablet is-3-desktop is-one-fifth-widescreen is-one-fifth-fullhd'</span><br></code></pre></td></tr></table></figure><ol start="2"><li>更改控制模块可见性的函数<code>visibility_class()</code>：如果页面不是博文页，当屏幕小于或等于平板时，仅显示左侧栏，当屏幕大于平板时，左右侧栏都显示；如果页面是博文页，当屏幕小于或等于PC大小时，仅显示左侧栏，当屏幕大于pc时，左右侧栏都显示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">visibility_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(is_post()===<span class="hljs-literal">false</span> &amp;&amp; column_count() === <span class="hljs-number">3</span> &amp;&amp; position === <span class="hljs-string">'right'</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'is-hidden-touch'</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(is_post()===<span class="hljs-literal">true</span> &amp;&amp; column_count() === <span class="hljs-number">3</span> &amp;&amp; position === <span class="hljs-string">'left'</span>)&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">'is-hidden-touch  is-hidden-desktop-only'</span>;<br>    &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>更改控制侧栏输出顺序的函数<code>order_class()</code>：当页面是博文页，目录栏在左侧，profile栏在右侧；当页面不是博文页，profile栏在左侧，目录栏在右侧</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">order_class</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(is_post() === <span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">return</span> position === <span class="hljs-string">'left'</span> ? <span class="hljs-string">'has-order-3'</span> : <span class="hljs-string">'has-order-1'</span>;<br>    &#125;<br> <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> position === <span class="hljs-string">'right'</span> ? <span class="hljs-string">'has-order-3'</span> : <span class="hljs-string">'has-order-1'</span>;<br> &#125;<br>&#125; %&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>更改主函数，大概从第27行开始，做下述更改。这里函数原本的意思是，在屏幕小于全屏时，将右侧栏合并到左侧栏显示。我们更改为，当页面不是博文页且屏幕大小小于pc时，将右侧栏合并到左侧栏</li></ol><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-    &lt;% if (position === 'left') &#123; %&gt;</span><br><span class="hljs-addition">+      &lt;% if (position === 'left' &amp;&amp; is_post() === false ) &#123; %&gt;</span><br><span class="hljs-deletion">-      &lt;div class="column-right-shadow is-hidden-widescreen &lt;%= sticky_class('right') %&gt;"&gt;</span><br><span class="hljs-addition">+      &lt;div class="column-right-shadow is-hidden-desktop"&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>至于说手机端的情况，反正只有一栏，保持原来的设置不变就好了，但是原来的设置中手机端首页是先显示博文再显示profile等widget，而我希望手机端的首页先展示profile的widget，这个非常容易，在<code>layout/layout.ejs</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;%-  _partial(<span class="hljs-string">'common/widget'</span>, &#123; <span class="hljs-attr">position</span>: <span class="hljs-string">'left'</span> &#125;) %&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column &lt;%= main_column_class() %&gt; has-order-2 column-main"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">body</span> %&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;%-  _partial(<span class="hljs-string">'common/widget'</span>, &#123; <span class="hljs-attr">position</span>: <span class="hljs-string">'right'</span> &#125;) %&gt;<br></code></pre></td></tr></table></figure><p>这三行，如果第二行放在最前，手机端首页就先显示博文索引再显示所有widget，如果第一行放在前，手机端首页就先显示属性为left的widget，再显示属性为right的widget，最后显示博文索引。以此类推。</p><p>同时，如果手机端进入除了首页之外的其他主页(目录页归档页等)，profile widget也会被放在最前，我们并不需要在这些页面展示profile wideget，因此，在<code>layout/common/widget.ejs</code>中，在<code>visibility()</code>函数中添加以下选择语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(is_home()===<span class="hljs-literal">false</span> &amp;&amp; is_post()===<span class="hljs-literal">false</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'is-hidden-mobile'</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="时间轴展示目录页"><a href="#时间轴展示目录页" class="headerlink" title="时间轴展示目录页"></a>时间轴展示目录页</h3><ul><li><p>原生的icarus这两页的展示方式与homepage一致，依次展示按块展示每篇博客的标题和简介。这样的展示效率并不高。我希望把这两页的展示方式替换为和存档archive页相同的时间轴显示</p></li><li><p>我们要用到的文件有：<br>|– includes<br>|   |– generators<br>|   |   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/category.js" rel="external nofollow noreferrer">category.js</a><br>|   |   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/tag.js" rel="external nofollow noreferrer">tag.js</a><br>|– layout<br>|   |– archive.ejs<br>|   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_cat.ejs" rel="external nofollow noreferrer">custom_cat.ejs</a><br>|   |– <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_tag.ejs" rel="external nofollow noreferrer">custom_tag.ejs</a></p></li></ul><ol><li><p>修改目录页生成器<code>/includes/generators/category.js</code>：在第23行，把默认输出页面样式的archive排到最前即可</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- layout: ['category', 'archive', 'index'],</span><br><span class="hljs-addition">+ layout: ['archive', 'category', 'index'],</span><br></code></pre></td></tr></table></figure><p>  这样修改后，进入目录页，比如<a href="/categories/Code/Guide/">Code/Guide</a>后，页面就会按照时间轴显示该分类下所有文章，但是时间轴的标签依旧是2020\2019，而且文章的信息只有日期似乎有些寡淡了，如果我们想展示文章字数/展示文章阅读人数/让标签显示分类的名称呢？</p><p>  <img src="/posts/65512/Screenshot2020-03-0823.50.38.png" alt="code/guide目录页示意图"></p><p>  其实非常简单。我们在layout文件夹下，新建一个文件<code>custom_cat.ejs</code></p><ol><li><p>复制<code>archive.ejs</code>中的代码到<code>custom_cat.ejs</code></p></li><li><p>修改时间轴标签为分类名称：第六行，进行替换</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;h3 class="tag is-link"&gt;<br><span class="hljs-deletion">-   &lt;%= month === null ? year : time.locale(get_config('language', 'en')).format('MMMM YYYY') %&gt;</span><br><span class="hljs-addition">+   &lt;%= page.category %&gt;</span><br>&lt;/h3&gt;<br></code></pre></td></tr></table></figure></li><li><p>显示文章的字数和估计阅读时间：在第十九行的<code>class=content</code>块的<code>&lt;time&gt;</code>标签中，添加<code>&lt;span&gt;</code>块</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;div class="content"&gt;<br>    &lt;time class="has-text-grey is-size-7 is-block is-uppercase" datetime="&lt;%= date_xml(post.date) %&gt;"&gt;&lt;%= date(post.date) %&gt;<br><span class="hljs-addition">+       &lt;span&gt;</span><br><span class="hljs-addition">+             </span><br><span class="hljs-addition">+          &lt;% const words = word_count(post._content); %&gt;</span><br><span class="hljs-addition">+          &lt;% const time = duration((words / 150.0) * 60, 'seconds') %&gt;</span><br><span class="hljs-addition">+          &lt;%= `$&#123; time.locale(get_config('language', 'en')).humanize() &#125; $&#123; __('article.read')&#125; ($&#123; __('article.about') &#125; $&#123; words &#125; $&#123; __('article.words') &#125;)` %&gt;</span><br><span class="hljs-addition">+       &lt;/span&gt;</span><br>    &lt;/time&gt;<br></code></pre></td></tr></table></figure></li><li><p>添加阅读次数。</p><p>  尽管busuanzi十分方便，但是它不支持在目录页显示每篇文章的阅读量(=_=就是一个API)，所以我们要换用一个新的页面统计工具，为防止此部分篇章过长，相关配置将放到本文的<a href="https://www.githang.com/2019/05/30/hexo-article-reading-statistics-based-on-leancloud/" rel="external nofollow noreferrer">阅读量统计替换</a>部分。</p><div class="tip">      以下代码未通过测试，请勿使用  </div><p>  在<code>custom_cat.ejs</code>的第四十行左右，进行以下内容的添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span> (post.categories &amp;&amp; post.categories.length) &#123; %&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"level-item is-size-7 is-uppercase"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">list_categories</span>(<span class="hljs-attr">post.categories</span>, &#123;<br>        <span class="hljs-attr">class:</span> '<span class="hljs-attr">has-link-grey</span> ',<br>        <span class="hljs-attr">show_count:</span> <span class="hljs-attr">false</span>,<br>        <span class="hljs-attr">style:</span> '<span class="hljs-attr">none</span>',<br>        <span class="hljs-attr">separator:</span> ' / '<br>    &#125;) %&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;% &#125; %&gt;<br> &lt;% <span class="hljs-keyword">if</span> (has_config(<span class="hljs-string">'comment.appID'</span>) &amp;&amp; get_config(<span class="hljs-string">'comment.type'</span>) === <span class="hljs-string">'valine'</span>) &#123; %&gt;<br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"level-item has-text-grey is-size-7 is-uppercase"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"far fa-eye"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">_p</span>('<span class="hljs-attr">plugin.visit</span>', '&lt;<span class="hljs-attr">span</span> <span class="hljs-attr">data-hk-page</span>=<span class="hljs-string">"post.url"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-spinner fa-spin"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>') %&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure></li><li><p>再次修改目录页生成器<code>category.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">layout: [<span class="hljs-string">'custom_cat'</span>, <span class="hljs-string">'category'</span>, <span class="hljs-string">'index'</span>],<br></code></pre></td></tr></table></figure><p>完成!🤩</p><div align="center">  <img src="/posts/65512/Screenshot2020-03-0900.17.54.png" alt="最终效果" style="zoom:50%;"></div><p>​     </p></li></ol></li><li><p>用相似的方法，我们修改tag页</p><ol><li>添加生成器<code>/includes/generators/tag.js</code>。具体内容可参考<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/includes/generators/tag.js" rel="external nofollow noreferrer">tag.js</a></li><li>添加<code>layout/custom_tag</code>。内容可参考 <a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/custom_tag.ejs" rel="external nofollow noreferrer">custom_tag.ejs</a></li></ol><blockquote><p>这里说明一下，这里标签的修改只做了最简单的替换，我并没有去动archive里原本的生成函数，所以时间轴的逻辑依然是按照时间顺序排列，按照年份分区。如果希望能修改为按照分类的子目录分区–我尝试了hexo提供的<code>category.parent</code> <code>category.children</code>等重构函数，但遇到了几个异常抛出。这个bug先留一下吧。</p></blockquote></li></ol><h3 id="categories页合并tags页"><a href="#categories页合并tags页" class="headerlink" title="categories页合并tags页"></a>categories页合并tags页</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs diff">    &lt;section class="section"&gt;<br>        &lt;div&gt;<br>            &lt;div class="columns is-centered"&gt;<br>                &lt;div class="column &lt;%= main_column_class() %&gt; has-order-2 column-main"&gt;<br>                    &lt;%- body %&gt;<br><span class="hljs-addition">+                    &lt;% if (is_categories() === true) &#123; %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('tags') %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('archive') %&gt;</span><br><span class="hljs-addition">+                    &lt;% &#125; %&gt;</span><br><span class="hljs-addition">+                    &lt;% if (is_tags() === true) &#123; %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('categories') %&gt;</span><br><span class="hljs-addition">+                        &lt;%- _partial('archive') %&gt;</span><br><span class="hljs-addition">+                    &lt;% &#125; %&gt;</span><br>                &lt;/div&gt;<br>                &lt;%-  _partial('common/widget', &#123; position: 'left' &#125;) %&gt;<br>                &lt;%-  _partial('common/widget', &#123; position: 'right' &#125;) %&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br></code></pre></td></tr></table></figure><h3 id="警告块"><a href="#警告块" class="headerlink" title="警告块"></a>警告块</h3><p>在<code>source/css/style.styl</code>中添加如下样式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* ---------------------------------<br> *        Add tip block<br> * --------------------------------- */</span><br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.tip</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">24px</span> <span class="hljs-number">12px</span> <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#f66</span>;<br>    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f6f8fa</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.tip</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">"!"</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">font-family</span>: Dosis, <span class="hljs-string">"Source Sans Pro"</span>, <span class="hljs-string">"Helvetica Neue"</span>, Arial, sans-serif;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f66</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.tip</span> <span class="hljs-selector-tag">br</span> &#123; <span class="hljs-attribute">display</span>: none; &#125;<br></code></pre></td></tr></table></figure><p>在写作时，使用以下代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tip"</span>&gt;</span><br>  这里是警告块内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><div class="tip">  这里是警告块内容</div>### 页末版权<ol><li><p>在<code>layout/common</code>下添加文件<code>copyright.ejs</code>。内容可参考<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/layout/common/copyright.ejs" rel="external nofollow noreferrer">copyright.ejs</a></p></li><li><p>在<code>source/css</code>下添加文件<code>copyright.styl</code>。内容可参考<a href="https://github.com/Anne416wu/hexo-theme-icarus/blob/anne/source/css/copyright.styl" rel="external nofollow noreferrer">copyright.styl</a>。其中提供两种样式：<code>my-post-copyright</code>和<code>post-copyright</code></p></li><li><p>在<code>source/css/style.styl</code>中导入<code>copyright.styl</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* ---------------------------------<br> *        Add Copyright CSS<br> * --------------------------------- */</span><br><span class="hljs-keyword">@import</span> copyright<br></code></pre></td></tr></table></figure></li><li><p>在<code>layout/common/article.ejs</code>中插入<code>copyright.ejs</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff">&lt;div class="content"&gt;<br>    &lt;%- index &amp;&amp; post.excerpt ? post.excerpt : post.content %&gt;<br>&lt;/div&gt;<br><span class="hljs-addition">+   &lt;% if (is_post()===true) &#123; %&gt;</span><br><span class="hljs-addition">+       &lt;%- _partial('common/copyright') %&gt;</span><br><span class="hljs-addition">+   &lt;% &#125; %&gt;</span><br>&lt;% if (!index &amp;&amp; post.tags &amp;&amp; post.tags.length) &#123; %&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Valine-头像"><a href="#Valine-头像" class="headerlink" title="Valine 头像"></a><a href="https://valine.js.org/avatar.html" rel="external nofollow noreferrer">Valine 头像</a></h3><div class="tip">  icarus3已修复此bug</div><ul><li><p>icarus原生配置中没有默认的Valine头像值</p></li><li><p>打开<code>icarus/layout/comment/valine.ejs</code>，插入avatar的配置信息</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"> &lt;script&gt;<br>    new Valine(&#123;<br>        el: '#valine-thread' ,<br><span class="hljs-addition">+        avatar: 'retro',</span><br>        notify: &lt;%= get_config('comment.notify') %&gt; ,<br>        verify: &lt;%= get_config('comment.verify') %&gt; ,<br>        app_id: '&lt;%= get_config('comment.app_id') %&gt;',<br>        app_key: '&lt;%= get_config('comment.app_key') %&gt;',<br>        placeholder: '&lt;%= get_config('comment.placeholder') %&gt;',<br>  &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>评论默认头像将会变为八位像素复古头像，如果用户在gravatar注册过，则会显示注册的绑定头像</p></li><li><p>Valine更多默认头像设置参考<a href="https://valine.js.org/avatar.html" rel="external nofollow noreferrer">Valine头像配置</a></p></li></ul><h2 id="数据统计和优化"><a href="#数据统计和优化" class="headerlink" title="数据统计和优化"></a>数据统计和优化</h2><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/35400128" rel="external nofollow noreferrer">知乎专栏：hexo博客搭建（五）SEO优化</a></p></blockquote><h3 id="评论邮件回执"><a href="#评论邮件回执" class="headerlink" title="评论邮件回执"></a>评论邮件回执</h3><blockquote><p><a href="https://deserts.io/valine-admin-document/" rel="external nofollow noreferrer">Valine Admin 配置手册</a></p></blockquote><h3 id="修改阅读量统计服务为leancloud"><a href="#修改阅读量统计服务为leancloud" class="headerlink" title="修改阅读量统计服务为leancloud"></a>修改阅读量统计服务为leancloud</h3><p><span id="leancloud"></span></p><blockquote><p>参考文章</p><p><a href="https://www.githang.com/2019/05/30/hexo-article-reading-statistics-based-on-leancloud/" rel="external nofollow noreferrer">https://www.githang.com/2019/05/30/hexo-article-reading-statistics-based-on-leancloud/</a></p><p><a href="https://jerryzou.com/posts/introduction-to-hit-kounter-lc/" rel="external nofollow noreferrer">https://jerryzou.com/posts/introduction-to-hit-kounter-lc/</a></p><p><a href="https://github.com/bulandent/hexo-theme-bubuzou/blob/master/doc/doc-zh.md" rel="external nofollow noreferrer">https://github.com/bulandent/hexo-theme-bubuzou/blob/master/doc/doc-zh.md</a></p></blockquote><p>因为我们在配置Valine时已经注册了leancloud，所以这里就以leancloud为例。</p><div class="tobecontinues">------ to be continued ------</div>### 添加ads<p><a href="https://donlex.cn/archives/6102cfc3.html" rel="external nofollow noreferrer">Hexo接入Google AdSense广告</a></p><h3 id="Gulp压缩"><a href="#Gulp压缩" class="headerlink" title="Gulp压缩"></a>Gulp压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install gulp --save<br>npm install gulp-minify-css --save<br>npm install gulp-uglify --save<br>npm install gulp-htmlmin --save<br>npm install gulp-htmlclean --save<br>npm install gulp-imagemin --save<br></code></pre></td></tr></table></figure><div class="tip">  gulp-imagemin 模块有问题</div>添加Gulpfile<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);<br><span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-minify-css'</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-uglify'</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-htmlmin'</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-htmlclean'</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-imagemin'</span>);<br><span class="hljs-keyword">var</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-babel'</span>);<br><span class="hljs-comment">// gulp-babel 取消严格模式方法("use strict")</span><br><span class="hljs-keyword">var</span> removeUseStrict = <span class="hljs-built_in">require</span>(<span class="hljs-string">"gulp-remove-use-strict"</span>);<br><br><span class="hljs-comment">// 压缩css文件</span><br>gulp.task(<span class="hljs-string">'minify-css'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">'./public/**/*.css'</span>)<br>        .pipe(minifycss())<br>        .pipe(gulp.dest(<span class="hljs-string">'./public'</span>));<br>    done();<br>&#125;);<br><br><span class="hljs-comment">// 压缩html文件</span><br>gulp.task(<span class="hljs-string">'minify-html'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">'./public/**/*.html'</span>)<br>        .pipe(htmlclean())<br>        .pipe(htmlmin(&#123;<br>            <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>,<br>        &#125;))<br>        .pipe(gulp.dest(<span class="hljs-string">'./public'</span>));<br>    done();<br>&#125;);<br><br><span class="hljs-comment">// 压缩js文件</span><br>gulp.task(<span class="hljs-string">'minify-js'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src([<span class="hljs-string">'./public/**/*.js'</span>, <span class="hljs-string">'!./public/**/*.min.js'</span>])<br>        .pipe(babel(&#123;<br>            <span class="hljs-comment">//将ES6代码转译为可执行的JS代码</span><br>            <span class="hljs-attr">presets</span>: [<span class="hljs-string">'es2015'</span>] <span class="hljs-comment">// es5检查机制</span><br>        &#125;))<br>        .pipe(uglify())<br>        .pipe(removeUseStrict()) <span class="hljs-comment">//取消严格模式方法("use strict")</span><br>        .pipe(gulp.dest(<span class="hljs-string">'./public'</span>));<br>    done();<br>&#125;);<br><br><span class="hljs-comment">// 压缩 public/images 目录内图片(Version&lt;3)</span><br><span class="hljs-comment">// gulp.task('minify-images', function () &#123;</span><br><span class="hljs-comment">//     gulp.src('./public/images/**/*.*')</span><br><span class="hljs-comment">//         .pipe(imagemin(&#123;</span><br><span class="hljs-comment">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="hljs-comment">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="hljs-comment">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="hljs-comment">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="hljs-comment">//         &#125;))</span><br><span class="hljs-comment">//         .pipe(gulp.dest('./public/images'));</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// 压缩 public/images 目录内图片(Version&gt;3)</span><br>gulp.task(<span class="hljs-string">'minify-images'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) </span>&#123;<br>    gulp.src(<span class="hljs-string">'./public/images/**/*.*'</span>)<br>        .pipe(imagemin([<br>            imagemin.gifsicle(&#123;<span class="hljs-attr">interlaced</span>: <span class="hljs-literal">true</span>&#125;),<br>            imagemin.jpegtran(&#123;<span class="hljs-attr">progressive</span>: <span class="hljs-literal">true</span>&#125;),<br>            imagemin.optipng(&#123;<span class="hljs-attr">optimizationLevel</span>: <span class="hljs-number">5</span>&#125;),<br>            imagemin.svgo(&#123;<br>                <span class="hljs-attr">plugins</span>: [<br>                    &#123;<span class="hljs-attr">removeViewBox</span>: <span class="hljs-literal">true</span>&#125;,<br>                    &#123;<span class="hljs-attr">cleanupIDs</span>: <span class="hljs-literal">false</span>&#125;<br>                ]<br>            &#125;)<br>        ]))<br>        .pipe(gulp.dest(<span class="hljs-string">'./public/images'</span>));<br>    done();<br>&#125;);<br><br><span class="hljs-comment">//4.0以前的写法 </span><br><span class="hljs-comment">//gulp.task('default', [</span><br><span class="hljs-comment">//  'minify-html', 'minify-css', 'minify-js', 'minify-images'</span><br><span class="hljs-comment">//]);</span><br><span class="hljs-comment">//4.0以后的写法</span><br><span class="hljs-comment">// 执行 gulp 命令时执行的任务</span><br>gulp.task(<span class="hljs-string">'default'</span>, gulp.series(gulp.parallel(<span class="hljs-string">'minify-html'</span>, <span class="hljs-string">'minify-css'</span>, <span class="hljs-string">'minify-js'</span>)), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"----------gulp Finished----------"</span>);<br>    <span class="hljs-comment">// Do something after a, b, and c are finished.</span><br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;基于icarus主题的Hexo博客装修。本文将介绍除了icarus在_config.yml中提供的功能以外，通过修改其源代码实现的其他扩展功能，页面文件样式的进一步美化等。属于深度定制自己的主题，需要基础的CSS和HTML知识。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="hexo" scheme="https://www.annewqx.top/tags/hexo/"/>
    
      <category term="JavaScript" scheme="https://www.annewqx.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客：部署</title>
    <link href="https://www.annewqx.top/posts/65182/"/>
    <id>https://www.annewqx.top/posts/65182/</id>
    <published>2020-02-24T05:53:24.000Z</published>
    <updated>2022-07-25T01:47:37.882Z</updated>
    
    <content type="html"><![CDATA[<hr><p>通过创建远端git仓库，将本地的hexo博客部署到远端服务器并通过Nginx服务运行</p><a id="more"></a><blockquote><p>参考文章：<a href="https://ihaoming.top/archives/c9c37af.html" rel="external nofollow noreferrer">芒果浩明</a></p><p>已将nginx替换为Caddy，相关文章见<a href="/posts/2210/">使用Caddy替换Nginx运行网站</a></p></blockquote><h2 id="操作环境及先决条件"><a href="#操作环境及先决条件" class="headerlink" title="操作环境及先决条件"></a>操作环境及先决条件</h2><ul><li>本地macOS Catalina</li><li>centOS 7的VPS</li><li>本地需要的相关环境：git、nodejs、hexo、ssh-key，相关文章见<a href="/posts/2727/">hexo博客搭建入门</a></li></ul><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>使用root身份登录服务器<code>ssh root@IP</code></p><h3 id="创建网站目录"><a href="#创建网站目录" class="headerlink" title="创建网站目录"></a>创建网站目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建网站文件夹</span><br>sudo mkdir /var/www/blog<br></code></pre></td></tr></table></figure><h3 id="安装配置git"><a href="#安装配置git" class="headerlink" title="安装配置git"></a>安装配置git</h3><ol start="2"><li><p>安装git<code>sudo yum install git</code></p></li><li><p>创建git用户 <code>adduser git</code></p><p>假如没有提示输入密码，则<code>passwd git</code> 设置密码</p></li><li><p>初始化git仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置文件可写</span><br>chmod 740 /etc/sudoers<br><span class="hljs-comment"># 编辑用户配置文件</span><br>vim /etc/sudoers<br></code></pre></td></tr></table></figure><p>找到<code>root    ALL=(ALL) ALL</code>，换行添加<code>git     ALL=(ALL) ALL</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改回文件权限</span><br>chmod 440 /etc/sudoers<br>su git                <span class="hljs-comment"># 切换到git用户</span><br><span class="hljs-built_in">cd</span> /home/git        <span class="hljs-comment"># 切换到git用户目录</span><br>mkdir blog.git      <span class="hljs-comment"># 创建git仓库文件夹，以blog.git为例</span><br><span class="hljs-built_in">cd</span> blog.git          <span class="hljs-comment"># 进入仓库目录</span><br>git init --bare     <span class="hljs-comment"># 使用--bare参数初始化为裸仓库</span><br></code></pre></td></tr></table></figure></li><li><p>确认文件夹权限</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 确认文件夹权限</span><br>sudo chown git:git -R /var/www/blog<br>sudo chown git:git -R /home/git/blog.git<br><span class="hljs-comment"># 查看这两个文件夹是不是都属于git:git</span><br>ll /home/git/<br>ll /var/www/<br></code></pre></td></tr></table></figure></code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>6. 配置Git hooks<br>   <br>   &#96;&#96;&#96;bash<br>   cd &#x2F;home&#x2F;git&#x2F;blog.git&#x2F;hooks        # 切换到hooks目录下<br>   vim post-receive                     # 创建文件<br></code></pre></td></tr></table></figure><p>复制下面的内容到post-receive中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>GIT_REPO=/home/git/blog.git<br>TMP_GIT_CLONE=/tmp/blog<br>PUBLIC_WWW=/var/www/blog<br>rm -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span><br>git <span class="hljs-built_in">clone</span> <span class="hljs-variable">$GIT_REPO</span> <span class="hljs-variable">$TMP_GIT_CLONE</span><br>rm -rf <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span>/*<br>cp -rf <span class="hljs-variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span><br></code></pre></td></tr></table></figure><p>保存退出，执行<code>chmod +x post-receive</code>赋予可执行权限</p></li></ol><h3 id="配置ssh免密登录"><a href="#配置ssh免密登录" class="headerlink" title="配置ssh免密登录"></a>配置ssh免密登录</h3><p><strong>这一步可以省略，如果省略之后git部署的时候输入git的用户密码即可</strong></p><ol><li><p>本地电脑创建SSH key（已有则跳过此步骤）</p><blockquote><p>ssh key是让我们每次登陆的时候无需输入密码，通过本机机器码验证的方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看本地的SSH key</span><br><span class="hljs-built_in">cd</span> ~/.ssh<br>ls *.pub<br><span class="hljs-comment"># 创建新的SSH key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">"email@example.com"</span><br><span class="hljs-comment"># 将key加入用户列表，否则每次都会需要验证电脑登录密码</span><br>ssh-add -k /Users/apple/.ssh/id_rsa<br></code></pre></td></tr></table></figure></li><li><p>复制<code>cat ~/.ssh/id_rsa.pub</code>的内容</p></li><li><p>ssh连接到服务器，配置ssh秘钥登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git                <span class="hljs-comment"># 切换到git用户目录</span><br>mkdir .ssh                  <span class="hljs-comment"># 创建.ssh目录</span><br>sudo vim .ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>将复制的本地公钥粘贴到到<code>authorized_keys</code>文件中，</p><p>编辑登录配置<code>sudo vim /etc/ssh/sshd_config</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#禁用密码验证</span><br>PasswordAuthentication no<br><span class="hljs-comment">#启用密钥验证</span><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br></code></pre></td></tr></table></figure><p>重启ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">su root        <span class="hljs-comment"># 或者exit也可以退出到root用户</span><br>service sshd restart<br></code></pre></td></tr></table></figure><p>验证git用户能否使用ssh免密登录服务器：在本地终端，输入<code>ssh git@IP</code></p><p>如果出现<code>permission denied</code>的的话，可能是权限问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod 700 ~/.ssh<br>chmod 600 ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><div class="tip">  注意 .ssh 目录与 authorized_keys 的拥有者都必须是你创建的那个用户。比如我创建了一个叫 wanghao 的用户，寻它应该是 .ssh 与 authorized_keys 的拥有者，并且必须要设置合适的权限：</div></li></ol><h3 id="安装和配置nginx"><a href="#安装和配置nginx" class="headerlink" title="安装和配置nginx"></a>安装和配置nginx</h3><blockquote><p>nginx是比较主流的网页服务器，大部分的文章都会建议使用。但是nginx的https连接配置较为复杂，如果没有特别的学习需求可以换用更为简单的Caddy。相关文章见<a href="https://dengxiaolong.com/caddy/zh/caddyfile.html" rel="external nofollow noreferrer">Caddy官方文档 </a></p></blockquote><ol><li><p>root用户身份登录到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加nginx到yum源</span><br>sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<br><span class="hljs-comment"># 安装nginx</span><br>sudo yum install -y nginx<br><span class="hljs-comment"># 启动nginx</span><br>sudo systemctl start nginx.service<br><span class="hljs-comment"># 设置开机启动</span><br>sudo systemctl <span class="hljs-built_in">enable</span> -n nginx.service<br></code></pre></td></tr></table></figure><p>在浏览器输入服务器IP地址，如果出现403 FORBIDDEN页面则说明nginx启动成功；</p><p>如果浏览器提示无法链接，请检查防火墙是否开启，如果开启</p><ul><li>使用<code>systemctl stop firewalld</code>暂时关闭防火墙；</li><li>或者使用<code>firewall-cmd --add-port=80/tcp --permanent</code>开启防火墙的80端口，再使用<code>systemctl restart firewalld.service</code>重启防火墙。</li><li>关于防火墙的详细配置，可见本博客文章<a href="/posts/9931/">VPS和Shadowsocks配置</a>最后一部分</li></ul><blockquote><p>nginx常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启动</span><br>service nginx start<br><span class="hljs-comment">#停止</span><br>nginx -s stop<br><span class="hljs-comment">#查看nginx进程</span><br>ps -ef | grep nginx<br><span class="hljs-comment">#平滑启动nginx</span><br>nginx -s reload <br><span class="hljs-comment">#强制停止nginx</span><br>pkill -9 nginx<br><span class="hljs-comment">#检查对nginx.conf文件的修改是否正确</span><br>nginx -t -c /etc/nginx/nginx.conf<br>nginx -t<br><span class="hljs-comment">#查看版本</span><br>nginx -v<br><span class="hljs-comment"># 关闭开机启动</span><br>sudo systemctl <span class="hljs-built_in">disable</span> -n nginx.service<br></code></pre></td></tr></table></figure></blockquote></li><li><p>配置nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/nginx/conf.d<br>sudo cp default.conf default.bak<span class="hljs-comment">#备份</span><br>sudo vim default.conf<br></code></pre></td></tr></table></figure><p>配置文件参考</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">server &#123;<br>    listen       80;<br>    server_name  localhost;<br>    root /var/www/blog;                // 网站根目录<br>    server_name annewqx.top www.annewqx.top;    // 域名，没有可跳过<br>     access_log  /var/log/nginx/blog_access.log;<br>     error_log   /var/log/nginx/blog_error.log;<br>     error_page 404 =  /404.html;<br><br>    location / &#123;<br>        root   /var/www/blog;<br>        index  index.html index.htm;<br>    &#125;<br>    location / &#123;<br>             root /var/www/blog;<br>             if (-f $request_filename) &#123;<br>             rewrite ^/(.*)$  /$1 break;<br>             &#125;<br>     &#125;<br>     location /nginx_status &#123;<br>           stub_status on;<br>          access_log off;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>nginx -s reload</code> 重启nginx</p></li></ol><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><ul><li>打开本地博客根目录下的_config.yml文件，找到最后的deploy配置，添加：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-comment"># github.io</span><br><span class="hljs-bullet">-</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">'git'</span><br>   <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/anne416wu/anne416wu.github.io.git</span> <br><span class="hljs-comment"># VPS</span><br><span class="hljs-bullet">-</span>     <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>     <span class="hljs-attr">repo:</span> <span class="hljs-string">git@VPS的IP:blog.git</span><br>   <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>至此,hexo三联就可以把博客部署到vps了。可以在浏览器输入服务器的IP地址查看。</p><p>如果想要通过域名访问,则需要自己在域名管理那里修改解析的线路使得域名解析指向vps服务器的ip</p><blockquote><p>git 配置完SSH 以后，push 或者pull 的时候每次都提示Enter passphrase for key ‘/Users/Username/.ssh/id_rsa’可以这样解决</p><ul><li><p>一次性：终端输入<code>eval ssh-agent</code>，<code>ssh-add</code></p></li><li><p>本次开机内永久生效：终端输入ssh-add -k /Users/Username/.ssh/id_rsa</p></li></ul></blockquote><h2 id="域名配置-非必须"><a href="#域名配置-非必须" class="headerlink" title="域名配置(非必须)"></a>域名配置(非必须)</h2><blockquote><p>参考文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/33921436" rel="external nofollow noreferrer">Namesilo 域名购买及使用教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/86961133" rel="external nofollow noreferrer">Namesilo DNS 域名解析教程和常见问题解决方法汇总</a></li></ul><p>博客已经搭好了，但是叫朋友看</p></blockquote><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><ol><li><p>注册并激活NameSilo账号</p></li><li><p>搜索并购买想要注册的域名，使用优惠码<code>go2think</code>或<code>okoff</code>可减$1</p></li><li><p>付款，如果使用支付宝，则支付宝需要是绑定了邮箱的账号。我购买的时候支付宝扣了钱后半分钟又退回了，返回了失败，最后还是用的PayPal。</p><blockquote><p>这里说一下题外话，最便宜的一般是.xyz域名，不到1刀，但是如果订单不满1刀的话是无法使用优惠券的。.top的域名原价$1.49/year，优惠后约等于不要钱啊。</p><p>另外长远考虑，不建议购买.me等国内无法备案的域名。</p></blockquote></li></ol><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><ol><li><p>打开域名管理页面，选择option栏下的蓝地球(DNS管理)按钮</p></li><li><p>删除原本的四个park解析记录</p></li><li><p>添加A记录，一条为example.com，一条为<a href="http://www.example.com" rel="external nofollow noreferrer">www.example.com</a></p><p><img src="https://pic4.zhimg.com/80/v2-fa9f2887329780a0b51661bd6fd2f1df_1440w.jpg" alt="img"></p></li><li><p>DNS解析完成后生效大改需要十五分钟</p></li><li><p>可以使用域名连接你的博客了，在浏览器输入域名查看结果</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;通过创建远端git仓库，将本地的hexo博客部署到远端服务器并通过Nginx服务运行&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="hexo" scheme="https://www.annewqx.top/tags/hexo/"/>
    
      <category term="nginx" scheme="https://www.annewqx.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客：主题比较</title>
    <link href="https://www.annewqx.top/posts/27751/"/>
    <id>https://www.annewqx.top/posts/27751/</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2023-01-04T02:27:16.795Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>hexo各个主题的比较</p></blockquote><a id="more"></a><h2 id="我的需求"><a href="#我的需求" class="headerlink" title="我的需求"></a>我的需求</h2><blockquote><p>目的：记录开发中遇到的坑，形成自己的handbook</p></blockquote><ol><li>功能：<ul><li>🔍站内搜索LeanCloud统计</li><li>🤥<a href="#valine_comment"> Valine的评论服务 </a></li><li>较为友好的代码高亮</li><li>有展示GitHub project（接入GitHub的API）的project页面</li><li>seo支持</li></ul></li><li>界面：<ul><li>首页tagCloud和categories的Widget</li><li>首页的index展示文章的tag和category标签</li><li>单篇博文内有随页面变化的目录widget</li><li>archive展示时间轴 </li></ul></li></ol><h2 id="各个theme评价"><a href="#各个theme评价" class="headerlink" title="各个theme评价"></a>各个theme评价</h2><h3 id="基于jade-pug-开发的主题"><a href="#基于jade-pug-开发的主题" class="headerlink" title="基于jade ( pug )开发的主题"></a>基于jade ( pug )开发的主题</h3><blockquote><p>Jade 是一个高性能的模板引擎，它深受 <a href="http://haml-lang.com/" rel="external nofollow noreferrer">Haml</a> 影响，它是用 JavaScript 实现的，并且可以供 <a href="http://nodejs.org/" rel="external nofollow noreferrer">Node</a> 使用，后来由于商标的原因，改为Pug  </p><div class="tip"> 以下列举的主题都仍然使用hexo-renderer-jade插件，npm会提示插件已被废弃，运行时会显示错误提示。首先要替换hexo-renderer-jade插件为hexo-renderer-pug，下载命令为npm install hexo-renderer-pug --save；然后将主题layout文件夹中的所有.jade文件替换为.pug文件</div>入门指南：[pug中文文档](https://pugjs.org/zh-cn/api/getting-started.html)</blockquote><ol><li><p><a href="https://github.com/pinggod/hexo-theme-apollo" rel="external nofollow noreferrer">Apollo</a></p><p>博客首页<br><img src="/posts/27751/apollo_homepage.png" alt="apollo_homepage"><br>博客归档页<br><img src="/posts/27751/apollo_archivepage.png" alt="apollo_archivepage"></p><ul><li>界面干净，多个theme都基于apollo开发，如<a href="https://github.com/MikeCoder/hexo-theme-Gandalfr" rel="external nofollow noreferrer">Gandalfr</a>  <a href="https://github.com/claymcleod/hexo-theme-hermes" rel="external nofollow noreferrer">Hermes</a>  <a href="https://github.com/Dreyer/hexo-theme-artemis" rel="external nofollow noreferrer">artemis</a> <a href="https://github.com/bulandent/hexo-theme-bubuzou" rel="external nofollow noreferrer">bubuzou</a> <a href="https://github.com/lyndonoc/hexo-theme-pandollo" rel="external nofollow noreferrer">pandollo</a></li><li>缺点: 功能缺乏，需要自己接入评论、目录、搜索、Widget等功能；</li></ul></li><li><p><a href="https://github.com/bulandent/hexo-theme-bubuzou" rel="external nofollow noreferrer">bubuzou</a></p><p>博客首页<br><img src="/posts/27751/bubuzou_archieve_page.png" alt="bubuzou_archieve_page"><br>博文底部<br><img src="/posts/27751/bubuzou_post_page.png" alt="bubuzou_post_page"></p><ul><li><p>基于apollo开发, 补充大量apollo缺乏的功能，如评论、目录、搜索、Widget；评论支持Valine评论；</p></li><li><p>首页 css页面适配存在缺陷（缩放时borden过小），代码高亮有缺陷，个别博文底部不会出现评论窗口(奇奇怪怪的bug)</p></li><li><p>实际使用的时候发现leancloud的访问量统计功能有缺点，留个坑；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jade">p.visit<br>    i(class&#x3D;&quot;article-timer&quot;, data-identity&#x3D;item.path)<br>   span 次访问<br>   if (is_home())<br>       i(data-hk-page&#x3D;&#39;http:&#x2F;&#x2F;anne416wu.github.io&#39;+url_for(item.path)) -<br>   else <br>       i(data-hk-page&#x3D;&quot;current&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"> <br></code></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://github.com/MikeCoder/hexo-theme-Gandalfr" rel="external nofollow noreferrer">Gandalfr</a></p><ul><li>不放图了，这玩意儿bug挺多。有意思的是作者写了个tagCloud的辅助插件，给TagCloud加上了动画效果。界面上较bubuzou更贴近apollo。</li><li>有时间的可以把Gandalfr的界面和bubuzou的功能结合一下。</li></ul></li></ol><h3 id="基于ejs开发的主题"><a href="#基于ejs开发的主题" class="headerlink" title="基于ejs开发的主题"></a>基于ejs开发的主题</h3><blockquote><p> ejs是一套简单的模板语言，利用普通的 JavaScript 代码生成 HTML 页面，相比上面使用jade，修改更为方便。个人体验感觉ejs性能的确不如jade。</p></blockquote><ol><li><p><a href="https://github.com/yanm1ng/hexo-theme-vexo" rel="external nofollow noreferrer">Vexo</a><br>博客首页<br><img src="/posts/27751/vexo_homepage.png" alt="vexo_homepage"><br>博文开头<br><img src="/posts/27751/vexo_postpage.png" alt="vexo_postpage"><br>归档页<br><img src="/posts/27751/vexo_archievepage.png" alt="vexo_archivepage"><br>项目页<br><img src="/posts/27751/vexo_projectpage.png" alt="vexo_projectpage"></p><ul><li>满足对界面的一切幻想(对界面的幻想都是这个主题惯出来的)，支持多种代码高亮</li><li>缺点：未接入搜索功能，仅支持gitment评论，无首页CLoudTag的Widget等</li><li>本地运行存在bug。使用<code>hexo s</code>预览时，如果文章资源读取出现错误，整个博客页面会显示空白</li></ul></li><li><p><a href="https://github.com/probberechts/hexo-theme-cactus" rel="external nofollow noreferrer">Cactus</a></p><p>博客首页<br><img src="/posts/27751/cactus_homepage.png" alt="cactus_homepage"><br>博文开头<br><img src="/posts/27751/cactus_postpage.png" alt="cactus_postpage"><br>归档页<br><img src="/posts/27751/cactus_archievepage.png" alt="cactus_archivepage"></p><ul><li>界面干净，支持多种代码高亮</li><li>因为是国外开发的，对本地化的支持较少；</li></ul><p>&lt;–未完待续–&gt;</p></li></ol><h3 id="基于Swig开发的主题"><a href="#基于Swig开发的主题" class="headerlink" title="基于Swig开发的主题"></a>基于Swig开发的主题</h3>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo各个主题的比较&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="hexo" scheme="https://www.annewqx.top/tags/hexo/"/>
    
      <category term="JavaScript" scheme="https://www.annewqx.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客：入门</title>
    <link href="https://www.annewqx.top/posts/2727/"/>
    <id>https://www.annewqx.top/posts/2727/</id>
    <published>2020-02-21T16:00:00.000Z</published>
    <updated>2022-04-22T14:31:37.686Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>使用基于Nodejs的Hexo博客框架, 结合github.io页面, 快速搭建个人博客并发布</p></blockquote><a id="more"></a><h2 id="0-先决条件"><a href="#0-先决条件" class="headerlink" title="0 先决条件"></a>0 先决条件</h2><ul><li>GitHub账号，相关使用见<a href="/posts/48683">GitHub简明教程</a></li></ul><h2 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1 工具准备"></a>1 工具准备</h2><h3 id="1-GITHUB仓库创建"><a href="#1-GITHUB仓库创建" class="headerlink" title="1 GITHUB仓库创建"></a>1 GITHUB仓库创建</h3><p>​    创建新repository，名为<code>username.github.io</code>(username与github用户名一致)</p><h3 id="2-安装相关工具"><a href="#2-安装相关工具" class="headerlink" title="2 安装相关工具"></a>2 安装相关工具</h3><ol><li><p><a href="https://www.cnblogs.com/kaiye/p/4937191.html" rel="external nofollow noreferrer">安装node管理工具nvm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用brew安装</span><br>brew install nvm<br><span class="hljs-comment"># 添加进终端配置文件（.zshrc或.bash_profile)</span><br><span class="hljs-built_in">export</span> NVM_DIR=~/.nvm<br>[ -s <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span><br></code></pre></td></tr></table></figure><blockquote><p>此处有个坑: nvm官方并不建议使用brew安装</p><p><code>Homebrew installation is not supported. If you have issues with homebrew-installed nvm, please brew uninstall it, and install it using the instructions below, before filing an issue.</code></p><p>如果使用Homebrew安装，因为安装路径等原因, 在.nvm中会缺少nvm-exec和nvm.sh两个文件。导致每次启动终端都需要输入<code>source $(brew --prefix nvm)/nvm.sh</code>才能使当前终端使用nvm命令</p><p>解决方法有2</p><ol><li><p>简单粗暴：在.zshrc（终端配置文件）中加入<code>source $(brew --prefix nvm)/nvm.sh</code></p></li><li><p>曲线救国：(注意此方法curl命令可能被墙, 具体见<a href="https://github.com/nvm-sh/nvm" rel="external nofollow noreferrer">nvm项目github</a>)</p><ol><li><p>卸载使用brew安装的nvm<code>brew uninstall nvm</code></p></li><li><p>使用curl命令下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.2/install.sh | bash<br></code></pre></td></tr></table></figure></li><li><p>终端配置文件加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">"<span class="hljs-variable">$HOME</span>/.nvm"</span><br>[ -s <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="hljs-comment"># This loads nvm</span><br>[ -s <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="hljs-string">"<span class="hljs-variable">$NVM_DIR</span>/bash_completion"</span>  <span class="hljs-comment"># This loads nvm bash_completion</span><br></code></pre></td></tr></table></figure></li></ol></li></ol></blockquote></li><li><p>安装nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install stable<br></code></pre></td></tr></table></figure><blockquote><p> 网上很多过期教程会建议使用 <code>nvm install 4</code> , <code>nvm install 6</code>  , 实际安装后, node版本在7以下的都会抛出异常, 建议一步到位安装最新稳定版node</p><p> nvm/npm常用命令:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换nvm版本至 &lt;number&gt;开头的默认版本</span><br>nvm use &lt;number&gt; <br><span class="hljs-comment">#设置默认 node 版本为 0.12.7</span><br>nvm <span class="hljs-built_in">alias</span> default 0.12.7 <br><span class="hljs-comment"># 使用.nvmrc文件配置项目所使用的node版本</span><br><span class="hljs-built_in">cd</span> &lt;项目根目录&gt;  <span class="hljs-comment">#进入项目根目录</span><br><span class="hljs-built_in">echo</span> &lt;number&gt; &gt; .nvmrc <span class="hljs-comment">#添加 .nvmrc 文件</span><br>nvm use <span class="hljs-comment">#无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span><br>node -v <span class="hljs-comment">#查看 node 是否切换为对应版本</span><br><span class="hljs-comment">#安装 &lt;module-name&gt; 模块至全局目录，安装完成的路径是 /Users/&lt;username&gt;/.nvm/versions/node/&lt;nvm-version&gt;/lib/&lt;module-name&gt;</span><br>npm install -g &lt;module-name&gt;<br></code></pre></td></tr></table></figure><p> nvm与n的区别</p><ul><li>node 版本管理工具还有一个是 <a href="https://github.com/tj/n" rel="external nofollow noreferrer">TJ 大神的 n</a> 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</li><li>由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</li></ul></blockquote></li><li><p><a href="https://hexo.io/zh-cn/" rel="external nofollow noreferrer">安装Hexo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-hexo的使用入门"><a href="#2-hexo的使用入门" class="headerlink" title="2 hexo的使用入门"></a>2 <a href="https://hexo.io/zh-cn/" rel="external nofollow noreferrer">hexo的使用入门</a></h2><ol><li><p>创建博客和基础配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init username.github.io <span class="hljs-comment"># 博客根目录&lt;folder_name&gt;</span><br><span class="hljs-built_in">cd</span> username.github.io<br></code></pre></td></tr></table></figure><p>更改博客根目录下的_config.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span><br><span class="hljs-attr">author:</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-Hans</span> <span class="hljs-comment">#中文</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <br><span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/username/username.github.io.git</span><br></code></pre></td></tr></table></figure></li><li><p>更换主题</p><p>主题测评见文章<a href="../hexo_theme">hexo的主题比较</a> </p><p>hexo初始化中自带landscape主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 此处以next主题为例</span><br>git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>进入themes/next, 打开_config.yml, 按照文件中的说明即可对主题进行基础配置</p><p>同时更改博客根目录中_config.yml文件的<code>theme: next</code></p></li><li><p>写文章</p><p>博客根目录username.github.io下的source文件夹保存所有博客, 默认使用md语法</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/writing.html" rel="external nofollow noreferrer">hexo写作命令</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hexo博客搭建入门<br>date: 2020-02-16<br>tags: hexo js<br>categories:<br><span class="hljs-bullet">  - </span>Code<br><span class="hljs-bullet">  - </span>Guide<br><span class="hljs-section">keywords: hexo js 前端 博客<br>---</span><br>Hello World!<br></code></pre></td></tr></table></figure></li><li><p>测试<code>hexo s</code></p></li><li><p>安装使用hexo-deployer-git](<a href="https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git)自动部署发布工具" rel="external nofollow noreferrer">https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git)自动部署发布工具</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure></li></ol><h2 id="hexo的使用进阶"><a href="#hexo的使用进阶" class="headerlink" title="hexo的使用进阶"></a><a href="https://hexo.io/zh-cn/docs/" rel="external nofollow noreferrer">hexo的使用进阶</a></h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li><p><code>hexo init</code>：新建一个网站</p></li><li><p><code>hexo new [layout] --option &lt;titile&gt;</code> ：新建一个layout的文章，如果标题有空格，使用引号括起来</p><ul><li><code>-p</code> 自定义新文章的路径</li><li><code>-r</code> 替换同名文章</li><li><code>-s</code> 作为新文章的文件名和发布后的url</li></ul></li><li><p><code>hexo generate</code>生成静态文件(只生成有改动的文件)</p><ul><li><code>-d</code>生成后立刻部署</li><li><code>-w</code> 监视文件变动</li><li><code>-b</code> 抛出生成过程中的异常</li><li><code>-f</code> 强制重新生成全部文件</li><li><code>-c</code> 最大同时生成文件的数量</li></ul></li><li><p><code>hexo publish [layout] &lt;filename&gt;</code> 发表草稿</p></li><li><p><code>hexo server</code> 打开本地服务器</p></li><li><p><code>hexo deploy</code> 部署</p></li><li><p><code>hexo render &lt;file1&gt; [file2]</code> 渲染文件</p><ul><li><code>-o</code>设置输出路径</li></ul></li></ul><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><ul><li><p>layout：post/page/draft</p><blockquote><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote></li><li><p>title：在_config.yaml中编辑参数改变默认名称</p></li><li><p>scaffold：根须scaffold文件夹内对应的文件来建立文件</p></li></ul><h3 id="Font-matter"><a href="#Font-matter" class="headerlink" title="Font-matter"></a>Font-matter</h3><ul><li><p>layout：布局</p></li><li><p>title：标题/文件名</p></li><li><p>date：建立日期</p></li><li><p>update：更新日期</p></li><li><p>comments：开启文章的评论功能</p></li><li><p>tags：标签</p></li><li><p>categories：分类</p><ul><li><p>如果需要为文章添加多个分类</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">- </span>[Diary, PlayStation]<br><span class="hljs-bullet">- </span>[Diary, Games]<br><span class="hljs-bullet">- </span>[Life]<br></code></pre></td></tr></table></figure></li></ul></li><li><p>permalink：覆盖网址</p></li><li><p>keywords：仅用于meta标签和Open Graph的关键词</p></li></ul><h3 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h3><blockquote><p>并不建议过多使用这些标签，这些标签是hexo的私有语法，迁移是会有不便，建议还是多使用md语法</p><p>hexo官网关于个别标签的演示并不完整，<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/Posts/hexo-built-in-tag-helpers/" rel="external nofollow noreferrer">icarus主题的文档</a>中有不同插件使用的Demo</p></blockquote><ul><li><p>引用块(quote)  等同md语法的&lt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;<br>content<br>&#123;% endblockquote %&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码块(code) 等同md语法的```</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;<br>code snippet<br>&#123;% endcodeblock %&#125;<br></code></pre></td></tr></table></figure><ul><li>line_number:flase</li><li>highlight:true</li><li>first_line:13 行号从第几开始</li><li>​     下划线特定行，即第1行和4到7行</li><li>wrap:true</li></ul></li><li><p>Pull Quote</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% pullquote [class] %&#125;<br>content<br>&#123;% endpullquote %&#125;<br></code></pre></td></tr></table></figure></li><li><p>jsFiddle</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Gist(一般短代码直接插入markdown，长代码才用gist)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% gist gist_id [filename] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>iframe</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% iframe url [width] [height] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Image</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% img [class names] /path/to/image [width] [height] '"title text" "alt text"' %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Link</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% link text url [external] [title] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Include</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Youtube/Vimeo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% youtube video_id %&#125;<br>&#123;% vimeo video_id %&#125;<br></code></pre></td></tr></table></figure></li><li><p>引用文章(我一般是当做直接引用链接fffff)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% post_path filename %&#125;<br>&#123;% post_link filename [title] [escape] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>引用文章的资源(关于资源文件夹的设置见本文<a href="#asset">图片</a>部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% asset_path filename %&#125;<br>&#123;% asset_img filename [title] %&#125;<br>&#123;% asset_link filename [title] [escape] %&#125;<br></code></pre></td></tr></table></figure></li><li><p>Raw 插入Swig标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% raw %&#125;<br>content<br>&#123;% endraw %&#125;<br></code></pre></td></tr></table></figure></li><li><p>文章摘要：在<code>&lt;!--more--&gt;</code> 之前的文字</p><p>可能会被Font Matter中的<code>excerpt</code>部分覆盖(需要插件支持)</p></li></ul><h3 id="图片"><a href="#图片" class="headerlink" title=" 图片"></a><span id="asset"> <a href="https://hexo.io/zh-cn/docs/asset-folders.html" rel="external nofollow noreferrer">图片</a></span></h3><ol><li><p>资源文件夹 : 最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p></li><li><p>组织化资源管理方式 : 通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开, 当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout]</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片名称</span>](<span class="hljs-link">图片名称.jpg</span>)<br></code></pre></td></tr></table></figure><p>需要注意, 使用md时,在首页显示会出现错误, 使用标签插件可以解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% asset_img 图片名称.jpg This is an example image %&#125;<br></code></pre></td></tr></table></figure><blockquote><p>tips</p><ol><li><p>在typora的设置中进行以下修改可以与hexo同步：</p><p><img src="/posts/2727/typoraimg_setting.jpg" alt="typoraimg_setting"></p></li><li><p>组织化资源管理的两种方式都会使图片失去本地编辑器上的可读性</p></li></ol><div class="tip">3. 实际使用中会遇到部分主题对标签插件渲染出现莫名其妙的错误(vexo)，或者主题不支持(terminal)，所以除非需要在首页的展示缩略图，建议使用markdown语法的方式。</div></blockquote></li></ol><h3 id="文件命名规范"><a href="#文件命名规范" class="headerlink" title="文件命名规范"></a>文件命名规范</h3><blockquote><p><a href="https://adoyle.me/Today-I-Learned/others/file-naming-with-underscores-and-dashes.html" rel="external nofollow noreferrer">https://adoyle.me/Today-I-Learned/others/file-naming-with-underscores-and-dashes.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;使用基于Nodejs的Hexo博客框架, 结合github.io页面, 快速搭建个人博客并发布&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="hexo" scheme="https://www.annewqx.top/tags/hexo/"/>
    
      <category term="JavaScript" scheme="https://www.annewqx.top/tags/JavaScript/"/>
    
      <category term="git" scheme="https://www.annewqx.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Mac上Haskell的安装环境搭建</title>
    <link href="https://www.annewqx.top/posts/32573/"/>
    <id>https://www.annewqx.top/posts/32573/</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2022-07-20T06:55:00.533Z</updated>
    
    <content type="html"><![CDATA[<p>Mac上Haskell的换源和安装</p><a id="more"></a><blockquote><p>参考文章：<a href="https://www.jianshu.com/p/d86fec07856d" rel="external nofollow noreferrer">vscode搭建haskell环境</a></p><p>参考文章针对的是旧版本的stack，本文针对较新版本的stack</p></blockquote><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><blockquote><p><a href="https://docs.haskellstack.org/en/stable/README/" rel="external nofollow noreferrer">stack官方安装指导</a></p><p>Installing GHC automatically, in an isolated location.<br>Installing packages needed for your project.<br>Building your project.<br>Testing your project.<br>Benchmarking your project</p></blockquote><p>正如官网所说，直接安装stack的好处是它自带Haskell的编译器GHC和Cabal(a system for building and packaging Haskell libraries and programs)等Heskell运行需要文件(个人觉得stack类似anaconda，环境管理+包管理工具)。但是国内安装不换源的话，搭建之路会很不顺利</p><ol><li><p>使用brew安装stack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew search haskell<br></code></pre></td></tr></table></figure><p>可以看到brew返回了两个结果，一个是Formulae下的haskell-brew，另一个是Cask类型下的<a href="http://haskellformac.com" rel="external nofollow noreferrer">haskell-for-mac</a>，后者是个IDE，使用<code>brew cask install haskell-for-mac</code>下载，但是下载的过程太长，不知道到底是什么样，我们还是按照教程里的方法下载stack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install haskell-stack<br></code></pre></td></tr></table></figure></li><li><p>换源</p><p>这个时候如果按照stack官网的指示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">stack new my-project<br><span class="hljs-built_in">cd</span> my-project<br>stack setup<br>stack build<br>stack <span class="hljs-built_in">exec</span> my-project-exe<br></code></pre></td></tr></table></figure><p>很可能卡在setup步骤</p><p>第一种错误是返回Connection Failure，开全局VPN也没用那种。根据我在stackOverflow查到的信息，主要原因可能是路由器认为该地址是不良链接，拒绝了访问，无脑解决方法是直接手机开热点</p><p>第二种错误是执行stack setup之后一直卡在<code>ghc-8.8.2: dowanload has begun</code>其实就是原本的下载源在国外，所以下载速度起不来，所以我们要换<a href="https://mirrors.tuna.tsinghua.edu.cn/help/stackage/" rel="external nofollow noreferrer">清华的镜像源</a></p><p>要换的源涉及两个文件：<code>~/.cable/config</code> <code>~/.stack/config.yaml</code></p><p>首先换stack(<a href="https://mirrors.tuna.tsinghua.edu.cn/help/stackage/" rel="external nofollow noreferrer">stackage镜像使用帮助</a>)和stack setup(<a href="https://mirrors.tuna.tsinghua.edu.cn/help/hackage/" rel="external nofollow noreferrer">hackage镜像使用帮助</a>)的源，stack版本在2.1.1以上和以下不一样，这里只写2.1.1以上版本：</p><ul><li><p>打开~/.stack/config.yaml，加上：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">setup-info:</span> <span class="hljs-string">"http://mirrors.tuna.tsinghua.edu.cn/stackage/stack-setup.yaml"</span><br><span class="hljs-attr">urls:</span><br>  <span class="hljs-attr">latest-snapshot:</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/stackage/snapshots.json</span><br><span class="hljs-attr">package-indices:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">download-prefix:</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/hackage/</span><br>    <span class="hljs-attr">hackage-security:</span><br>        <span class="hljs-attr">keyids:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">280b10153a522681163658cb49f632cde3f38d768b736ddbc901d99a1a772833</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">2a96b1889dc221c17296fcc2bb34b908ca9734376f0f361660200935916ef201</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">772e9f4c7db33d251d5c6e357199c819e569d130857dc225549b40845ff0890d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">aa315286e6ad281ad61182235533c41e806e5a787e0b6d1e7eef3f09d137d2e9</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0</span><br>        <span class="hljs-attr">key-threshold:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># number of keys required</span><br><br>        <span class="hljs-comment"># ignore expiration date, see https://github.com/commercialhaskell/stack/pull/4614</span><br>        <span class="hljs-attr">ignore-expiry:</span> <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure></li></ul><p>现在换cabal的源</p><ul><li><p>在终端执行<code>cabal update</code>后<code>Ctrl+C</code>停止, 然后进行下一步。报错没关系，这一步的目的是生成<code>~/.cabal/config</code>配置文件</p></li><li><p>打开<code>~/.cabal/config</code> ，加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">repository</span> <span class="hljs-string">mirrors.tuna.tsinghua.edu.cn</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/hackage</span><br></code></pre></td></tr></table></figure><p>为了速度，可以将官方仓库注释掉。实际有朋友反应他的配置文件中本身就没有官方仓库这一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">--</span> <span class="hljs-string">repository</span> <span class="hljs-string">hackage.haskell.org</span><br> <span class="hljs-string">--</span> <span class="hljs-attr">url:</span> <span class="hljs-string">http://hackage.haskell.org/</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>现在可以愉快地按照<a href="https://docs.haskellstack.org/en/stable/README/" rel="external nofollow noreferrer">stack官方安装指导</a> 中的步骤继续了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">stack new my-project<br><span class="hljs-built_in">cd</span> my-project<br>stack setup<br>stack build<br>stack <span class="hljs-built_in">exec</span> my-project-exe<br></code></pre></td></tr></table></figure></li><li><p>或者像python一样在终端运行.hs文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">runhaskell filename<br><span class="hljs-comment"># 或者</span><br>runhs filename<br></code></pre></td></tr></table></figure></li></ol><h2 id="Hs学习笔记"><a href="#Hs学习笔记" class="headerlink" title="Hs学习笔记"></a>Hs学习笔记</h2><p>&lt;–To be Continued–&gt;</p><blockquote><p><a href="https://www.w3cschool.cn/hsriti/" rel="external nofollow noreferrer">https://www.w3cschool.cn/hsriti/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac上Haskell的换源和安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="haskell" scheme="https://www.annewqx.top/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>编译原理与设计-Lab1-语言认知实验</title>
    <link href="https://www.annewqx.top/posts/53125/"/>
    <id>https://www.annewqx.top/posts/53125/</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2022-04-22T14:34:09.472Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>分别使用 C/C++、Java、Python 和 Haskell 实现快速排序和归并排序算法，对采用这几种语言实现的编程效率，程序的规模，程序的运行效率进行对比分析。</p></blockquote><a id="more"></a><h2 id="1-实验目的和内容"><a href="#1-实验目的和内容" class="headerlink" title="1 实验目的和内容"></a>1 实验目的和内容</h2><ul><li><p>实验目的：了解程序设计语言的发展历史，了解不同程序设计语言的各自特点;感受编 译执行和解释执行两种不同的执行方式，初步体验语言对编译器设计的影响，为 后续编译程序的设计和开发奠定良好的基础。</p></li><li><p>实验内容： 分别使用 C/C++、Java、Python 和 Haskell 实现快速排序算法和归并排序，对采用这几种语言实现的编程效率，程序的规模，程序的运行效率进行对比分析。</p></li><li><p>实验说明：实验使用电脑参数如下</p><p><img src="/posts/53125/Screenshot2020-02-2217.13.04.png" alt="电脑参数"></p></li></ul><h2 id="2-实验的具体过程和步骤"><a href="#2-实验的具体过程和步骤" class="headerlink" title="2 实验的具体过程和步骤"></a>2 实验的具体过程和步骤</h2><ul><li><p>实验分三组：</p><ul><li>普通情况(50000个范围在1~100000的不重复数)下不同语言的归并排序和快速排序</li><li>最坏情况：<ul><li>小规模组(1000-&gt;1逆序排列) </li><li>大规模组(10000-&gt;1逆序排列)</li></ul></li></ul></li><li><p>快速排序的算法采用三数取最小数的算法，平均时间复杂度 $ O(nlogn) $ ，最坏时间复杂度 $ O(n^2) $</p></li><li><p>归并排序无论最好最坏情况，时间复杂度均为 $ O(nlog_2n) $ </p></li><li><p>不同语言所使用的的算法完全一致，时间函数分别使用各语言提供的库函数</p><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3></li></ul><ol><li>编译器版本及运行环境</li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc --version<br>Apple clang version 11.0.0 (clang-1100.0.33.17)<br>Target: x86_64-apple-darwin19.3.0<br></code></pre></td></tr></table></figure><ol start="2"><li><p>源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000 <span class="hljs-comment">//50000为实验1规模，10000为实验2-1规模，1000为实验2-2规模</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> O 2 <span class="hljs-comment">//1为装填out.txt中的数据，2为装填逆序数组</span></span><br><br><span class="hljs-comment">//归并函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *num, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> *temp = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>((<span class="hljs-built_in">end</span>-start+<span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">int</span> i = start;<br>    <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= <span class="hljs-built_in">end</span>)&#123;<br>        <span class="hljs-keyword">if</span> (num[i] &lt;= num[j])&#123;<br>            temp[k++] = num[i++];<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            temp[k++] = num[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid)&#123;<br>        temp[k++] = num[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= <span class="hljs-built_in">end</span>)&#123;<br>        temp[k++] = num[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        num[start + i] = temp[i];<br>    &#125;<br>    <span class="hljs-built_in">free</span>(temp);<br>&#125;<br><br><span class="hljs-comment">//归并排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort_UptoDown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *num, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> mid = start + (<span class="hljs-built_in">end</span> - start) / <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">if</span> (start &gt;= <span class="hljs-built_in">end</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    MergeSort_UptoDown(num, start, mid);<br>    MergeSort_UptoDown(num, mid + <span class="hljs-number">1</span>, <span class="hljs-built_in">end</span>);<br>    Merge(num, start, mid, <span class="hljs-built_in">end</span>);<br>&#125;<br><br><span class="hljs-comment">//分解函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> key;<br>    key = arr[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low &lt;high &amp;&amp; arr[high]&gt;= key )<br>            high--;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[low++] = arr[high];<br>        <span class="hljs-keyword">while</span>( low&lt;high &amp;&amp; arr[low]&lt;=key )<br>            low++;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[high--] = arr[low];<br>    &#125;<br>    arr[low] = key;<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> <span class="hljs-built_in">end</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> pos;<br>    <span class="hljs-keyword">if</span> (start&lt;<span class="hljs-built_in">end</span>)&#123;<br>        pos = partition(arr, start, <span class="hljs-built_in">end</span>);<br>        quick_sort(arr,start,pos<span class="hljs-number">-1</span>);<br>        quick_sort(arr,pos+<span class="hljs-number">1</span>,<span class="hljs-built_in">end</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//装填函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(O==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        FILE *fp = <span class="hljs-literal">NULL</span>;<br>        fp = fopen(<span class="hljs-string">"/Users/apple/Downloads/out.txt"</span>,<span class="hljs-string">"r"</span>);<br>        <span class="hljs-keyword">char</span> buff[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">"%s"</span>,buff)!=EOF)&#123;<br>        arr[cnt++]=atoi(buff);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>        &#123;<br>            arr[i] = N - i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[N+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-built_in">fill</span>(arr);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">begintime</span>,<span class="hljs-title">endtime</span>;</span><br>    gettimeofday(&amp;begintime, <span class="hljs-literal">NULL</span>);<br>    quick_sort(arr , <span class="hljs-number">0</span> , num<span class="hljs-number">-1</span>);<br>    gettimeofday(&amp;endtime, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size-%d / "</span>, num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Qsort-C Running Time : %ld ms\n"</span>,<span class="hljs-number">1000</span>*(endtime.tv_sec-begintime.tv_sec)+(endtime.tv_usec-begintime.tv_usec)/<span class="hljs-number">1000</span>);<br><br>    num = <span class="hljs-built_in">fill</span>(arr);<br>    gettimeofday(&amp;begintime, <span class="hljs-literal">NULL</span>);<br>    MergeSort_UptoDown(arr , <span class="hljs-number">0</span> , num<span class="hljs-number">-1</span>);<br>    gettimeofday(&amp;endtime, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Size-%d / "</span>, num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Mergesort-C Running Time : %ld ms\n"</span>,<span class="hljs-number">1000</span>*(endtime.tv_sec-begintime.tv_sec)+(endtime.tv_usec-begintime.tv_usec)/<span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用gcc编译器生成可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -o lab1_c lab1.c<br></code></pre></td></tr></table></figure></li><li><p>在终端运行可执行文件6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/.lab1_c<br></code></pre></td></tr></table></figure></li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ol><li><p>编译器版本及运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ Javac --version<br>javac 10.0.2<br>$ java --version<br>openjdk 10.0.2 2018-07-17<br>OpenJDK Runtime Environment 18.3 (build 10.0.2+13)<br>OpenJDK 64-Bit Server VM 18.3 (build 10.0.2+13, mixed mode)<br></code></pre></td></tr></table></figure></li><li><p>源代码</p><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lab1</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> O = <span class="hljs-number">2</span>; <span class="hljs-comment">//1为装填out.txt中的数据，2为装填逆序数组</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>; <span class="hljs-comment">//50000为实验1规模，10000为实验2-1规模，1000为实验2-2规模</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (O==<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> cnt =<span class="hljs-number">0</span>;<br>            String pathname = <span class="hljs-string">"/Users/apple/Downloads/out.txt"</span>;<br>            <span class="hljs-keyword">try</span> (FileReader reader = <span class="hljs-keyword">new</span> FileReader(pathname);<br>                BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(reader)<br>            )&#123;<br>                String line;<br>                <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                arr[cnt++]=Integer.parseInt(line);<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123;<br>                arr[i] = N-i;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        print5();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print5</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>        fill(arr);<br>        <span class="hljs-keyword">long</span> t = System.currentTimeMillis();<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        quick_sort(arr,<span class="hljs-number">0</span> , N-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        System.out.println(<span class="hljs-string">"QSort-Size-"</span>+N+<span class="hljs-string">" / Java Running time : "</span>+(System.currentTimeMillis()-t)+<span class="hljs-string">" ms"</span>);<br><br>        fill(arr);<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        t = System.currentTimeMillis();<br>        m_sort(arr,<span class="hljs-number">0</span> , N-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// System.out.println(arr[0]+" "+arr[N/2]+" "+arr[N-1]);</span><br>        System.out.println(<span class="hljs-string">"MergeSort-Size-"</span>+N+<span class="hljs-string">" / Java Running time : "</span>+(System.currentTimeMillis()-t)+<span class="hljs-string">" ms"</span>);<br>        <br>    &#125;<br>    <span class="hljs-comment">//分解函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> []arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> key;<br>    key = arr[low];<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low &lt;high &amp;&amp; arr[high]&gt;= key )<br>            high--;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[low++] = arr[high];<br>        <span class="hljs-keyword">while</span>( low&lt;high &amp;&amp; arr[low]&lt;=key )<br>            low++;<br>        <span class="hljs-keyword">if</span>(low&lt;high)<br>            arr[high--] = arr[low];<br>    &#125;<br>    arr[low] = key;<br>    <span class="hljs-keyword">return</span> low;<br>    &#125;<br>    <span class="hljs-comment">//快速排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> pos;<br>        <span class="hljs-keyword">if</span> (start&lt;end)&#123;<br>            pos = partition(arr, start, end);<br>            quick_sort(arr,start,pos-<span class="hljs-number">1</span>);<br>            quick_sort(arr,pos+<span class="hljs-number">1</span>,end);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//归并排序</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] m_sort(<span class="hljs-keyword">int</span>[] a,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)&#123;<br>        <span class="hljs-keyword">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>            m_sort(a,low,mid);<br>            m_sort(a,mid+<span class="hljs-number">1</span>,high);<br>            <span class="hljs-comment">//左右归并</span><br>            merge(a,low,mid,high);<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>     <span class="hljs-comment">//合并函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[high-low+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> i= low;<br>        <span class="hljs-keyword">int</span> j = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 把较小的数先移到新数组中</span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&lt;a[j])&#123;<br>                temp[k++] = a[i++];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                temp[k++] = a[j++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 把左边剩余的数移入数组 </span><br>        <span class="hljs-keyword">while</span>(i&lt;=mid)&#123;<br>            temp[k++] = a[i++];<br>        &#125;<br>        <span class="hljs-comment">// 把右边边剩余的数移入数组</span><br>        <span class="hljs-keyword">while</span>(j&lt;=high)&#123;<br>            temp[k++] = a[j++];<br>        &#125;<br>        <span class="hljs-comment">// 把新数组中的数覆盖nums数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;x&lt;temp.length;x++)&#123;<br>            a[x+low] = temp[x];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用java编译器(javac.exe)编译为字节码文件(.class)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac Lab1.java<br></code></pre></td></tr></table></figure></li><li><p>运行生成的字节码文件6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java Lab1<br></code></pre></td></tr></table></figure></li></ol><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ol><li><p>解释器版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python --version<br>Python 2.7.16<br></code></pre></td></tr></table></figure></li><li><p>源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">100000</span>)<br><br>O = <span class="hljs-number">1</span>  //<span class="hljs-number">1</span>为装填out.txt中的数据，<span class="hljs-number">2</span>为装填逆序数组<br>N = <span class="hljs-number">50000</span>  //<span class="hljs-number">50000</span>为实验<span class="hljs-number">1</span>规模，<span class="hljs-number">10000</span>为实验<span class="hljs-number">2</span><span class="hljs-number">-1</span>规模，<span class="hljs-number">1000</span>为实验<span class="hljs-number">2</span><span class="hljs-number">-2</span>规<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(arr, l, m, r)</span>:</span> <br>    n1 = m - l + <span class="hljs-number">1</span><br>    n2 = r- m <br>    L = [<span class="hljs-number">0</span>] * (n1)<br>    R = [<span class="hljs-number">0</span>] * (n2)<br>  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span> , n1): <br>        L[i] = arr[l + i] <br>  <br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span> , n2): <br>        R[j] = arr[m + <span class="hljs-number">1</span> + j] <br>  <br>    i=<span class="hljs-number">0</span><br>    j=<span class="hljs-number">0</span><br>    k=l<br>  <br>    <span class="hljs-keyword">while</span> i &lt; n1 <span class="hljs-keyword">and</span> j &lt; n2 : <br>        <span class="hljs-keyword">if</span> L[i] &lt;= R[j]: <br>            arr[k] = L[i] <br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>: <br>            arr[k] = R[j] <br>            j += <span class="hljs-number">1</span><br>        k += <span class="hljs-number">1</span><br>  <br>    <span class="hljs-keyword">while</span> i &lt; n1: <br>        arr[k] = L[i] <br>        i += <span class="hljs-number">1</span><br>        k += <span class="hljs-number">1</span><br>  <br>    <span class="hljs-keyword">while</span> j &lt; n2: <br>        arr[k] = R[j] <br>        j += <span class="hljs-number">1</span><br>        k += <span class="hljs-number">1</span><br>  <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(arr,l,r)</span>:</span> <br>    <span class="hljs-keyword">if</span> l &lt; r: <br>  <br>        <br>        m = int((l+(r<span class="hljs-number">-1</span>))/<span class="hljs-number">2</span>)<br>  <br>       <br>        mergeSort(arr, l, m) <br>        mergeSort(arr, m+<span class="hljs-number">1</span>, r) <br>        merge(arr, l, m, r) <br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(arr,low,high)</span>:</span><br>key = arr[low]<br><span class="hljs-keyword">while</span>(low&lt;high):<br><span class="hljs-keyword">while</span> low&lt;high <span class="hljs-keyword">and</span> arr[high] &gt;= key:<br>high-=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> low&lt;high:<br>arr[low] = arr[high]<br>low+=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> low&lt;high <span class="hljs-keyword">and</span> arr[low]&lt;=key:<br>low+=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> low&lt;high:<br>arr[high] = arr[low]<br>high -= <span class="hljs-number">1</span><br>arr[low] = key<br><span class="hljs-keyword">return</span> low<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">q_sort</span><span class="hljs-params">(arr,start,end)</span>:</span><br><span class="hljs-keyword">if</span> start&lt;end:<br>pos = partition(arr,start,end)<br>q_sort(arr,start,pos<span class="hljs-number">-1</span>)<br>q_sort(arr,pos+<span class="hljs-number">1</span>,end)<br><span class="hljs-keyword">return</span> arr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(arr)</span>:</span><br><span class="hljs-keyword">return</span> q_sort(arr,<span class="hljs-number">0</span>,len(arr)<span class="hljs-number">-1</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">if</span>(O==<span class="hljs-number">1</span>)<br>      arr=[] <span class="hljs-comment">#直接使用out.txt内数据初始化</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>,N):<br>            arr[i]=N-x;<br>begintime=time.time()<br>quick_sort(arr)<br>endtime = time.time()<br>Running_time = (endtime-begintime)*<span class="hljs-number">1000</span><br>print(<span class="hljs-string">"Qsort-python Running time : %f ms"</span>%Running_time)<br><br>begintime=time.time()<br>mergeSort(arr,<span class="hljs-number">0</span>,len(arr)<span class="hljs-number">-1</span>)<br>endtime = time.time()<br>Running_time = (endtime-begintime)*<span class="hljs-number">1000</span><br>print(<span class="hljs-string">"Msort-python Running time : %f ms"</span>%Running_time)<br><br>arr = [<span class="hljs-number">0</span>]*N<br>do()<br></code></pre></td></tr></table></figure></li><li><p>在终端运行6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab1.py<br></code></pre></td></tr></table></figure></li></ol><h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ol><li><p>解释器版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ runhaskell --version<br>runghc 8.8.2<br></code></pre></td></tr></table></figure></li><li><p>源代码</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> Text.Printf<br><span class="hljs-keyword">import</span> Control.Exception<br><span class="hljs-keyword">import</span> System.CPUTime<br><br><span class="hljs-title">msort</span> :: (<span class="hljs-type">Ord</span> a) =&gt; [a] -&gt; [a]<br><span class="hljs-title">msort</span> [] = []<br><span class="hljs-title">msort</span> [x] = [x]<br><span class="hljs-title">msort</span> xs = merge (msort xs1) (msort xs2)<br>  <span class="hljs-keyword">where</span> k = (length xs) `div` <span class="hljs-number">2</span><br>        xs1 = take k xs<br>        xs2 = drop k xs<br><br>        merge :: (<span class="hljs-type">Ord</span> a) =&gt; [a] -&gt; [a] -&gt; [a]<br>        merge [] b = b <br>        merge a [] = a<br>        merge a@(x:xs) b@(y:ys) | x &gt;= y    = x:(merge xs b)<br>                                | otherwise = y:(merge a ys)<br><br><span class="hljs-title">qsort</span> :: (<span class="hljs-type">Ord</span> a) =&gt; [a] -&gt; [a]<br><span class="hljs-title">qsort</span> [] = []<br><span class="hljs-title">qsort</span> (x:xs) = qsort [i | i &lt;- xs, i &gt;= x]<br>  ++ [x]<br>  ++ qsort [i | i &lt;- xs, i &lt; x]<br><br><span class="hljs-title">main</span>=<span class="hljs-keyword">do</span><br>    start &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> list =msort [] <span class="hljs-comment">--实验1直接填入out.txt中数组，实验2-1为[1..1000]，实验2.2为[1..10000]</span><br>    <span class="hljs-keyword">let</span> a = maximum list<br>    printf <span class="hljs-string">"Size %d "</span>(a::<span class="hljs-type">Int</span>)<br>    end   &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> diff = (fromIntegral (end - start)) / (<span class="hljs-number">10</span>^<span class="hljs-number">9</span>)<br>    printf <span class="hljs-string">"qsort Haskell Running time: %0.3f ms\n"</span> (diff :: <span class="hljs-type">Double</span>)<br><br>    start &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> list =qsort [] <span class="hljs-comment">--实验1直接填入out.txt中数组，实验2-1为[1..1000]，实验2.2为[1..10000]</span><br>    <span class="hljs-keyword">let</span> a = maximum list<br>    printf <span class="hljs-string">"Size %d "</span>(a::<span class="hljs-type">Int</span>)<br>    end   &lt;- getCPUTime<br>    <span class="hljs-keyword">let</span> diff = (fromIntegral (start - end)) / (<span class="hljs-number">10</span>^<span class="hljs-number">9</span>)<br>    printf <span class="hljs-string">"msort Haskell Running time: %0.3f ms\n"</span> (diff :: <span class="hljs-type">Double</span>)<br></code></pre></td></tr></table></figure></li><li><p>在终端运行6次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">runhaskell lab1.hs<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-运行效果截图"><a href="#3-运行效果截图" class="headerlink" title="3 运行效果截图"></a>3 运行效果截图</h2><h3 id="1-常规组"><a href="#1-常规组" class="headerlink" title="1 常规组"></a>1 常规组</h3><blockquote><p>50000个范围在1~1000000的不重复数</p></blockquote><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><img src="/posts/53125/Screenshot2020-02-2616.50.19.png" alt="C" style="zoom:50%;"><ul><li><p>快速排序平均运行时间：6.00 ms</p></li><li><p>归并排序平均运行时间：13.33 ms</p></li></ul><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><img src="/posts/53125/Screenshot2020-02-2616.52.32.png" alt="java" style="zoom: 50%;"><ul><li><p>快速排序平均运行时间：14.00 ms</p></li><li><p>归并排序平均运行时间：16.33 ms</p></li></ul><h4 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h4><img src="/posts/53125/Screenshot2020-02-2616.55.17.png" alt="python" style="zoom:50%;"><ul><li><p>快速排序平均运行时间：88.26 ms</p></li><li><p>归并排序平均运行时间：244.45  ms</p></li></ul><h4 id="Haskell-1"><a href="#Haskell-1" class="headerlink" title="Haskell"></a>Haskell</h4><blockquote><p>因为笔者失误，此处Size应为50000，msort和qsort对应时间输出交换，即第一行为qsort运行时间，第二行为msort运行时间</p></blockquote><img src="/posts/53125/Screenshot2020-02-2616.59.54.png" alt="haskell" style="zoom:50%;"><ul><li><p>快速排序平均运行时间：504.93 ms</p></li><li><p>归并排序平均运行时间：416.71 ms</p></li></ul><h3 id="2-1-小规模最坏数据"><a href="#2-1-小规模最坏数据" class="headerlink" title="2-1 小规模最坏数据"></a>2-1 小规模最坏数据</h3><blockquote><p>对逆序数组[1000,999,998,997,996,995,…,4,3,2,1]进行升序排列</p></blockquote><h4 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h4><img src="/posts/53125/Screenshot2020-02-2617.03.17.png" alt="C" style="zoom:50%;"><ul><li><p>快速排序平均运行时间：1 ms</p></li><li><p>归并排序平均运行时间：0 ms</p></li></ul><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><img src="/posts/53125/Screenshot2020-02-2617.04.00.png" alt="Java" style="zoom:50%;"><ul><li><p>快速排序平均运行时间：3.5 ms</p></li><li><p>归并排序平均运行时间：0.83 ms</p></li></ul><h4 id="python-2"><a href="#python-2" class="headerlink" title="python"></a>python</h4><img src="/posts/53125/Screenshot2020-02-2617.05.24.png" alt="python" style="zoom:50%;"><ul><li>快速排序平均运行时间：26.24 ms</li><li>归并排序平均运行时间：3.51 ms</li></ul><h4 id="Haskell-2"><a href="#Haskell-2" class="headerlink" title="Haskell"></a>Haskell</h4><blockquote><p>因为笔者失误，msort和qsort对应时间输出交换，即第一行为qsort运行时间，第二行为msort运行时间</p></blockquote><img src="/posts/53125/Screenshot2020-02-2617.08.14.png" alt="Haskell" style="zoom:50%;"><ul><li>快速排序平均运行时间：309.12 ms</li><li>归并排序平均运行时间：3.285 ms</li></ul><h3 id="2-2大规模最坏数据"><a href="#2-2大规模最坏数据" class="headerlink" title="2-2大规模最坏数据"></a>2-2大规模最坏数据</h3><blockquote><p>对逆序排列[10000,9999,9998,9997,9996,9995,…,4,3,2,1]进行升序排列</p><p>因为Haskell较易生成正序列表，所以对于Haskell对正序排列[1,2,3,4…9999,10000]进行降序排列</p></blockquote><h4 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h4><img src="/posts/53125/Screenshot2020-02-2617.10.10.png" alt="C" style="zoom:50%;"><ul><li>快速排序平均运行时间：97.17 ms</li><li>归并排序平均运行时间：1.6 ms</li></ul><h4 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h4><img src="/posts/53125/Screenshot2020-02-2616.32.16.png" alt="JAVA" style="zoom:50%;"><ul><li>快速排序平均运行时间：45.67 ms</li><li>归并排序平均运行时间：4.67 ms</li></ul><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><img src="/posts/53125/Screenshot2020-02-2617.13.01.png" alt="Python" style="zoom:50%;"><ul><li>快速排序平均运行时间：2595.45 ms -&gt; 2.6s</li><li>归并排序平均运行时间：41.71 ms</li></ul><h4 id="Haskell-3"><a href="#Haskell-3" class="headerlink" title="Haskell"></a>Haskell</h4><blockquote><p>因为笔者失误，msort和qsort对应时间输出交换，即第一行实为qsort运行时间，第二行为msort运行时间</p></blockquote><img src="/posts/53125/Screenshot2020-02-2617.50.13.png" alt="Haskell" style="zoom:50%;"><ul><li>快速排序平均运行时间：31378.91 ms -&gt; 31.4s</li><li>归并排序平均运行时间：38.00 ms</li></ul><h2 id="4-语言易用性和程序规模对比分析"><a href="#4-语言易用性和程序规模对比分析" class="headerlink" title="4 语言易用性和程序规模对比分析"></a>4 语言易用性和程序规模对比分析</h2><h3 id="1-语言易用性"><a href="#1-语言易用性" class="headerlink" title="1 语言易用性"></a>1 语言易用性</h3><h4 id="1-学习难度"><a href="#1-学习难度" class="headerlink" title="1 学习难度"></a>1 学习难度</h4><p><strong>Python&lt;=Java&lt;=C&lt;&lt;Haskell</strong></p><table><thead><tr><th>语言</th><th>难度分析</th></tr></thead><tbody><tr><td>C</td><td>C作为大多数人编程的入门语言，先声夺人，字符串处理文件处理数组初始化等等基础操作，大多时候我都更习惯c的写法。链表与指针和内存管理是C的一大难以逾越的障碍</td></tr><tr><td>Java</td><td>Java的语法大致类似C/C++，并且没有C中令人头疼的链表指针和内存操作，有自动内存管理，个人认为学过C再加上对面向对象的理解是非常容易上手Java的</td></tr><tr><td>Python</td><td>Python近年被广泛推崇为儿童编程的入门语言，不一定说明它很简单，但至少说明它入门容易。Python中缩进作为格式化使得程序总体更简洁，但也使得在大项目中它的可维护性降低。Python更适合于小型项目，或者玩具，例如跑一个CNN。</td></tr><tr><td>Haskell</td><td>习惯了命令式语言，面对Haskell这样的纯函数式语言会陷入完全的不知所措。它是一种不同的概念、一种新的语言范式。需要用与我们的习惯所不同的方式开发应用，不同的方式组织应用，不同的方式扩展应用</td></tr></tbody></table><h4 id="2-语言的编程效率"><a href="#2-语言的编程效率" class="headerlink" title="2 语言的编程效率"></a>2 语言的编程效率</h4><p>个人认为编程分为两部分：初始编码+Debug</p><p>对于几种主流语言编程效率的普遍看法认为，python是效率最高的，C次之，Java最为啰嗦繁琐，而函数式编程语言较少用于工程。但我个人的经历里，不同语言在不同项目规模下各有所长。大型项目大多基于Java的相关框架，如果开发一个移动互联应用(上万行)，Java几乎可以说是没有敌手，它的啰嗦和繁琐减小了奇奇怪怪的bug发生的可能性，而在Java下继续前进还有Korlin，Swift等专门为应用开发而设计的语言。C/C++适合于开发小型项目(几千行)，比如小游戏或者解释器，使用C开发能够在某种程度上方便开发者最大程度提升程序的运行效率。至于Python，个人认为Python适合千行以内的代码规模，目前的学习中使用到Python的地方主要是人工智能和知识工程等课程，一个神经网络大致也就一百行代码，Python的相关库Numpy和TensorFlow在神经网络的应用中已经非常成熟。尽管Python在初始编码阶段能优雅简洁的一行代码完成一个复杂的功能，但在debug阶段Python也能让人一个头有两个大。使用Python中稍不注意就会有缩进造成的bug，怎么检查都难以寻觅其踪迹，可想如果代码规模稍大，该有多么头疼。</p><p>至于函数式编程，其思想和命令式编程有很大的不同。有人说，大部分人第一次使用Haskell或Ocaml时都完全的不知所措。在Haskell里，连分号都跟别人不一样。这并不是语法的问题；Haskell和ML语言完全基于一种不同的概念、一种新的语言范式。需要用不同的方式开发应用，不同的方式组织应用，不同的方式扩展应用。所以说它入门门槛高，适用范围不广，但是学界非常喜欢，其在数学逻辑证明上的优势是其他语言望尘莫及的。而非纯函数编程语言，如Lisp，其历史悠久，也曾在相关历史时期居于某些领域(人工智能)的统治地位。</p><p>总而言之，在不同的战场上使用相适合的工具是决定编程效率的关键。而就本次实验中的编程效率来说，仅仅实现一个快排算法，C，Java和Python并无太大差别，有差别也主要是个人对于不同语言熟练性造成的，Haskell的描述函数是什么而不是命令机器怎么做的优势高下立现，程序规模是其他的一半(统计见表4-3)</p><h3 id="3-程序规模"><a href="#3-程序规模" class="headerlink" title="3 程序规模"></a>3 程序规模</h3><p>Python&gt;=C&gt;Java&gt;&gt;Haskell</p><table><thead><tr><th>语言</th><th align="right">快排总代码行数</th><th>实现快排函数行数</th><th align="right">归并排序总代码行数</th><th align="right">实现归并函数行数</th></tr></thead><tbody><tr><td>C</td><td align="right">46</td><td>24</td><td align="right">41</td><td align="right">41</td></tr><tr><td>Java</td><td align="right">37</td><td>25</td><td align="right">38</td><td align="right">38</td></tr><tr><td>Python</td><td align="right">46</td><td>21</td><td align="right">45</td><td align="right">45</td></tr><tr><td>Haskell</td><td align="right">17</td><td>4</td><td align="right">11</td><td align="right">11</td></tr></tbody></table><img src="/posts/53125/Screenshot2020-02-2618.35.39.png" alt="表4-3代码规模比较" style="zoom:100%;"><h2 id="5-程序运行性能对比分析"><a href="#5-程序运行性能对比分析" class="headerlink" title="5 程序运行性能对比分析"></a>5 程序运行性能对比分析</h2><blockquote><p>(统一保留到小数点后一位)</p></blockquote><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><table><thead><tr><th>语言</th><th align="right">常规组平均运行时间$O(nlogn)$</th><th align="right">小规模最坏组平均运行时间$(O(n^2))$</th><th align="right">大规模最坏组平均运行时间$(O(n^2))$</th></tr></thead><tbody><tr><td>C</td><td align="right">6.0 ms</td><td align="right">1.0 ms</td><td align="right">96.0 ms</td></tr><tr><td>Java</td><td align="right">14.0 ms</td><td align="right">2.4 ms</td><td align="right">41.8 ms</td></tr><tr><td>Python</td><td align="right">88.3 ms</td><td align="right">24.5 ms</td><td align="right">2396.9 ms</td></tr><tr><td>Haskell</td><td align="right">504.9 ms</td><td align="right">284.4 ms</td><td align="right">45812.2 ms</td></tr></tbody></table><img src="/posts/53125/Screenshot2020-02-2618.51.15.png" alt="qsort" style="zoom:67%;"><ul><li>在常规组和小规模最坏组的实验中，符合常规的认知，效率上C最优，Java次之；对于解释型语言，Python较快，Haskell非常耗时，尤其是在n为较大值的时间复杂度(O(n^2))下</li><li>在大规模最坏组的实验中，Java比C快了一半。猜测Java在递归过程中编译器进行了优化，因为本实验未涉及几种语言的内存使用测量，故作出此猜测。</li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><table><thead><tr><th>语言</th><th align="right">常规组平均运行时间$O(nlogn)$</th><th align="right">小规模组平均运行时间$O(nlogn)$</th><th align="right">大规模组平均运行时间$O(nlogn)$</th></tr></thead><tbody><tr><td>C</td><td align="right">13.33 ms</td><td align="right">0.3 ms</td><td align="right">1.6 ms</td></tr><tr><td>Java</td><td align="right">16.3 ms</td><td align="right">0.8 ms</td><td align="right">4.7 ms</td></tr><tr><td>Python</td><td align="right">244.5 ms</td><td align="right">3.5 ms</td><td align="right">41.7 ms</td></tr><tr><td>Haskell</td><td align="right">416.7 ms</td><td align="right">3.2 ms</td><td align="right">38.0 ms</td></tr></tbody></table><img src="/posts/53125/Screenshot2020-02-2619.32.44.png" alt="msort" style="zoom: 67%;"><ul><li><p>归并排序是一种稳定排序，对于最好/最坏/平均都有 $ O(nlogn) $ 复杂度，在实验中确实可以得到体现；效率上以上是C最优，Java次之；对于解释性语言，常规组(规模50000)</p></li><li><p>在小规模组(规模1000)和大规模组(规模10000)的实验中，可以看到Haskell比Python有了细微的优势。但在常规组(规模50000)的实验中，python又超过了Haskell。笔者另外增加了规模80000和100000的测试：</p><img src="/posts/53125/Screenshot2020-02-2620.20.28.png" alt="80000-py" style="zoom:50%;"><img src="/posts/53125/Screenshot2020-02-2620.19.45.png" alt="80000-hs" style="zoom:50%;"><ul><li>80000规模python归并排序5次平均运行时间：374.1 ms；</li><li>80000规模haskell归并排序5次平均运行时间：477.3 ms;</li><li>100000规模python归并排序5次平均运行时间：474.1 ms;</li><li>100000规模haskell归并排序5次平均运行时间：588.2 ms;</li></ul><p>可以看出随着数据规模增大，python又较haskell具有了优势。</p></li></ul><h2 id="6-实验心得体会"><a href="#6-实验心得体会" class="headerlink" title="6 实验心得体会"></a>6 实验心得体会</h2><ul><li>我想，大多数人的对编程语言的学习都有一个刚入门时遇到一些困难，然后逐渐轻松，云开日朗，但是之后又遇到一个巨大的瓶颈，有可能是诸如指针这样的概念，也有可能是无关语法的对算法的理解限制住了编程能力的提高。差不多所有学过编程的人都有过遇到困难的经历。我们在学了一些基本知识后，必然会遇到一些公认的概念上的关口，比如指针。很少人能轻松的掌握它们。大多数人，比如我，则需要不断的练习和参考例子来理解什么是指针、为什么它们很重要。</li><li>对于同一种思维方式的语言，如命令式语言，一旦学会几种语言后，所有的语言都开始看起来都很相似，虽然有细微差别，但入门都会相对容易。做移动互联的大作业的时候，Dart、Swift或者Kotlin的语法，它们都存在共通的地方；开发个人博客的时候，利用掌握的html我们也能把Jade、ejs的代码改得更符合我们的需求。Python的人学习Ruby可能不会遇到太多的问题，知道Java的人学习C#会感到很熟悉。不错，也有意外的地方。Ruby爱好者在学习Python时会对它的comprehension感到吃惊，Java用户会对C#里的委托摸不着头脑。还是那句话，如果只瞟一眼，它们都很相似。</li><li>但是第一次使用Haskells时我陷入了不知所措。看官方代码的一头雾水和无论如何都无法让自己的程序正确运行的焦灼不安。这并不是语法的问题；Haskell和ML语言完全基于一种不同的概念、一种新的语言范式。需要用不同的方式开发应用，不同的方式组织应用，不同的方式扩展应用。而我还是习惯性的在haskell中输入<code>let list = quicksort [1..10]</code>这样的命令，期望它运行。很多这样的新概念都具有不可思议的强大力量。Haskell里的Monads是跟指针一样基础且强大的概念。所以，跟学了Java后再学C#不一样，有志向学习函数式语言的人需要往回走的更远，去学习更加基础的概念后才能接下去学习。就像是完全再学习一次</li><li>说说细节上的收获，在进行大规模的实验时，我发现python、Java和Haskell都有对递归深度限制，但是C几乎是完全自由没有任何限制的。在运行速度上，解释执行的Python和Haskell自然无法与编译执行的C和Java比，</li><li>Java虚拟机的启动占用一定的时间，所以在数据规模增后的快排实验中，Java要比C快了一半。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;分别使用 C/C++、Java、Python 和 Haskell 实现快速排序和归并排序算法，对采用这几种语言实现的编程效率，程序的规模，程序的运行效率进行对比分析。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="report" scheme="https://www.annewqx.top/categories/code/report/"/>
    
    
      <category term="编译原理" scheme="https://www.annewqx.top/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>VPS和Shadowsocks配置</title>
    <link href="https://www.annewqx.top/posts/9931/"/>
    <id>https://www.annewqx.top/posts/9931/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2020-03-23T14:17:04.673Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p> VPS服务器的创建、Shadowsocks的配置</p><p> 最新文章<a href="/post/30155">ss to v2ray</a>中，建议更换ss为v2ray </p></blockquote><a id="more"></a><blockquote><p>参考网址</p><ul><li><a href="https://jerryzou.com/posts/shadowsocks-and-digitalocean/" rel="external nofollow noreferrer">Jerryzhou-shadowsocks的基本安装配置</a></li><li><a href="https://www.itrhx.com/2020/01/10/A61-build-a-SSR-server-with-VPS/" rel="external nofollow noreferrer">itrhs-进阶使用</a></li></ul></blockquote><h2 id="1-注册和创建Droplets"><a href="#1-注册和创建Droplets" class="headerlink" title="1 注册和创建Droplets"></a>1 注册和创建Droplets</h2><blockquote><p>在此跳过VPS的注册和购买过程，目前可以使用的VPS服务商中比较有名的，国外有Vurtlr、Linode、DigitalOcean，国内有阿里云、腾讯云，具体对比见 <a href="https://zhuanlan.zhihu.com/p/33841302?utm_source=wechat_session&utm_medium=social&utm_oi=40447418302464" rel="external nofollow noreferrer">可以免费换的VPS商家盘点</a></p><p>笔者使用的是Digital Ocean，附上优惠码：<a href="https://m.do.co/c/438f7c8cc2dd，当时注册的时候据说送50刀，但当时耽搁了开始使用的时间，隔了一个月没用就过期了" rel="external nofollow noreferrer">https://m.do.co/c/438f7c8cc2dd，当时注册的时候据说送50刀，但当时耽搁了开始使用的时间，隔了一个月没用就过期了</a></p><p>系统是 CentOS 7 x64 - Enable IPV6</p><p>非CentOS7可能导致后续出现python等缺失</p></blockquote><ol><li><p>本地创建SSH key（已有则跳过此步骤）</p><blockquote><p>ssh key是让我们每次登陆的时候无需输入密码，通过本机机器码验证的方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看本地的SSH key</span><br><span class="hljs-built_in">cd</span> ~/.ssh<br>ls *.pub<br><span class="hljs-comment"># 创建新的SSH key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">"email@example.com"</span><br><span class="hljs-comment"># 将key加入用户列表，否则每次都会需要验证电脑登录密码</span><br>ssh-add -k /Users/apple/.ssh/id_rsa<br><span class="hljs-comment"># 复制本地公钥</span><br>cat  ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>将公钥添加到DO账号Security中</p></li><li><p>这个时候使用本机公钥即可远程登录服务器，当然不配置也可以使用密码登录的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@IP地址<br></code></pre></td></tr></table></figure><blockquote><p>修改密钥登陆为密码登陆的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑ssh配置文件 </span><br>vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>找到以下字段，并修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">PermitRootLogin</span> <span class="hljs-literal">yes</span>  <span class="hljs-comment"># 允许根用户登录</span><br><span class="hljs-string">PasswordAuthentication</span> <span class="hljs-literal">no</span> <span class="hljs-comment"># 打开密码登录</span><br></code></pre></td></tr></table></figure><p>重启ssh服务<code>service sshd restart</code></p></blockquote></li></ol><h2 id="2-Shadowsocks"><a href="#2-Shadowsocks" class="headerlink" title="2 Shadowsocks"></a>2 Shadowsocks</h2><ol><li><p>CentOS7自带python2.7，所以直接安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install pip<br>pip install shadowsocks<br></code></pre></td></tr></table></figure></li><li><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/shadowsocks.json<br></code></pre></td></tr></table></figure></li><li><p>配置文件内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//普通配置</span><br>&#123;<br>    <span class="hljs-attr">"server"</span>:<span class="hljs-string">"服务器ip地址"</span>,<br>    <span class="hljs-attr">"server_port"</span>:<span class="hljs-number">8388</span>,<br>    <span class="hljs-attr">"local_address"</span>: <span class="hljs-string">"127.0.0.1"</span>,<br>    <span class="hljs-attr">"local_port"</span>:<span class="hljs-number">1080</span>,<br>    <span class="hljs-attr">"password"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>    <span class="hljs-attr">"timeout"</span>:<span class="hljs-number">300</span>,<br>    <span class="hljs-attr">"method"</span>:<span class="hljs-string">"aes-256-cfb"</span>,<br>    <span class="hljs-attr">"fast_open"</span>: <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-comment">// 多端口配置</span><br><span class="hljs-comment">// 即把server_port和password两项替换为port_password</span><br>&#123;<br>    <span class="hljs-attr">"server"</span>: <span class="hljs-string">"服务器ip地址"</span>,<br>    <span class="hljs-attr">"server_ipv6"</span>: <span class="hljs-string">"::"</span>,<br>    <span class="hljs-attr">"local_address"</span>: <span class="hljs-string">"127.0.0.1"</span>,<br>    <span class="hljs-attr">"local_port"</span>: <span class="hljs-number">1081</span>,<br>    <span class="hljs-attr">"port_password"</span>:<br>    &#123;<br>        <span class="hljs-attr">"8686"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8687"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8688"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8689"</span>:<span class="hljs-string">"你设置的密码"</span>,<br>        <span class="hljs-attr">"8690"</span>:<span class="hljs-string">"你设置的密码"</span><br>    &#125;,<br>    <span class="hljs-attr">"timeout"</span>: <span class="hljs-number">120</span>,<br>    <span class="hljs-attr">"udp_timeout"</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-attr">"method"</span>: <span class="hljs-string">"aes-256-cfb"</span>,<br>    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"auth_sha1_v4_compatible"</span>,<br>    <span class="hljs-attr">"protocol_param"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"obfs"</span>: <span class="hljs-string">"http_simple_compatible"</span>,<br>    <span class="hljs-attr">"obfs_param"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"dns_ipv6"</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">"connect_verbose_info"</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">"redirect"</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-attr">"fast_open"</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">"workers"</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ssh服务器启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssserver -c /etc/shadowsocks.json<br><span class="hljs-comment"># 或者在后台运行</span><br>ssserver -c /etc/shadowsocks.json -d start<br>ssserver -c /etc/shadowsocks.json -d stop<br><span class="hljs-comment"># 日志</span><br>ssserver -c /etc/shadowsocks.json --<span class="hljs-built_in">log</span>-file /tmp/ss.log -d start<br>tail -f /tmp/ss.log<br></code></pre></td></tr></table></figure><blockquote><p>附加：vim的安装和配置</p><ol><li><p>安装vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install vim<br></code></pre></td></tr></table></figure></li><li><p>配置vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.vimrc<br></code></pre></td></tr></table></figure></li><li><p>vim配置文件参考</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">" Configuration file for vim<br>set modelines=0"</span> CVE-2007-2438<br><br><span class="hljs-string">" Normally we use vim-extensions. If you want true vi-compatibility<br>"</span> remove change the following statements<br><span class="hljs-built_in">set</span> nocompatible<span class="hljs-string">" Use Vim defaults instead of 100% vi compatibility<br>set backspace=2"</span> more powerful backspacing<br><br><span class="hljs-string">" Don't write backup file if vim is being called by "</span>crontab -e<span class="hljs-string">"<br>au BufWrite /private/tmp/crontab.* set nowritebackup nobackup<br>"</span> Don<span class="hljs-string">'t write backup file if vim is being called by "chpass"<br>au BufWrite /private/etc/pw.* set nowritebackup nobackup<br><br>let skip_defaults_vim=0<br><br>syntax on<br><br>autocmd InsertLeave * se nocul<br>autocmd InsertEnter * se cul<br><br>set tabstop=4<br><br>set softtabstop=4<br>set shiftwidth=4<br><br>set number<br><br>colorscheme pablo<br><br>set ruler<br>set scrolloff=3<br><br>set rtp+=/usr/local/opt/fzf</span><br></code></pre></td></tr></table></figure></li></ol></blockquote></li></ol><h2 id="3-速度升级和安全性"><a href="#3-速度升级和安全性" class="headerlink" title="3 速度升级和安全性"></a>3 速度升级和安全性</h2><ul><li><p>配置防火墙（可能导致后续安装锐速服务后出现模块冲突，建议最后再打开防火墙）</p><ol><li><pre><code class="bash">yum install firewalld<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>2. 配置防火墙文件：<br><br>   &#96;&#96;&#96;bash<br>   vi &#x2F;etc&#x2F;firewalld&#x2F;zones&#x2F;public.xml<br></code></pre></td></tr></table></figure> 一个端口对应两个<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">zone</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">short</span>&gt;</span>Public<span class="hljs-tag">&lt;/<span class="hljs-name">short</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dhcpv6-client"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ssh"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8686"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8686"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8687"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8687"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8688"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8688"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8689"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8689"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8690"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8690"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"tcp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8691"</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">port</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"udp"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8691"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">zone</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>重启shadowsocks，重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重启防火墙</span><br>systemctl restart firewalld.service<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_27751535/article/details/89633138" rel="external nofollow noreferrer">firewalld的基本使用</a></p><ul><li>启动： <code>systemctl start firewalld</code></li><li>关闭： systemctl stop firewalld</li><li>查看状态： <code>systemctl status firewalld</code></li><li>开机禁用 ：<code>systemctl disable firewalld</code></li><li>开机启用 ：<code>systemctl enable firewalld</code></li><li>查看开放的端口：<code>firewall-cmd --list-ports</code></li><li>添加端口：<code>firewall-cmd --zone=public --add-port=59008/tcp --permanent</code>（–permanent永久生效，没有此参数重启后失效)</li></ul><p>查看所有被占用的端口 <code>netstat -tunlp</code></p></blockquote></li></ol></li><li><p>下载锐速服务（建议直接使用下一条四合一脚本）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  对于centOS7 需要先下载需要的固件20140911</span><br>  rpm -ivh ftp://ftp.pbone.net/mirror/ftp.scientificlinux.org/linux/scientific/7.0/x86_64/updates/security/linux-firmware-20140911-0.1.git365e80c.el7.noarch.rpm<br><span class="hljs-comment"># 更换内核</span><br>wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/hombo125/doubi/master/rskernel.sh &amp;&amp; bash rskernel.sh<br><span class="hljs-comment"># 内核更换完后显示Success后需要重新连接到服务器</span><br>ssh root@IP地址<br><span class="hljs-comment"># 查看当前内核版本</span><br>uname -r<br><span class="hljs-comment"># 下载锐速，一路回车安装</span><br>yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install<br></code></pre></td></tr></table></figure></li><li><p><a href="https://www.hostloc.com/thread-508015-1-1.html" rel="external nofollow noreferrer"><strong>bbr 原版/魔改/plus+锐速 四合一脚本</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载脚本</span><br>wget <span class="hljs-string">"https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh"</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh<br><span class="hljs-comment"># 如果证书错误的话</span><br>apt-get -y install ca-certificates<br>yum -y install ca-certificates<br><span class="hljs-comment"># 1-3中选择切换内核，自动重启，如果出现是否删除Configuring image,选择no</span><br><span class="hljs-comment"># 调用脚本</span><br>./tcp.sh<br><span class="hljs-comment"># 在4-8中选择要开的加速</span><br>   <span class="hljs-string">"1. 安装 BBR/BBR魔改版内核"</span>        对应4,5,6（原版，魔改，暴力魔改）<br>   <span class="hljs-string">"2. 安装 BBRplus版内核 "</span>                对应7（plus）<br>   <span class="hljs-string">"3. 安装 Lotserver(锐速)内核"</span>        对应8（锐速）<br></code></pre></td></tr></table></figure></li><li><p><a href="https://www.oldking.net/tag/speedtest/" rel="external nofollow noreferrer">服务器测速 speedtest</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 断链接</span><br>wget -qO- git.io/superbench.sh | bash<br><span class="hljs-comment"># 使用参数</span><br>wget -qO- git.io/superbench.sh | bash -s info<br>wget -qO- git.io/superbench.sh | bash -s io<br>wget -qO- git.io/superbench.sh | bash -s speed<br>wget -qO- git.io/superbench.sh | bash -s fast<br>wget -qO- git.io/superbench.sh | bash -s share<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt; VPS服务器的创建、Shadowsocks的配置&lt;/p&gt;
&lt;p&gt; 最新文章&lt;a href=&quot;/post/30155&quot;&gt;ss to v2ray&lt;/a&gt;中，建议更换ss为v2ray &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="guide" scheme="https://www.annewqx.top/categories/code/guide/"/>
    
    
      <category term="VPS" scheme="https://www.annewqx.top/tags/VPS/"/>
    
      <category term="科学上网" scheme="https://www.annewqx.top/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="ssh" scheme="https://www.annewqx.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>mac快捷键和常用命令行</title>
    <link href="https://www.annewqx.top/posts/8410/"/>
    <id>https://www.annewqx.top/posts/8410/</id>
    <published>2020-01-19T16:00:00.000Z</published>
    <updated>2022-08-09T01:23:25.107Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>mac常用命令行，快捷键。以及其他系统软件的使用技巧</p></blockquote><a id="more"></a><h2 id="命令行和快捷键"><a href="#命令行和快捷键" class="headerlink" title="命令行和快捷键"></a>命令行和快捷键</h2><h3 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h3><ul><li>显示隐藏文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.apple.Finder AppleShowAllFiles YES<br>KillAll Finder<br></code></pre></td></tr></table></figure><ul><li>不显示隐藏文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.apple.Finder AppleShowAllFiles NO<br>KillAll Finder<br></code></pre></td></tr></table></figure><ul><li>快捷键方式：<code>command+shift+.</code></li></ul><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><ul><li>修改截图默认文件名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">defaults write com.apple.screencapture name &quot;Screenshot&quot;<br>killall SystemUIServer<br></code></pre></td></tr></table></figure><ul><li>更换默认截图路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">defaults write com.apple.screencapture location ~&#x2F;Desktop&#x2F;屏幕截图<br>killall SystemUIServer<br></code></pre></td></tr></table></figure><ul><li>去掉窗口截图的阴影</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">defaults write com.apple.screencapture disable-shadow -bool true<br>killall SystemUIServer<br></code></pre></td></tr></table></figure><h3 id="ssh免验证"><a href="#ssh免验证" class="headerlink" title="ssh免验证"></a>ssh免验证</h3><ul><li>有的时候配置了ssh服务，比如VPS远端登录，比如github账号，但是每次使用都会出现<code>Enter passphrase for key &#39;/Users/apple/.ssh/id_rsa&#39;</code>要求输入本地根用户密码—-这和密码登录有什么区别! 原因就是虽然在本地生成了ssh-key，但是没有把key添加到本地用户列表里。使用以下命令即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add -k /Users/apple/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p><code>control+command+space</code></p><h2 id="Automator相关"><a href="#Automator相关" class="headerlink" title="Automator相关"></a>Automator相关</h2><h3 id="批量将word-ppt转换为pdf"><a href="#批量将word-ppt转换为pdf" class="headerlink" title="批量将word/ppt转换为pdf"></a>批量将word/ppt转换为pdf</h3><h3 id="删除重复文件"><a href="#删除重复文件" class="headerlink" title="删除重复文件"></a>删除重复文件</h3><h3 id="批量压缩图片"><a href="#批量压缩图片" class="headerlink" title="批量压缩图片"></a>批量压缩图片</h3><blockquote><p>事实上，不建议使用automator的批量压缩图片，因为不容易控制图片的像素。ps的录制存储图片为web所用格式的动作后批处理文件比较省心</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;mac常用命令行，快捷键。以及其他系统软件的使用技巧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="终端命令" scheme="https://www.annewqx.top/tags/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>markdown进阶使用技巧</title>
    <link href="https://www.annewqx.top/posts/64578/"/>
    <id>https://www.annewqx.top/posts/64578/</id>
    <published>2020-01-16T16:00:00.000Z</published>
    <updated>2022-08-09T01:23:17.278Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>markdown中的mermaid作图, html结合等进阶使用的handbook</p></blockquote><a id="more"></a><h2 id="link_in_page">页内跳转</h2><p><span id="jumptoexample"> 两种方法究其根本都是md中html语法的应用</span></p><h3 id="link_in_page.1">1.生成目录方法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">* </span>[<span class="hljs-string">页内跳转</span>](<span class="hljs-link">#link_in_page</span>)<br><span class="hljs-bullet">  * </span>[<span class="hljs-string">1生成目录的方法</span>](<span class="hljs-link">#link_in_page.1</span>)<br><span class="hljs-bullet">  * </span>[<span class="hljs-string">2html标签实现</span>](<span class="hljs-link">#link_in_page.2</span>)<br></code></pre></td></tr></table></figure><p>生成效果:</p><ul><li><a href="#link_in_page">页内跳转</a><ul><li><a href="#link_in_page.1">1.生成目录的方法</a></li><li><a href="#link_in_page.2">2.html标签实现</a></li></ul></li></ul><p>在正文中对应的地方, 加入章节标题对应id</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'link_in_page'</span>&gt;</span></span>页内跳转<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="link_in_page.2">2.html标签实现</h3><p>定义一个锚在跳转的目的地    <code>&lt;span id = &quot;jumptoexample&quot;&gt;页内跳转&lt;/span&gt;</code> </p><p>在要需要跳转的地方使用md语法的超链接 <code>[ 点击跳转 ](#jumptoexample)</code></p><p><a href="#jumptoexample"> 点击跳转 </a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;markdown中的mermaid作图, html结合等进阶使用的handbook&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="markdown" scheme="https://www.annewqx.top/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>人工智能笔记</title>
    <link href="https://www.annewqx.top/posts/62315/"/>
    <id>https://www.annewqx.top/posts/62315/</id>
    <published>2019-12-22T02:29:17.000Z</published>
    <updated>2022-04-22T14:38:12.877Z</updated>
    
    <content type="html"><![CDATA[<p>北京理工大学计算机学院人工智能笔记</p><a id="more"></a><blockquote><p><a href="/file/AI-exam-A4.zip">点击下载考试A4资料</a></p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ol start="5"><li>Computational Swarm Intelligence 群体智能<ul><li>蚁群算法</li></ul></li><li>Nouvelle AI 行为智能</li></ol><p>学习-变化</p><ul><li><p>监督学习</p></li><li><p>非监督学习</p></li><li><p>强化学习</p></li><li><p>半监督学习*</p></li></ul><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><ol><li>What Why How machines learn<ol><li>Defining the Learning Task</li></ol></li></ol><p>机器学习、人工神经网络（连接主义）、符号智能、行为智能</p><p>怎么防止过拟合呢？应该用cross validation，交叉比对。<br>解释起来就是，你在你表妹那儿学到的东西，在你表姐那儿测试一下对不对。在你表姐那儿学到的，在你二姐那测试一下。来来回回用不同的测试对象和训练对象做交叉比对。这样学到规律就不会过拟合啦~</p><p>评论里有小伙伴提到加Regularization可以解决overfit，这里也形象地说一下。还是在学习追妹子。但是我也有男人的尊严！ 有底线！不能妹子说啥就是啥！今天我的底线是，不能无限量增加要学的规矩的数量！女人不能惯着！ 所以可以引入Lasso，对规矩的数量进行一个penalize。通俗说就是，妹子你让我学三条规矩我就忍了，让我学一百条规矩大爷就不干了。这个Regularization可以有不同的形式，Lasso是一种。所以可以通过引入Regularization增加信息，帮助寻找到最优解。</p><h1 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h1><h2 id="机器学习-1"><a href="#机器学习-1" class="headerlink" title="机器学习"></a>机器学习</h2><h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><h4 id="2-1-method"><a href="#2-1-method" class="headerlink" title="2.1 method"></a>2.1 method</h4><ul><li>induction</li><li>analogy</li><li>deduction</li></ul><h4 id="2-2-type"><a href="#2-2-type" class="headerlink" title="2.2 type"></a>2.2 type</h4><ul><li><strong>supervised learning</strong>（学校时期）<ul><li>输入输出的明确对应关系</li><li>标注数据 positive/negative sample</li><li>function/estimate/fitting/regression</li></ul></li><li><strong>unsupervised learning</strong>（工作时期）<ul><li>发现输入数据的分布规律或不同组成成分之间规律性的相互联系</li><li>结果表示形式<ul><li>统计分布：数据拟合概率密度函数</li><li>数据分组：按相似程度分不同组，然后提取组的统计量<ul><li>如何定义数据/数据集之间的相似性</li><li>如何执行分组计算</li></ul></li><li>符号表示 概念/规则</li></ul></li></ul></li><li><strong>semi-supervise learing</strong><ul><li>少量标注数据/大量未标注数据</li><li>目的：==确定未标注数据的期望输出，将其转变为标注数据==</li><li>具体途径<ul><li>生成模型方法：获得与输入数据拟合的统计分布，有限混合模型（高斯混合模型）</li><li>自学习self-training：根据可靠度逐渐增加标注数据改善执行机构，再利用改善的执行机构对未标注数据标注，交替迭代进行</li><li>合作学习co-training：标注数据分未来感部分，分别训练一个不同的执行机构，利用一个执行机构为另一个执行机构从未标注数据中提取数据进行标注，从而增加另一个执行机构的训练数据并再学习</li><li>基于数据相似度：将标注数据上的标注结果香味标注数据扩散。常用图表示输入，采用最小个min cuts或随机游走random walks确定未标注数据的标注结果</li></ul></li></ul></li><li><strong>reinforcement learning</strong>（幼儿时期）<ul><li>给出对于输出结果正确与否的评价</li></ul></li></ul><h4 id="2-3-优化问题"><a href="#2-3-优化问题" class="headerlink" title="2.3 优化问题"></a>2.3 优化问题</h4><ul><li>如何定义学习目标：<ul><li>监督学习 实际输出与期望输出间误差最小化</li><li>非监督聚类 数据到聚类中心距离最小化</li><li>强化学习 希望累计收益最大化</li></ul></li><li>如何执行优化计算：搜索/最优化问题</li></ul><h4 id="2-4其他学习概念"><a href="#2-4其他学习概念" class="headerlink" title="2.4其他学习概念"></a>2.4其他学习概念</h4><blockquote><ul><li>生成学习generative 和判别学习discriminative </li><li>度量学习</li><li>在线学习/递增学习</li><li>反馈学习</li><li>多任务学习</li><li>深度学习</li><li>迁移学习</li><li>流形学习</li><li>多示例学习</li></ul></blockquote><h4 id="2-5-对学习算法的评价"><a href="#2-5-对学习算法的评价" class="headerlink" title="2.5 对学习算法的评价"></a>2.5 对学习算法的评价</h4><ul><li><p>过学习与泛化</p><ul><li>过学习Overfitting 对经验数据之外的数据性能下降</li><li>执行机构不是越复杂越好，复杂会使其局限于训练数据</li><li>==奥坎姆剃刀处理原则–提高经验数据处理精度，降低执行机构的复杂度 “如无必要，勿增实体”==</li></ul></li><li><p>偏置bias</p><ul><li>选择有偏算法多于无偏算法（没意义）<ul><li>计算量小</li><li>泛化能力强</li></ul></li><li><ul><li>绝对偏置：结果被限制在某个特定范围<ul><li>相对偏置：部分学习结果相对其他结果有优先权</li><li>有些偏置在设计学习算法时明确给出，比如函数类型、统计分布形式</li></ul></li></ul></li><li>分析方法<ul><li>分多个数据集，比较各自学习结果的均质和方差<ul><li>偏差大，绝对偏置不恰当</li><li>方差小，偏置强，好</li></ul></li></ul></li></ul></li><li><p>数据鲁棒性robustness</p><ul><li>训练数据的规模</li><li>训练数据的变化：来自同一问题的不同数据，算法保证学习结果一致</li><li>数据噪声</li><li>数据不平衡：重复采样、减少采样、忽视数据量的数据类型</li></ul></li><li><p>计算复杂性 computatin complexity）</p><ul><li>程序，时间和空间复杂度<ul><li>多项式级算法-满足的算法</li><li>指数级算法</li></ul></li><li>可伸缩性</li><li>收敛性和收敛速率<ul><li>局部最优 local optimization</li></ul></li></ul></li><li><p>透明性（可解释性）-外部人员能否理解</p></li></ul><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><blockquote><ul><li>函数形式<ul><li>数据点形式</li><li>离散函数形式</li><li>连续函数形式</li><li>随机函数形式</li></ul></li><li>学习方法案例<ul><li>记忆学习</li><li>决策树学习</li><li>支持向量机</li><li>贝叶斯学习</li></ul></li></ul></blockquote><h4 id="3-1-函数形式"><a href="#3-1-函数形式" class="headerlink" title="3.1 函数形式"></a>3.1 函数形式</h4><ul><li><p>显式表示形式</p><ul><li><p>基函数 basis function加权求和表达目标函数</p></li><li><blockquote><p>$y=\sum^k_{i=1}k_iB_i(x)$</p></blockquote></li></ul></li><li><p>隐式表示形式</p><ul><li>图结构    <ul><li>决策树3.4</li><li>贝叶斯信念网3.8</li><li>神经网络10.1</li></ul></li></ul></li><li><p>数据点表示形式</p><ul><li>模式识别 最近邻 k-近邻：对于未见数据，根据其到类别样例的距离来进行分类</li></ul></li></ul><h4 id="3-2-优化目标"><a href="#3-2-优化目标" class="headerlink" title="3.2 优化目标"></a>3.2 优化目标</h4><ul><li><p>优化目标/准则 optimization objective/criterion，神经网络中成为损失loss</p><ul><li><p>经验风险最小化</p><ul><li><p>最小平方误差</p></li><li><p>最小化熵</p></li><li><blockquote><p>信息熵 entropy $H(c)=\sum^k_{k=1}-P(c_k)\log P(C_k)$</p><ul><li>值愈小愈确定</li><li>实质是$-log P(C_k)$的均值</li></ul></blockquote><ul><li><p>交叉熵</p><blockquote><p>$CE=-(\sum^N_{i=1}\sum^K_{k=1}P^k_d(x_i)+(1-P^k_d(x_i))\log (a-P^k_y(x_i)))$</p></blockquote></li><li><p>互信息</p></li><li><blockquote><p>conditional entropy </p></blockquote></li></ul></li></ul></li></ul></li></ul><ul><li>optimization algorithm</li></ul><h4 id="3-3-记忆学习-rote-learning"><a href="#3-3-记忆学习-rote-learning" class="headerlink" title="3.3 记忆学习 rote learning"></a>3.3 记忆学习 rote learning</h4><ul><li>存储结构</li><li>环境稳定性</li><li>记忆与计算的平衡</li></ul><h4 id="3-4-决策树学习"><a href="#3-4-决策树学习" class="headerlink" title="3.4 决策树学习"></a>3.4 决策树学习</h4><blockquote><p>生成决策树–自顶向下 贪婪</p></blockquote><ul><li>ID3 <ul><li>overfitting<ul><li>提前停止pre-pruning<ul><li>提前限定树的深度</li><li>估计树的继续生长对性能影响<ul><li>threshold阈值 </li><li>statistical test</li></ul></li></ul></li><li>剪枝<ul><li>post pruning 决策树完全生成以后<ul><li>剪原始树</li><li>将树转换为规则集</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="3-6-贝叶斯"><a href="#3-6-贝叶斯" class="headerlink" title="3.6 贝叶斯"></a>3.6 贝叶斯</h4><ul><li><p>贝叶斯法则 取最有个能的结果</p></li><li><p>朴素贝叶斯</p></li><li><p>BBN</p><ul><li>梯度上升法</li></ul></li></ul><h4 id="3-7-聚类分析"><a href="#3-7-聚类分析" class="headerlink" title="3.7 聚类分析"></a>3.7 聚类分析</h4><blockquote><ul><li>连续数据的相似性</li></ul></blockquote><ul><li>划分聚类</li><li>层次聚类</li></ul><h2 id="ANN"><a href="#ANN" class="headerlink" title="ANN"></a>ANN</h2><h2 id="Search-and-problem-Solving"><a href="#Search-and-problem-Solving" class="headerlink" title="Search and problem Solving"></a>Search and problem Solving</h2><h2 id="Evolutionary-Computatuon"><a href="#Evolutionary-Computatuon" class="headerlink" title="Evolutionary Computatuon"></a>Evolutionary Computatuon</h2><h2 id="Swarm-Intelligence"><a href="#Swarm-Intelligence" class="headerlink" title="Swarm Intelligence"></a>Swarm Intelligence</h2><h2 id="Noucelle-AI"><a href="#Noucelle-AI" class="headerlink" title="Noucelle AI"></a>Noucelle AI</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;北京理工大学计算机学院人工智能笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="course" scheme="https://www.annewqx.top/categories/code/course/"/>
    
    
      <category term="人工智能" scheme="https://www.annewqx.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>操作系统复习</title>
    <link href="https://www.annewqx.top/posts/55434/"/>
    <id>https://www.annewqx.top/posts/55434/</id>
    <published>2019-12-22T02:25:58.000Z</published>
    <updated>2022-04-22T14:38:15.789Z</updated>
    
    <content type="html"><![CDATA[<p>北京理工大学 计算机学院 操作系统概论  复习笔记</p><a id="more"></a><blockquote><p><a href="/file/OS-review.pdf">点击下载复习大纲</a></p><p><a href="/file/OS-answer.pdf">点击下载习题答案</a></p></blockquote><h2 id="第一章-操作系统概论"><a href="#第一章-操作系统概论" class="headerlink" title="第一章 操作系统概论"></a>第一章 操作系统概论</h2><ol><li><p>早期操作系统设计的主要目标：方便性、有效性、便于设计实现维护</p></li><li><p>操作系统管理系统的什么资源：软、硬件资源</p></li><li><p><strong>为什么要引入多道程序系统？他有什么特点：</strong>提高CPU利用率，以主存为中心</p></li><li><p><strong>操作系统的基本功能</strong>：处理机管理、存储器管理、设备管理、文件管理</p></li><li><p>==批处理系统、分时系统和实时系统==各有什 么特点?各适合应用于哪些方面?</p><ul><li>批处理系统：系统吞吐量大，资源利用率高。适合计算量大、自动化程度高的成熟作业</li><li>分时系统：同时性、独立性、交互性、及时性。适合大型数据库的查询</li><li>实时系统：实时性、可靠性、确定性。适合工业生产中的自动控制、飞机导航、导弹发射</li></ul></li><li><p>操作系统的特性：==并发行、共享性（支持并发性的物质基础）==、虚拟性、异步性（随机性）</p></li><li><p>衡量OS的性能指标：</p><ul><li>资源利用率：在给定时间内，系统中某一资源实际使用时间所占比率</li><li>吞吐量：单位时间内系统所处理的信息量</li><li>周转时间：作业进入系统到退出系统所用的时间</li></ul></li><li><p>什么是嵌入式系统：可裁剪的专用计算机系统</p></li><li><p>什么是对称多处理?它有什么好处?</p><p> 操作系统和用户程序可安 排在任何一个处理机上运行，各处理机共享主 存和各种 I/O 设备。</p></li><li><p>为了实现系统保护，<strong>CPU</strong>通常有哪两种工作状态?各种状态下分别执行什么程序?什么时候发生状态转换?状态转换由谁实现的?</p><p>核心态、用户态 操作系统内核程序、用户程序 用户态到核心态的转换由硬件完成;核心态到用 户态的转换由内核程序执行后完成 终端和异常</p></li><li><p>什么是系统调用?什么是特权指令?特权指令执行时，<strong>CPU</strong> 处于哪种工作状态?</p></li><li><p>操作系统通常向用户提供哪几种类型的接口?其主要作用是什么?</p><p>操作接口：命令语言或窗口界面是用户使用计算机系统的主要接口。</p><p>编程接口：系统调用是用户与操作系统 之间的编程接口</p></li></ol><h2 id="第二、三章：进程管理"><a href="#第二、三章：进程管理" class="headerlink" title="第二、三章：进程管理"></a>第二、三章：进程管理</h2><ol><li><p>程序顺序执行的特点：封闭性、可再现性</p></li><li><ul><li><p>进程：程序的一次执行过程</p><ul><li><p>进程由哪些部分组成：进程控制块、进程描述符</p></li><li><p>进程的四大特性</p><ul><li>动态性：临时的，有生命期的</li><li>独立性：系统进行资源分配和调度的独立单位</li><li>并发性：多个进程可在处理机上交替执行</li><li>结构性：系统为每个进程建立一个进程控制块</li></ul></li><li><p>进程和程序的区别</p></li></ul></li></ul></li><li><ul><li>进程控制块的作用是什么：进程的唯一标识<ul><li>主要包括什么：一个可执行程序、一个独立的地址空间、一个执行栈区、打开的文件、申请使用的IO设备</li></ul></li></ul></li><li><p>进程的基本状态：运行态、阻塞态、就绪态、创建态、终止态</p> <img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2301.27.44.png" alt="截屏2019-12-2301.27.44" style="zoom:50%;"></li><li><ul><li>==原语==:若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断<ul><li>==进程控制==</li></ul></li></ul></li><li><p>进程调度的功能、方式、时机、算法</p><ul><li><p>功能：记录系统中各进程的执行状况、选择就绪进程占有CPU、进行进程上下文的切换</p></li><li><p>==方式==：</p><ul><li>非抢先方式</li><li>抢先方式</li></ul></li><li><p>时机：</p><ul><li>现行进程完成或错误终止</li><li>提出IO请求、等待IO完成时</li><li>在分时系统，按照时间片轮转，分给进程的时间片用完时</li><li>优先级调度</li><li>进程执行了某种原语操作</li></ul></li><li><p>算法：先来先服务、最短作业优先、响应比高者优先、优先级调度、轮转、多级反馈队列轮转</p><p>作业调度、交换调度</p><p>作业的周转时间和作业的带权周转时间</p></li></ul></li><li><p>==线程的定义==：组成一个进程作业的许多可能的子任务</p><p> ==线程和进程的比较==：以进程为单位分配资源，以线程为单位调度执行</p><p> 系统对线程的支持：用户级线程、核心级线程、两级组合</p></li><li><p>并发执行的进程在系统中的关系：顺序关系、并行关系、一般关系、互斥关系（对资源的共享）、同步关系（协作完成同一个任务）、进程之间的前序关系</p></li><li><p>临界资源：一次仅允许一个进程使用的系统中共享资源</p><p> 临界区：并发进程访问临界资源的那段必须互斥执行的程序</p><p> 四准则：互斥使用、让权等待、有空让进、有限等待</p></li><li><p>解决进程之间互斥的方法：</p><ul><li>软件的实现方法</li><li>硬件的实现方法<ul><li>开、关中断</li><li>加锁开锁</li><li>P、V信号量</li></ul></li></ul></li><li><p>对资源S执行P操作：申请s</p><p>V：释放s</p><p>==信号量值为负时，说明有一个进程正在临界区执 行，其它的正排在信号量等待队列中等待，等待 的进程数等于信号量值的绝对值==</p></li><li><p>==在用 <strong>P/V</strong> 操作实现进程通信时，应根据 什么原则对信号量赋初值==</p></li><li><p>==IPC问题==</p></li><li><p>==进程高级通信的实现机制==：消息缓冲、信箱 、管道、共享主存区</p></li><li><p>死锁产生的必要条件及解决死锁的方法：</p><ul><li>必要条件：互斥条件、保持和等待条件、不剥夺条件、循环等待条件</li><li>鸵鸟算法、预防、避免、检测和恢复</li></ul></li><li><p>理解银行家算法的实质。能够利用银行家算法避免死锁。</p></li></ol><h2 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章 存储器管理"></a>第四章 存储器管理</h2><ol><li><p>存储器管理的功能：存储器分配、地址转换或重定位、存储器保护、存储器扩充、存储器共享</p><p> 名字空间、==地址空间==、 存储空间、逻辑地址、物理地址。</p></li><li><p>地址重定位：把程序地址空间的逻辑地址转换为存储空间的物理地址</p><ul><li>静态重定位：进程执行前，由装入程序把用户程序中的 指令和数据的逻辑地址全部转换成存储空间 的物理地址。</li><li>动态重定位：程序运行时，把该存储区的起始地址送入重定 位寄存器。需硬件地址转换机构。</li></ul></li><li><p>内存划分为两大部分:用户空间和操作系统空间。存储器管理是针对用户空间进行管理的。</p></li><li><p>存储保护的目的：防止地址越界、正确进行存取</p></li><li><ul><li><p>==可变式分区管理空闲区的方法==：根据作业的大小动态地划分分区，使分区的大小正好等于作业大小</p><ul><li>分区说明表、空闲区链表</li><li>分配算法：首次适应、最佳适应、最坏适应</li></ul><ul><li><p>设置上、下界寄存器来实现存储器保护</p></li><li><p>覆盖与交换的特点：打破了一个程序一旦进入主存， 便一直运行到结束的限制。</p></li></ul></li></ul></li><li><p>页表的作用：系统为每个进程建立一张页面映像表 ，记录逻辑页与主存块的映射关系</p><p> 页式管理的地址变换过程</p><p> 管理内存的数据结构：</p></li><li><p>什么是页式存储器的内零头（操作系统在分配内存时，有时候会产生一些空闲但是无法被正常使用的内存区域，这些就是内存碎片，或者称为内存零头）?它与页的大 小有什么关系?可变式分区管理产生什么 样的零头(碎片)?</p></li><li><p>==段式存储器管理与页式管理的主要区别是什么==：</p><p> (1) 段是由用户划分的;页是为了方便管理由硬件划分 的，对用户是透明的。</p><p> (2) 页的大小固定;段的大小不固定。</p><p> (3) 段式用二维地址空间;页式用一维地址空间。</p><p> (4) 段允许动态扩充，便于存储保护和信息共享。</p><p> (5) 段可能产生主存碎片;页消除了碎片。</p><p> (6) 段式管理便于实现动态链接，页式管理只能进行静 态链接。</p><p> (7) 段与页一样，实现地址变换开销大，表格多。</p></li><li><p>虚拟存储器：是系统为了满足应用对存储器容 量的巨大需求而构造的一个非常大的地址空间</p><p> 虚拟存储器的容量能大于主存容量加辅存容量之和</p></li><li><p>实现请求页式管理，需要对页表进行修改</p><ul><li>==状态位==：用来指示某页是否在主存</li><li>==修改位==：指示该页调入主存后是否被修改 过。“ 1<strong>”</strong> 表示修改过，“ 0<strong>”</strong> 表示未修改过</li><li>==访问位==：指示该页最近是否被访问 过，“ 1<strong>”</strong> 表示最近访问过，“ 0<strong>”</strong> 表示最近未访问</li></ul></li><li><p>产生缺页中断时，系统应做哪些工作：一条指令没执行完， <strong>OS</strong> 进行缺 页中断处理后，应重新执行被中断的指令。</p></li><li><p>==会利用 FIFO、LRU、OPT 以及时钟页面置换算法描述页面置换过程==，计算产生的缺页率。</p><p>Belady 异常：当为进程分配的主存块多时，有 时产生的缺页中断次数反而增多。</p></li><li><ul><li>==多级页表的概念==</li><li>==多级页表中页表建立的时机==：要访问页时，才为包含该页的页表分配空 间和建立页表页</li><li>写时复制技术的概念：若有进程要写某 页，系统就把此页复制到主存的另一个页框中 ，并更新该进程的页表，使之指向此复制的页 框，且设置该页为可读 <strong>/</strong> 写。</li></ul></li><li><p>==页的共享问题。需要一个专门数据结构来记录进程间共享页==：把共享页锁在内存，且在页表中增加引用计数项， 仅当其引用计数为 0 时，才允许调出或释放盘 空间。</p></li></ol><h2 id="第五章-文件系统"><a href="#第五章-文件系统" class="headerlink" title="第五章 文件系统"></a>第五章 文件系统</h2><ol><li><ul><li>什么是文件和文件系统：文件系统是操作系统中最为可见的部分，由一组文件和一个目录结构组成。<ul><li>文件系统的主要功能：<ol><li>管理文件存储器。记录空间使用情况，分配空 间，调整或回收空间。</li><li>实现按名存取。利用目录结构快速定位文件。</li><li>应具有灵活多样的文件结构和存取方法，便于用户存储和加工处理信息。</li><li>提供一套使用方便、简单的操作命令。</li><li>保证文件信息的安全性。</li><li>便于文件的共享。</li></ol></li><li><strong>UNIX</strong>系统如何对文件进行分类：普通文件、目录文件、特别文件 </li><li>它有什么好处?</li></ul></li></ul></li><li><ul><li>文件目录的作用是什么?<ul><li>文件目录项通常包含哪些内容? ==文件控制块==</li></ul></li></ul></li><li><ul><li>文件的逻辑结构有几种形式：<ul><li>无结构的字节流式文件</li><li>有结构的记录式文件<ul><li>文件的存取方法</li></ul></li><li>顺序存取</li><li>直接存取</li></ul></li></ul></li><li><p>==文件的物理结构有哪几种==对于不同的结构，文件系统是如何进行管理的</p><ul><li>连续文件：</li><li>链接文件：把文件所占 用的物理块用链接指针链接起来。 DOS系统文件</li><li>索引文件：为每个文件建立一张索引表 Unix系统文件、Ext2</li><li>索引顺序文件 NTFS</li></ul></li><li><p>DOS 文件卷的结构，DOS 系统的文件物理结构是什么：链接文件</p></li><li><p>了解记录的组块和分解：一个物理块可以存放若干个逻辑记录，一个逻 辑记录可以存放在若干个物理块中。把一个块 中存放的逻辑记录的个数叫做块因子。用户使用记录时，先将包含该记录的物理块读 入内存缓冲区，然后进行记录分解。</p></li><li><p>==文件存储空间的管理方法有几种==?它们各是如何实现文件存储空间的分配和回收的?</p><ul><li>==空白文件目录：系统为所有空白文件建立一张表。每个空白文件占用一个表目。适合于文件的静态分配(连续文件的分配)。</li><li>空闲块链表、空闲块成组链表（UNIX）：把所有空闲块连接成一个链表。</li><li>位映像表 <strong>(bit map)</strong> 或位示图（Ext2、NTFS）：每一个二进制位对应一 个物理盘块。为 <strong>1</strong> 时表示块已分配，为 <strong>0</strong> 时 空闲。==</li></ul></li><li><p>建立多级目录有哪些好处?文件的重名和共享问题是如何得到解决的?</p><ul><li>层次结构清晰，便于管理和保护; 有利于文件分类;解决重名问题;提高 文件检索速度;能够控制存取权限。</li><li>硬链接，符号链接文件</li></ul></li><li><p>文件系统中，常用的文件操作命令有哪些?它们的具体功能是什么?打开和关闭文件命令的目的是什么?</p><ul><li>创建：在指定设备上为指定路径名的文件建立一个目录项，并设置文件的有关属性。</li><li>删除：根据文件的路径名找到指定的目录项，回收其占用的各个物理块，再将该目录项 置为空。</li><li>打开：据文件路径名找到文件目录项，进而找到 <strong>FCB</strong> ，将 <strong>FCB</strong> 复制到内存并记录到系统打 开文件表</li><li>关闭：释放文件在主存专门区域中的目录项，切断用户与文件的联系。若该目录项被修改过，则复制到磁盘。若文件作过某些修改，应将其写回辅存。</li><li>写、追加、随机存取、得到文件属性、设置文件属性、重命名</li></ul></li><li><p>==存取控制表 <strong>ACL</strong> 的概念==：为存取控制矩阵中的每一列建立一张存 取控制表 <strong>(ACL)</strong> ，用一有序对 <strong>(</strong> 域 <strong>,</strong> 权 集 <strong>)</strong> 表示。</p></li><li><p>==理解内存映射文件(<strong>memory mapped</strong> <strong>file</strong>)的过程==</p><p>将文件映射到进程地址空间的 一个区域，返回虚拟地址，仅当需要对文件存取 时，才传输实际的数据。</p></li></ol><h2 id="第六章-设备管理"><a href="#第六章-设备管理" class="headerlink" title="第六章 设备管理"></a>第六章 设备管理</h2><ol><li><p><strong>I/O</strong> 设备通常大致可分为哪两大类?各自传输的信息单位有什么特点?</p><ul><li>1 字符设备:人机交互设备。是以字符为单位发 送和接收数据的，通信速度比较慢。键盘和显 示器、鼠标、扫描仪、打印机、绘图仪等。</li><li>2 块设备:外部存储器。以块为单位传输数据。 常见块尺寸: <strong>512B</strong> ~ <strong>32KB</strong> 。如磁盘、磁带、 光盘等。</li><li>3 网络通信设备:主要用于与远程设备的通信。 传输速度比字符设备快，比块设备慢。如网卡 、调制解调器等。</li><li>4 时钟:按预先规定好的时间间隔产生中断。</li></ul></li><li><p>常用的四种数据传输方式</p><ul><li>程序查询方式</li><li>中断方式</li><li>DMA（直接存储器访问）</li><li>通道控制</li></ul></li><li><p>根据设备的使用方式，设备被分为几种类型?何为虚拟设备?它是通过什么技术实现的?</p><p>  独占设备:临界资源，如打印机。</p><p>  共享设备:多个进程可交叉访问。如磁盘。</p><p>  虚拟设备:是指设备本身是独占设备，而经过<strong>Spooling</strong> 技术虚拟技术处理，可以把它改造成共享设备。</p></li><li><p>按照设备管理的层次结构，<strong>I/O</strong> 软件划分为几层?各层主要实现哪些功能?</p><ul><li><p>用户层的IO接口</p></li><li><p>中断处理程序</p></li><li><p>设备驱动程序</p></li><li><p>==独立于设备的软件==</p></li><li><p>缓冲技术</p></li><li><p>负责设备分配和调度</p></li><li><p>出错处理</p></li><li><p>IO硬件</p></li></ul></li><li><p>何为设备的独立性?</p><p> (设备独立性是指用户及用户程序不受 系统配置的设备类型和具体设备的台号 的影响。用户只是使用逻辑设备，具体的 映射由操作系统完成。)</p></li><li><p>==什么是 <strong>SPOOLING</strong> 技术?以输出为例， 说明它的实现原理。(<strong>SPOOLING</strong> 技术 是以空间换时间)==</p></li><li><p>一个特定磁盘上的信息如何进行编址? 盘面号、磁道号 和扇区号(或柱面号、磁 头号和扇区号)。</p></li><li><p>要将磁盘上一个块的信息传输到主存需 要系统花费哪些时间?==(寻道时间、旋 转延迟时间和读<strong>/</strong>写传输时间）==</p></li><li><p>常用的磁盘调度算法：==先来先服务、最短寻道时间优先、扫描法== ( <strong>SCAN, C_SCAN, LOOK, C_LOOK</strong>)。</p></li></ol><h2 id="第七章-Linux进程管理"><a href="#第七章-Linux进程管理" class="headerlink" title="第七章 Linux进程管理"></a>第七章 Linux进程管理</h2><ol><li>进程控制块，其中与进程管理、存储器管理和文件管理有关的一些字段，线程组标识符。</li><li>与进程创建有关的函数: <strong>fork</strong> <strong>( )</strong>、<strong>vfork( )</strong>、<strong>clone( )</strong>。</li><li>理解进程切换的过程。涉及到页目录表、 核心栈、硬件上下文<ol><li>第一步，切换页目录表以安装一个 新的地址空间</li><li>第二步，切换核心栈和硬件上 下文。由 <strong>schedule()</strong> 函数完成进程切<br> 换</li></ol></li><li>进程调度方式。进程调度时机。<ul><li>可抢先式的动态优先级调 度方式</li><li>进程调度可分为:先进先出的实时进程、时 间片轮转的实时进程、普通的分时进程。</li></ul></li><li><strong>Linux</strong> 有很多内核线程，了解 <strong>0</strong> 号进程和 <strong>1</strong> 号进程的作用。<ul><li><strong>0</strong> 号进程就是一个内核线程， <strong>0</strong> 号进程是所 有进程的祖先进程，又叫 <strong>idle</strong> 进程或叫做 <strong>swapper</strong> 进程。每个 <strong>CPU</strong> 都有一个 <strong>0</strong> 号进 程。</li><li><strong>1</strong> 号进程是由 <strong>0</strong> 号进程创建的内核线程 <strong>init</strong> ，负责完成内核的初始化工作。在系统关闭 之前， <strong>init</strong> 进程一直存在，它负责创建和监 控在操作系统外层执行的所有用户态进程。</li></ul></li></ol><h2 id="第八章-Linux存储器管理"><a href="#第八章-Linux存储器管理" class="headerlink" title="第八章 Linux存储器管理"></a>第八章 Linux存储器管理</h2><ol><li><ul><li>进程地址空间的划分：链接虚拟内存区域的单链表<ul><li>管理进程私有地址空间的数据结构：红黑树</li><li>指向映射文件对象的指针字段：<strong>struct</strong> <strong>file</strong> <strong>* vm_file;</strong></li><li>指向进程页目录表的指针字段：<strong>pgd_t *pgd;</strong></li></ul></li></ul></li><li><p><strong>Linux</strong> 堆的管理:<strong>malloc( )</strong>，<strong>free( )</strong>。</p></li><li><ul><li><p>管理物理内存页框的数据结构：</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> &#123;</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> flags; <span class="hljs-comment">/* 页框状态标志 P172*/</span><br><span class="hljs-keyword">atomic_t</span> _count; <span class="hljs-comment">/*页框的引用计数*/</span><br><span class="hljs-keyword">atomic_t</span> _mapcount; <span class="hljs-comment">/* 对应的页表项数目 */</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">private</span>; <span class="hljs-comment">/* 由伙伴系统使用 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">address_space</span> *<span class="hljs-title">mapping</span>;</span> 页高速缓存<br><span class="hljs-keyword">pgoff_t</span> index; 在页高速缓存中以页为单位偏移<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">lru</span>;</span> 链入活动页框链表或非活 动 ..<br><span class="hljs-keyword">void</span> *<span class="hljs-keyword">virtual</span>; <span class="hljs-comment">/* 页框所映射的内核虚地址 */</span> &#125;;<br></code></pre></td></tr></table></figure><ul><li><p>内存管理区 <strong>zone</strong> 结构：</p><p> <strong>ZONE_DMA</strong> :包含低于 <strong>16MB</strong> 的常规内存 页框。用于对老式的基于 <strong>ISA</strong> 设备的 <strong>DMA</strong> 支持。</p><p>  <strong>ZONE_NORMAL</strong> :包含高于 <strong>16MB</strong> 且低于 <strong>896MB</strong> 的常规内存页框。</p><p>  <strong>ZONE_HIGHMEM</strong> :包含从 <strong>896MB</strong> 开始的 高端物理页框。内核不能直接访问这部分页 框。在 <strong>64</strong> 位体系结构上，该区总是空的。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zone</span> &#123;</span> <br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> free_pages; 空闲页框数<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">per_cpu_pageset</span> <span class="hljs-title">pageset</span>[<span class="hljs-title">NR_CPUS</span>];</span><br><span class="hljs-comment">/* 每 CPU 页高速缓存 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">free_area</span> <span class="hljs-title">free_area</span>[11];</span><br><span class="hljs-comment">/* 伙伴系统中的 11 个空闲页框链表 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">active_list</span>;</span> <span class="hljs-comment">/* 活动页框链表，存放 最近正被访问的页框 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">inactive_list</span>;</span> <span class="hljs-comment">/* 非活动页框链表， 存放最近未被访问的页框 */</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><pre><code>* 伙伴系统：采用伙伴系统 **(buddy system)** 管理连续的 空闲内存页框。伙伴算法把空闲页框组织成 **11** 个链表，分 别链有大小为 **1** ， **2** ， **4** ， **8** ， **16** ， **32** ， **64** ， **128** ， **256** ， **512** 和 **1024** 个连续 页框的块。* ==分区页框分配器分配页框的过程==</code></pre><ol start="4"><li><ul><li>理解 <strong>slab</strong> 分配器的原理：<strong>slab</strong> 分配器为不同类型的对象生成不同的高 速缓存，每个高速缓存存储相同类型的对象。 高速缓存由一连串的 <strong>slab</strong> 构成，每个 <strong>slab</strong> 包含了若干个同类型的对象。<ul><li><strong>slab</strong> 分配器的 作用：<strong>slab</strong> 分配器为只有几十或几百个字节的小内 存区分配内存。如， <strong>file</strong> 对象。</li></ul></li></ul></li><li><ul><li>进程页表建立的时机：==页表一直推迟到 访问页时才建立，以节约内存==<ul><li>了解页目录表项 或页表项所包含的字段。<img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2303.33.39.png" alt="截屏2019-12-2303.33.39" style="zoom:50%;"></li><li>逻辑地址的划分，利用两级页表实现地址转换的过程。<img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2303.35.01.png" alt="截屏2019-12-2303.35.01" style="zoom:50%;"></li></ul></li></ul></li><li><p>请求调页： 请求调页增加了系统中的空闲页框数。</p><p> 所缺的页可能存放的地方。</p><ul><li>  该页从未被进程访问过，且没有相应的内存映 射。</li><li>  该页已被进程访问过，但其内容被临时保存到 磁盘交换区上。</li><li>  该页在非活动页框链表中。</li><li>  该页正在由其它进程进行 <strong>I/O</strong> 传输过程中。</li></ul></li><li><p>了解盘交换区空间的管理方法。</p><ul><li> 每个盘交换区都由一组 <strong>4KB</strong> 的页槽组成。</li></ul><ul><li>  盘交换区的第一个页槽用来存放该交换区的 有关信息，有相应的描述符。</li><li>  存放在磁盘分区中的交换区只有一个子区， 存放在普通文件中的交换区可能有多个子区 ，原因是磁盘上的文件不要求连续存放。</li><li>  内核尽力把换出的页存放在相邻的页槽中， 减少访问交换区时磁盘的寻道时间。</li></ul></li></ol><h2 id="第九、十章-Linux文件系统"><a href="#第九、十章-Linux文件系统" class="headerlink" title="第九、十章 Linux文件系统"></a>第九、十章 Linux文件系统</h2><ol><li><ul><li><strong>Ext2</strong> 文件卷的布局?<ul><li><strong>Ext2</strong> 把磁盘块分为组，每组包含存放在相 邻磁道的数据块和索引节点。块组的大小相 等并顺序安排。</li><li><strong>Ext2</strong> 用“块组描述符”来描述这些块组本身的 结构信息，同时将超级块和所有块组描述符 重复存储于每个块组中。</li><li><strong>Ext2</strong> 通过“位图”来管理每个块组中的磁盘块 和索引节点。盘块位图，索引节点位图。<ul><li>各部分的作用是什 么?</li></ul></li></ul></li></ul></li><li><ul><li><strong>Linux</strong> 系统把一般的文件目录项分成哪两部分?简单目录项和索引节点两部分。<ul><li>这样做的好处是什么?可以提高文件目录的检索速度。实现多条路 径共享文件，减少信息冗余。</li></ul></li></ul></li><li><ul><li><strong>Linux</strong> 文件系统的索引节点中，索引表 划分成几级?<ul><li>文件的索引表是如何增长 的?</li><li>要求能够利用索引表实现将文件中的字节地址转换成文件的物理块的操作。</li></ul></li></ul></li><li><p>==硬链接和符号链接的区别?==<strong>硬链接 和 源文件 是同一个文件；软链接 和 源文件 是2个不同的文件。</strong></p></li><li><p><strong>Linux</strong> 文件系统如何管理空闲存储空间?通过超级快和块组描述符的空闲块</p></li><li><p><strong>VFS</strong> 通用文件模型中的四个主要对象?</p><ul><li> 超级块对象: <strong>Linux</strong> 为每个安装好的文件系统 都建立一个超级块对象。</li><li> 索引节点对象:打开的文件对应的…。</li><li> 目录项对象: <strong>dentry (directory entry)</strong></li><li> 文件对象:记录了进程与打开的文件之间的交互信息</li></ul></li><li><ul><li><p><strong>Linux</strong> 系统中，进程打开一个磁盘文件 要涉及哪些数据结构?<strong>Struct tast_struct</strong>、<strong>files_struct</strong></p><ul><li><p>它们各有哪些关键字段?</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">Struct tast_struct&#123;<br>......<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">files_struct</span> *<span class="hljs-title">files</span>;</span> <span class="hljs-comment">//指向进程打 开文件信息</span><br>...&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">files_struct</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> **<span class="hljs-title">fd</span>;</span> <span class="hljs-comment">//指向文件对象指针数组 </span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">fd_array</span>[ ];</span> <span class="hljs-comment">//文件对象指针数组 ......</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>他们的作用是什么</p> <img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2303.50.40.png" alt="截屏2019-12-2303.50.40" style="zoom:50%;"></li></ul></li></ul></li><li><p>一个文件在使用与不用时各占用系统哪些资源?</p></li><li><p>安装表的作用是什么?内核将安装点与被安装的文件系统信息保存在 <strong>vfsmount</strong> 结构中，形成一个链式安装表。</p></li></ol><h2 id="第十四章-Windows模型"><a href="#第十四章-Windows模型" class="headerlink" title="第十四章 Windows模型"></a>第十四章 Windows模型</h2><ol><li><p><strong>Windows</strong> 采用什么样的体系结构?</p> <img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2304.17.13.png" alt="截屏2019-12-2304.17.13" style="zoom: 33%;"></li><li><p>硬件抽象层<strong>HAL</strong>的作用是什么?直接操纵硬件。隐藏各种与硬件有关的细节。使内核 、设备驱动程序和执行体免受特殊硬件平 台差异的影响。 系统可移植性好。</p></li><li><p><strong>Windows</strong>系统组件的基本机制包括:</p><ul><li>陷阱调度：当检测到异常或中断发生时，将暂停正 在处理的事情，把控制转交给内核的陷 阱处理程序，陷阱处理程序再将控制转 交给相应的异常或中断处理程序。属于内核的功能。包括中断、<strong>DPC</strong> 、 <strong>APC</strong> 、异常调度、系统服务调度。</li><li>执行体对象管理器、</li><li>同步(自旋 锁、内核调度程序对象)、</li><li>本地过程调用 <strong>LPC</strong> ：服务器进程创建一个 <strong>LPC</strong> 连接端口对象，然后在该端口上监听客 户连接请求。类似 <strong>socket</strong> 编程。消息传递。</li></ul></li><li><ul><li>延迟过程调用 <strong>DPC</strong>：<strong>DPC</strong> 被用来执行一些相对于当前高优先级的任务来说不那么紧急的任务。<ul><li>异步过程调 用 <strong>APC</strong>：为用户程序和系统代码提供了一种在特定用户线程环境中执行代码的方法。</li></ul></li></ul></li><li><p><strong>Windows</strong>中有哪些对象，都有什么作用?</p><ul><li>==执行体对象==：进程和线程管理器、内 存管理器、<strong>I/O</strong> 管理器、对象管理器等</li><li>==内核对象==：内核实现的一个初级对象集， 对用户态代码不可见，仅供执行体使用。 一个执行体对象可以包含一个或多个內 核对象。)</li></ul></li><li><p>在多处理机系统中，提供了哪些同步和 互斥机制?</p><p> 内核引入自旋锁实现多处 理机互斥机制。内核以内核对象的形式给 执行体提供其他的同步机构—“调度程序 对象”，包括:进程对象、线程对象、事件 对象、信号量对象、互斥体对象、可等待 的定时器对象及文件对象等。每个同步对 象都有“有信号”或“无信号”两种状态。</p></li><li><p>==线程如何实现等待一个同步对象的操作==：对象管理器提供<strong>WaitForSingleObject( )</strong> ，使线程与调度 程序对象同步。</p></li></ol><h2 id="第十五章-Windows进程和线程管理"><a href="#第十五章-Windows进程和线程管理" class="headerlink" title="第十五章 Windows进程和线程管理"></a>第十五章 Windows进程和线程管理</h2><ol><li><p>管理进程和线程的数据结构:==执行体进程块 <strong>EPROCESS</strong>、执行体线程块ETHREAD*<em>、内核进程块 *</em>KPROCESS、内核线程块 KTHREAD==</p></li><li><p>创建进程:<strong>CreateProcess</strong>( ); 创建线程:<strong>CreateThread( )</strong></p></li><li><p>==线程的 <strong>7</strong> 种状态，及其解释。==</p><ol><li>就绪状态 <strong>(ready)</strong></li><li>备用状态 <strong>(standby)</strong> 。已选好处理机，正等待 描述表切换，以便进入运行状态。</li><li>运行状态 <strong>(Running)</strong></li><li>等待状态 <strong>(waiting)</strong></li><li>传输状态 <strong>(transition)</strong> 。核心栈被调到外存的 就绪态。</li><li>终止状态 <strong>(terminated)</strong></li><li>初始化状态 <strong>(Initialized)</strong> 。正在创建过程中。</li></ol></li><li><p>==线程调度:基于优先级的抢先式的多处理机调度系统。==</p><p> 线程调度程序的数据结构: <strong>32</strong> 个就绪线程队列、<strong>32</strong> 位线程就绪队列 位图、<strong>32</strong> 位处理机空闲位图。</p></li><li><p>==线程优先级的提升时机==：</p><ol><li><p><strong>I/O</strong>操作完成后的线程。</p></li><li><p>信号量或事件等待结束的线程。</p></li><li><p>前台进程中的线程完成一个等待操作。 </p></li><li><p>由于窗口活动而唤醒 <strong>GUI</strong> 线程。</p></li><li><p>线程处于就绪状态超过一定时间，仍未能 进入运行状态 <strong>(</strong> 处理器饥饿 <strong>)</strong> </p></li></ol></li></ol><h2 id="第十六章-Windows存储器管理"><a href="#第十六章-Windows存储器管理" class="headerlink" title="第十六章 Windows存储器管理"></a>第十六章 Windows存储器管理</h2><ol><li><p>两种数据结构:</p><p> 虚拟地址描述符 <strong>VAD</strong>：当线程要求分配一块连续虚存时，系统为它建立一个 <strong>VAD</strong> 结构。</p><p> 区域对象：文件映 射对象，是一个可被多个进程共享的存储 区。</p></li><li><p>==虚拟内存区域:空闲的、保留的、提交的==</p></li><li><p><strong>32</strong> 位逻辑地址，二级页表。</p><p> 页目录表项 和页表项具有相同的数据结构，该数据 结构包含哪些数据项?</p><p> 进程页表建立的时机。进程的地址转换过程。<img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2304.35.03.png" alt="截屏2019-12-2304.35.03" style="zoom:50%;"></p></li><li><p>管理物理内存的数据结构:页框数据库。</p><p> 页框的 <strong>8</strong> 种状态:活动、转换、备用、更 12改、更改不写入、空闲、零初始化、坏，</p><p> 页框的状态转换图 <strong>16.9</strong>。<img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2304.36.38.png" alt="截屏2019-12-2304.36.38" style="zoom:50%;"></p></li><li><p>原型页表项，区域对象的页表。虚拟页式中，采用原型页表实现多进程共享页。</p></li><li><p><strong>Windows</strong> 采用的页替换策略是什么?在多处理器系统中，采用了 局部先进先出置换策略。而在单处理器 系统中，更接近于最近最久未使用策略 (<strong>LRU</strong> ，也称为“时钟页面置换算法” <strong>)</strong> 。</p></li></ol><h2 id="第十七章-Windows文件系统"><a href="#第十七章-Windows文件系统" class="headerlink" title="第十七章 Windows文件系统"></a>第十七章 Windows文件系统</h2><ol><li><p><strong>Windows</strong> 所支持的文件系统类型有哪些?支持 <strong>FAT12</strong> 、 <strong>FAT16</strong> 和 <strong>FAT32</strong> 文件系统。 <strong>12</strong> 、 <strong>16</strong> 和 <strong>32</strong> 分别为描述磁盘块簇地址使 用的位数。</p></li><li><p>虚拟簇号和逻辑簇号的概念。</p></li><li><p><strong>NTFS</strong> 卷的结构，主控文件表 <strong>MFT</strong> 的作用。<img src="../../../Library/Application%2520Support/typora-user-images/%25E6%2588%25AA%25E5%25B1%258F2019-12-2304.39.20.png" alt="截屏2019-12-2304.39.20"></p><p> <strong>MFT</strong> 是 <strong>NTFS</strong> 卷的管理控制中心，包含了 卷上所有的文件、目录及空闲未用盘簇的 管理信息</p></li><li><p><strong>NTFS</strong> 文件的物理结构:索引顺序结构</p></li><li><p>管理文件的目录结构采用 <strong>B-</strong>树。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;北京理工大学 计算机学院 操作系统概论  复习笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="course" scheme="https://www.annewqx.top/categories/code/course/"/>
    
    
      <category term="操作系统" scheme="https://www.annewqx.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda的环境管理</title>
    <link href="https://www.annewqx.top/posts/52525/"/>
    <id>https://www.annewqx.top/posts/52525/</id>
    <published>2019-12-12T16:00:00.000Z</published>
    <updated>2022-11-08T08:12:15.351Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>常用的Conda命令</p></blockquote><a id="more"></a><h1 id="Conda的环境管理"><a href="#Conda的环境管理" class="headerlink" title="Conda的环境管理"></a>Conda的环境管理</h1><p>Conda的环境管理功能允许我们同时安装若干不同版本的Python，并能自由切换。对于上述安装过程，假设我们采用的是Python 2.7对应的安装包，那么Python 2.7就是默认的环境（默认名字是root注意这个root不是超级管理员的意思）。<br>假设我们需要安装Python 3.4，此时，我们需要做的操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）</span><br>conda create —name python34 python=3.4<br><br><span class="hljs-comment"># 安装好后，使用activate激活某个环境</span><br>activate python34 <span class="hljs-comment"># for Windows</span><br><span class="hljs-built_in">source</span> activate python34 <span class="hljs-comment"># for Linux &amp; Mac</span><br><span class="hljs-comment"># 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH</span><br><br><span class="hljs-comment"># 此时，再次输入</span><br>python —version<br><span class="hljs-comment"># 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境</span><br><br><span class="hljs-comment"># 如果想返回默认的python 2.7环境，运行</span><br>deactivate python34 <span class="hljs-comment"># for Windows</span><br><span class="hljs-built_in">source</span> deactivate python34 <span class="hljs-comment"># for Linux </span><br>conda deactivate python34 <span class="hljs-comment"># for mac</span><br><br><span class="hljs-comment"># 删除一个已有的环境</span><br>conda remove —name python34 —all<br></code></pre></td></tr></table></figure><blockquote><p>用户安装的不同python环境都会被放在目录~/anaconda/envs<br>下，可以在命令中运行<br>conda info -e<br>查看已安装的环境，当前被激活的环境会显示有一个星号或者括号。<br>说明：有些用户可能经常使用python 3.4环境，因此直接把<br>~/anaconda/envs/python34<br>下面的bin或者Scripts加入PATH，去除anaconda对应的那个bin目录。这个办法，怎么说呢，也是可以的，但总觉得不是那么elegant……<br>如果直接按上面说的这么改PATH，你会发现conda命令又找不到了（当然找不到啦，因为conda在<br>~/anaconda/bin<br>里呢），这时候怎么办呢？方法有二：1. 显式地给出conda的绝对地址 2. 在python34环境中也安装conda工具（推荐）。</p></blockquote><h1 id="Conda的包管理"><a href="#Conda的包管理" class="headerlink" title="Conda的包管理"></a>Conda的包管理</h1><blockquote><p>Conda的包管理就比较好理解了，这部分功能与<br>pip<br>类似。<br>例如，如果需要安装scipy：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装scipy</span><br>conda install scipy<br><span class="hljs-comment"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class="hljs-comment"># 查看已经安装的packages</span><br>conda list<br><span class="hljs-comment"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class="hljs-comment"># 安装scipy</span><br>conda install scipy<br><span class="hljs-comment"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class="hljs-comment"># 查看已经安装的packages</span><br>conda list<br><span class="hljs-comment"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class="hljs-comment">### conda的一些常用操作如下：</span><br><span class="hljs-comment"># 查看当前环境下已安装的包</span><br>conda list<br><span class="hljs-comment"># 查看某个指定环境的已安装包</span><br>conda list -n python34<br><span class="hljs-comment"># 查找package信息</span><br>conda search numpy<br><span class="hljs-comment"># 安装package</span><br>conda install -n python34 numpy<br><span class="hljs-comment"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class="hljs-comment"># 也可以通过-c指定通过某个channel安装</span><br><span class="hljs-comment"># 更新package</span><br>conda update -n python34 numpy<br><span class="hljs-comment"># 删除package</span><br>conda remove -n python34 numpy<br><span class="hljs-comment"># 查看当前环境下已安装的包</span><br>conda list<br><span class="hljs-comment"># 查看某个指定环境的已安装包</span><br>conda list -n python34<br><span class="hljs-comment"># 查找package信息</span><br>conda search numpy<br><span class="hljs-comment"># 安装package</span><br>conda install -n python34 numpy<br><span class="hljs-comment"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class="hljs-comment"># 也可以通过-c指定通过某个channel安装</span><br><span class="hljs-comment"># 更新package</span><br>conda update -n python34 numpy<br><span class="hljs-comment"># 删除package</span><br>conda remove -n python34 numpy<br><span class="hljs-comment">### 前面已经提到，conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如</span><br><span class="hljs-comment"># 更新conda，保持conda最新</span><br>conda update conda<br><span class="hljs-comment"># 更新anaconda</span><br>conda update anaconda<br><span class="hljs-comment"># 更新python</span><br>conda update python<br><span class="hljs-comment"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</span><br><span class="hljs-comment">### 补充：如果创建新的python环境，比如3.4，运行</span><br><span class="hljs-comment">### conda create -n python34 python=3.4</span><br><span class="hljs-comment">### 之后，conda仅安装python 3.4相关的必须项，如python, pip等，如果希望该环境像默认环境那样，安装anaconda集合包，只需要：</span><br><span class="hljs-comment"># 在当前环境下安装anaconda包集合</span><br>conda install anaconda<br><span class="hljs-comment"># 结合创建环境的命令，以上操作可以合并为</span><br>conda create -n python34 python=3.4 anaconda<br><span class="hljs-comment"># 也可以不用全部安装，根据需求安装自己需要的package即可</span><br><span class="hljs-comment"># 在当前环境下安装anaconda包集合</span><br>conda install anaconda<br><span class="hljs-comment"># 结合创建环境的命令，以上操作可以合并为</span><br>conda create -n python34 python=3.4 anaconda<br><span class="hljs-comment"># 也可以不用全部安装，根据需求安装自己需要的package即可</span><br><span class="hljs-comment"># 设置国内镜像</span><br><span class="hljs-comment">### 如果需要安装很多packages，你会发现conda下载的速度经常很慢，因为Anaconda.org的服务器在国外。所幸的是，清华TUNA镜像源有Anaconda仓库的镜像，我们将其加入conda的配置即可：</span><br><span class="hljs-comment"># 添加Anaconda的TUNA镜像</span><br>conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br><span class="hljs-comment"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class="hljs-comment"># 设置搜索时显示通道地址</span><br>conda config —<span class="hljs-built_in">set</span> show_channel_urls yes<br><span class="hljs-comment"># 添加Anaconda的TUNA镜像</span><br>conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br><span class="hljs-comment"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class="hljs-comment"># 设置搜索时显示通道地址</span><br>conda config —<span class="hljs-built_in">set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure><blockquote><p>执行完上述命令后，会生成<br>~/.condarc<br>(Linux/Mac)或<br>C:UsersUSER_NAME.condarc<br>文件，记录着我们对conda的配置，直接手动创建、编辑该文件是相同的效果。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;常用的Conda命令&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="python" scheme="https://www.annewqx.top/tags/python/"/>
    
      <category term="anaconda" scheme="https://www.annewqx.top/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>软件测试笔记</title>
    <link href="https://www.annewqx.top/posts/46157/"/>
    <id>https://www.annewqx.top/posts/46157/</id>
    <published>2019-11-27T02:21:20.000Z</published>
    <updated>2022-04-22T14:38:09.555Z</updated>
    
    <content type="html"><![CDATA[<p>北京理工大学 计算机 软件测试 笔记</p><a id="more"></a><h2 id="1-软件测试基础"><a href="#1-软件测试基础" class="headerlink" title="1 软件测试基础"></a>1 软件测试基础</h2><h3 id="1-1-软件测试"><a href="#1-1-软件测试" class="headerlink" title="1.1 软件测试"></a>1.1 软件测试</h3><ul><li>定义 ：在特定条件下运行系统或构件、观察或记录结果，对系统某个方面做出评价。分析某个软件项以发现现存和要求的条件之差别并评价此软件项的特性</li></ul><h3 id="1-2-软件缺陷-Bug"><a href="#1-2-软件缺陷-Bug" class="headerlink" title="1.2 软件缺陷 Bug"></a>1.2 软件缺陷 Bug</h3><ul><li><p>定义：缺陷是对软件产品预期属性的偏离现象。与产品说明书不符</p></li><li><p>分类</p><ul><li>功能、特点没实现/部分实现</li><li>实际与预期不一致</li><li>运行出错：运行中断、系统崩溃、界面混乱</li><li>用户不能接受的其他问题：存取时间过长、界面不美观</li></ul></li><li><p>缺陷修复成本<br>  1.3 软件测试模型</p></li><li><p>瀑布测试模型</p><ul><li>修复代价高</li></ul></li></ul><h3 id="1-2-V模型"><a href="#1-2-V模型" class="headerlink" title="1.2 V模型"></a>1.2 V模型</h3><p><img src="/posts/46157/1-2-1.png" alt="1-2-1"></p><ul><li>把测试和设计开发分开</li><li>测试分阶段</li><li>测试阶段之内可以并行</li></ul><h3 id="1-3-RUP迭代V模型"><a href="#1-3-RUP迭代V模型" class="headerlink" title="1.3 RUP迭代V模型"></a>1.3 RUP迭代V模型</h3><ul><li><img src="/posts/46157/1-3-1.png" alt="RUP" style="zoom: 50%;"></li><li><img src="/posts/46157/1-3-2.png" alt="1-3-2" style="zoom:40%;"></li></ul><h3 id="1-4-软件测试分类"><a href="#1-4-软件测试分类" class="headerlink" title="1.4 软件测试分类"></a>1.4 软件测试分类</h3><ul><li>静态测试：看文档</li><li>动态测试：运行软件</li></ul><h3 id="1-5-测试用例"><a href="#1-5-测试用例" class="headerlink" title="1.5 测试用例"></a>1.5 测试用例</h3><ul><li>定义：确定软件或某功能与预期一致的一系列条件的集合</li><li>作用：<ul><li>输入</li><li>判定</li><li>复用（测试脚本）</li></ul></li><li>形式 步骤列表等</li></ul><h3 id="1-6-软件测试流程"><a href="#1-6-软件测试流程" class="headerlink" title="1.6 软件测试流程"></a>1.6 软件测试流程</h3><img src="/posts/46157/1-6.jpg" alt="1-6" style="zoom:60%;"><ul><li>测试过程<br>  软件配置、测试配置</li></ul><h3 id="1-7-软件测试验证和确认的关系"><a href="#1-7-软件测试验证和确认的关系" class="headerlink" title="1.7 软件测试验证和确认的关系"></a>1.7 软件测试验证和确认的关系</h3><ul><li>软件测试：设计符合需求，代码符合设计</li><li>软件确认：黑盒确认测试（用户来判断）</li><li><strong>测试=验证+确认</strong></li></ul><h3 id="1-8-软件测试原则"><a href="#1-8-软件测试原则" class="headerlink" title="1.8 软件测试原则"></a>1.8 软件测试原则</h3><ul><li>尽早并不断进行软件测试<ul><li>早期bug占多数</li><li>早期修复成本低</li></ul></li><li>程序员应该避免检查自己的程序<ul><li>自己不会否认自己的算法</li></ul></li><li>穷举测试不可能<ul><li>输入情况不可能遍历</li><li><strong>不可能证明一个程序的正确性</strong></li></ul></li><li>软件测试有风险</li><li>应当输入合理和不合理的条件</li><li>测试中的群集效应（28效应）：有缺陷的地方往往有更多缺陷</li><li>严格执行测试计划、排除随意性</li><li>应当对每一个测试结果做全面检查</li></ul><h3 id="1-9-软件测试中的误区"><a href="#1-9-软件测试中的误区" class="headerlink" title="1.9 软件测试中的误区"></a>1.9 软件测试中的误区</h3><ol><li>调试和测试是相同的</li><li>软件测试对象仅限于程序</li><li>软件测试仅需要测试人员，不需要开发人员<ul><li>单元测试是开发人员进行的</li></ul></li><li>好的软件质量是通过测试得到的</li><li>把不合格的开发人员安排做测试</li><li>关注于测试的执行而忽略设计</li><li>测试自动化是万能的</li><li>测试是为了证明软件的正确性<ul><li>无法证明正确性</li></ul></li></ol><h2 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2 单元测试"></a>2 单元测试</h2><h3 id="2-1基本概念"><a href="#2-1基本概念" class="headerlink" title="2.1基本概念"></a>2.1基本概念</h3><ul><li>单元测试又称模块测试，是针对软件设计的最小单位-程序模块，进行正确性检验的测试工作</li><li>单元测试特点<ul><li>单元测试主要需要测试者非常清楚代码内部结构，单元测试是软件开发人员的职责，==测试人员一般不参与单元测试==</li><li>既可以静态测试也可以动态测试</li></ul></li><li>单元选择的依据 <ul><li>单元必须是可测试的<ul><li>有明确规约（ground truth）作为测试依据</li></ul></li><li>单元的行为或输出是可观测的</li><li>有一个明确的可定义的边界或接口</li></ul></li><li>单元：能够实现需求规格的最小组件<ul><li>函数、过程、<strong>类（面对对象语言单元测试均是以类为基准）</strong>、页面</li></ul></li><li>单元测试的组织：谁写谁测</li><li>分级 的单元测试–产业<ul><li>每个类对应一个testing-class</li><li>每个method对应一个或多个testing-method</li></ul></li><li>单元测试的主要目的</li><li>合格代码的要求：正确性、清晰性、规范性、一致性、高效性</li></ul><h3 id="2-2单元测试方法"><a href="#2-2单元测试方法" class="headerlink" title="2.2单元测试方法"></a>2.2单元测试方法</h3><ul><li>静态 白盒</li><li>动态 黑盒</li></ul><h3 id="2-4-静态测试"><a href="#2-4-静态测试" class="headerlink" title="2.4 静态测试"></a>2.4 静态测试</h3><ul><li><p>静态测试目标和内容</p><ul><li>详细设计文档</li><li>代码风格和规则</li><li>程序设计和结构的检查</li></ul></li><li><p>方法</p><ul><li><p>同行评审：由软件工作产品创建者的同行们检查该工作产品，识别产品的缺陷，改进产品的不足</p><ul><li>产品：最终产品的组成部分，源代码、设计文档</li><li>同行：项目成员和具有同等开发专业技能的并==熟知工件==的人员。也称为评省人员或评省组成员<ul><li>公司内项目组成员</li><li>公司内其他项目组成员</li><li>公司外的专家</li></ul></li><li>形式<ul><li>走读（最自由）<ul><li>评价软件代码（code review）</li></ul></li><li>小组评省（做决策）<ul><li>参与者主要是公司技术领导或权威及公司外部专家</li><li>==需求规范和概要设计==的评审</li><li>目标：提出意见和建议<ul><li>确认某个制品是否符合要求，能否进入下个阶段</li><li>如何提高制品的质量，如何使之符合要求</li></ul></li></ul></li><li>审查<ul><li>组织：公司内部设计开发测试质量等部门中工作性质相关的员工（QA部门）</li><li>形式：它遵循一个严格的过程，人员经过培训，检查过程有标准</li><li>适用范围与目的<ul><li>代码、详细设计、概要设计 </li><li>形成缺陷列表，缺陷总结</li></ul></li></ul></li></ul></li><li>流程：计划—评省实施（会议形式）—评省情况统计（形成文档）—问题追踪/修改</li></ul></li><li><p>数据流测试（少见，程序员自己进行，不提倡）</p><h4 id="2-4-1-静态测试-详细设计"><a href="#2-4-1-静态测试-详细设计" class="headerlink" title="2.4.1 静态测试-详细设计"></a>2.4.1 静态测试-详细设计</h4></li><li><p>测试依据：概要设计（总体设计）</p></li><li><p>主要形式：审查和走读</p></li><li><p>检查要求：清晰性、完整性、规范性、一致性、正确性、<em>数据</em>、可靠性(catch e)、<em>可追溯性</em>、==接口==</p><ul><li><p>数据：数据都已经被描述</p></li><li><p>可追溯性：每个详细设计单元都可以追溯到概要设计</p></li><li><p>接口</p>  <img src="/posts/46157/2-4-1.jpg" alt="2-4-1" style="zoom:40%;"></li></ul><h4 id="2-4-2-代码静态测试"><a href="#2-4-2-代码静态测试" class="headerlink" title="2.4.2 代码静态测试"></a>2.4.2 代码静态测试</h4></li><li></li><li><p>代码静态测试是开发者自己执行的数据流测试或同行执行的代码走读</p></li><li><p>代码走读测试</p><ul><li><p>代码风格和规则检查</p></li><li><p>程序设计和结构的检查</p><ul><li>模块接口的正确性检查</li><li>输入参数有没有做正确性检查</li><li>调用其他方法接口的正确性</li><li>出错处理是否能挣挣表示错误是什么</li><li>保证表达式、SQL语句的正确性</li><li>检查常量或全局变量的正确性</li><li>数字是否使用表示符</li><li>检查代码是否可以优化、算法效率是否最高</li></ul></li><li><p>业务逻辑的检查</p></li></ul></li></ul></li></ul><h3 id="2-5-黑盒测试"><a href="#2-5-黑盒测试" class="headerlink" title="2.5 黑盒测试"></a>2.5 黑盒测试</h3><h4 id="2-5-1-边界值测试"><a href="#2-5-1-边界值测试" class="headerlink" title="2.5.1 边界值测试"></a>2.5.1 边界值测试</h4><ul><li>针对各种边界情况设计测试用例</li></ul><blockquote><p>最大值</p><p>最小值</p><p>略大于最大值</p><p>略小于最小值</p><p>中间值</p></blockquote><ul><li>变异：<ul><li>主动植入错误，查看测试用例通过的数量</li><li>覆盖率</li></ul></li></ul><h4 id="2-5-2-等价类划分测试"><a href="#2-5-2-等价类划分测试" class="headerlink" title="2.5.2 等价类划分测试"></a>2.5.2 等价类划分测试</h4><ul><li><p>等价类：软件的行为对于一组值来说是相同的，那么这组值就叫做等价类</p><blockquote><p>feajofj</p></blockquote></li><li><p>测试用例选择</p><ol><li><p>尽可能多地覆盖尚未覆盖的有效等价类，重复直到覆盖所有有效等价类</p></li><li><p>尽可能少地覆盖尚未被覆盖的无效等价类，重复直到所有无效等价类都被覆盖为止</p><blockquote><p>有效等价类：</p><p>1、年龄20～39</p><p>2、年龄40～59</p><p>3、年龄：60岁以上20岁以下 </p><p>4、性别：Female（F）</p><p>5、性别：Male（M）</p><p>6、 婚姻：Married</p><p>7、婚姻：Unmarried </p><p>9、抚养人数：0</p><p>10、抚养人数：1～6</p><p>11、抚养人数：6人以上</p><table><thead><tr><th>Order</th><th>Age</th><th>Gender</th><th>Marriage</th><th>抚养人数</th><th>保险费率</th></tr></thead><tbody><tr><td>testcase1（覆盖等价类1 4 7 9）</td><td>25</td><td>Female</td><td>Unmarried</td><td>0</td><td>0.6%</td></tr><tr><td>testcase2（覆盖等价类2 5 6 10）</td><td>50</td><td>Male</td><td>Married</td><td>3</td><td>0.6%</td></tr><tr><td>testcase3（覆盖等价类3 4 6 11）</td><td>70</td><td>Female</td><td>Married</td><td>7</td><td>1%</td></tr><tr><td>testcase4（年龄无效）</td><td>0</td><td>Male</td><td>Unmarried</td><td>4</td><td>null</td></tr><tr><td>testcase5（性别无效）</td><td>35</td><td>Unknown</td><td>Married</td><td>0</td><td>null</td></tr><tr><td>testcase6（婚姻无效）</td><td>28</td><td>Male</td><td>Unknown</td><td>3</td><td>null</td></tr><tr><td>testcase7（抚养人数无效）</td><td>29</td><td>Male</td><td>Married</td><td>-1</td><td>null</td></tr></tbody></table><p>年月日 2019年12月5日</p><p>有效等价类</p><ol><li>年<ol><li>2017年之前</li><li>2017年-2019年</li><li>2019年之后</li></ol></li><li>月<ol><li>1 3 5 7 8 10 12月</li><li>2月</li><li>4 6 9 11月</li></ol></li><li>日<ol><li>1～28</li><li>29</li><li>30</li><li>31</li></ol></li></ol><table><thead><tr><th>Order</th><th>年</th><th>月</th><th>日</th><th>结果</th></tr></thead><tbody><tr><td>testcase1（覆盖等价类1.1 2.1 3.1）</td><td>2016</td><td>1</td><td>1</td><td>超出范围</td></tr><tr><td>testcase2（覆盖等价类1.2 2.2 3.2）</td><td>2018</td><td>2</td><td>29</td><td>不存在这一天</td></tr><tr><td>testcase3（覆盖等价类1.3 2.3 3.3）</td><td>2020</td><td>4</td><td>30</td><td>超出查询范围</td></tr><tr><td>testcase4（覆盖等价类1.2 2.3 3.4）</td><td>2017</td><td>6</td><td>31</td><td>不存在这一天</td></tr><tr><td>testcase5（年份无效）</td><td>0</td><td>6</td><td>1</td><td>输入违法</td></tr><tr><td>testcase6（月份无效）</td><td>2018</td><td>13</td><td>5</td><td>输入违法</td></tr><tr><td>testcase7（日期无效）</td><td>2018</td><td>3</td><td>0</td><td>输入违法</td></tr></tbody></table></blockquote></li></ol></li></ul><h4 id="2-5-3-输入组合法测试（不考）"><a href="#2-5-3-输入组合法测试（不考）" class="headerlink" title="2.5.3 输入组合法测试（不考）"></a>2.5.3 输入组合法测试（不考）</h4><blockquote><p>研究统计表明：很多程序的错误都是由少数几个参数及参数之间的相互作用而导致</p></blockquote><ul><li><p>基本思想：统计学的角度对测试实验进行设计</p></li><li><p>求解配对测试用例的方法：正交表</p><ul><li>选的点都不在一个线上（共同的坐标值超过1个）</li><li>任意两个平面必须有共同点（交点）</li></ul></li><li><p>不同取值个数的处理方法</p><ul><li>补齐</li></ul></li></ul><h4 id="2-5-4-因果图法（必考）"><a href="#2-5-4-因果图法（必考）" class="headerlink" title="2.5.4 因果图法（必考）"></a>2.5.4 因果图法（必考）</h4><ul><li><p>是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，适合于检查程序输入条件的各种组合情况</p><ul><li>首先从程序规格说明书的描述中，找出<strong>因</strong>（输入条件）和<strong>果</strong>（输出结果或程序状态的改变）</li><li>将因果图转换为判定表，判定表每一列设计一个测试用例</li></ul></li><li><p>通常Ci表示原因，Ei表示结果，各节点表示状态，可取值0，1。0表示状态不出现，1表示状态出现</p><ul><li><p>恒等：原因结果同时出现</p><blockquote><p> 若c1是1，则e1也是1；否则e1为0.</p></blockquote></li><li><p>非~：原因出现，结果不出现；原因不出现，结果出现</p><blockquote><p> 若c1是1，则e1是0；否则e1 是1；</p></blockquote></li><li><p>或V：原因只有一个出现，结果就出现；原因都不出现，结果就不出现。</p><blockquote><p>若c1或c2或c3是1，则e1是1；否则e1为0。“或”可有任意个输入</p></blockquote></li><li><p>且/与^：原因都出现，结果才出现。</p><blockquote><p> 若c1和c2都是1，则e1为1；否则e1为0。可有任意个输入</p></blockquote></li></ul></li><li><p>约束条件</p><ul><li><p>从输入考虑</p><ul><li>E exclusive 互斥：表示a，b两原因不会同时成立，最多一个能成立</li><li>I inclusive disjunction ：a、b、c三个原因中至少有一个必须成立</li><li>O（唯一）：a、b当中必须有一个，且仅有一个成立</li><li>R（要求）：当a出现时，b必须也出现，不可能a出现b不出现；</li></ul></li></ul></li><li><p>从输出考虑M（强制或屏蔽）</p><p>  1）结果a是1时，结果b必须是0；</p><p>  2）结果a是0时，结果b的值不定；</p></li></ul><h3 id="2-6-白盒测试"><a href="#2-6-白盒测试" class="headerlink" title="2.6 ==白盒测试=="></a>2.6 ==白盒测试==</h3><blockquote><p>知道源码，根据源码设计测试用例</p><ul><li>黑盒：只能根据输入输出关系设计测试用例 基于数据的分类</li><li>白盒：根据内部结构优化测试用例的设计</li></ul><p>测试的根源：不可能遍历所有的输入情况</p></blockquote><h4 id="2-6-1-覆盖率测试"><a href="#2-6-1-覆盖率测试" class="headerlink" title="2.6.1 覆盖率测试"></a>2.6.1 覆盖率测试</h4><ul><li><p>语句覆盖</p><ul><li>选取足够多的测试数据，使被测试程序中每个语句至少执行一次</li><li>控制流图，标号</li></ul></li><li><p>判定覆盖（分支覆盖）</p><ul><li>选取足够多的测试数据，使被测试程序中不仅每个语句至少执行一次，而且每个判定的每种可能的结果都至少执行一次</li><li>判定：程序分支节点上控制</li></ul></li><li><p>条件覆盖：判定表达式中的每个条件都取到各种可能的结果（T&amp;&amp;F）</p></li><li><p>判定/条件覆盖：</p><ul><li>选取足够多的测试数据，是被测试程序中每个判定表达式中的每个条件都取到各种可能的结果</li></ul><ol><li>A = 2, B = 1, X = 2    X = 2 1假2假3真4真</li><li>A = 1, B = 0, X = 0    X = 0  1真2真3假4假</li></ol></li></ul><p>==（白盒的测试用例一般是自动生成的）==</p><ul><li><p>条件组合覆盖 </p><ul><li>选取足够多的测试数据，使得判定表达式中条件的各种可能组合都至少出现一次</li><li>不需要跨条件组合</li></ul></li><li><p>路径覆盖</p><ul><li>选取足够多的测试数据，使得程序的每条可能路径都至少执行一次</li><li>路径：开始语句到结束语句之间执行的语句序列</li><li>满足条件组合不一定满足路径，满足路径不一定满足条件组合</li></ul></li></ul><h4 id="2-6-2-循环测试"><a href="#2-6-2-循环测试" class="headerlink" title="2.6.2 循环测试"></a>2.6.2 循环测试</h4><ul><li>简单循环测试：<ul><li>整个跳过循环</li><li>只有一次通过循环</li><li>两次通过循环</li><li>最大次数次通过循环</li></ul></li><li>嵌套循环的测试集<ul><li>把外循环设置为最小值并执行内循环的所有可能情况</li><li>把外循环设置为最大值并执行内循环的所有可能情况</li><li>把内循环设置为最小值并执行外循环的所有可能情况</li><li>把内循环设置为最大值并执行外循环的所有可能情况</li></ul></li></ul><h4 id="2-6-4-程序切片测试"><a href="#2-6-4-程序切片测试" class="headerlink" title="2.6.4 程序切片测试"></a>2.6.4 程序切片测试</h4><ul><li>找出可能影响变量的语句的集合（应该包含语句本身）</li></ul><h4 id="2-6-6-基本路径测试"><a href="#2-6-6-基本路径测试" class="headerlink" title="2.6.6 基本路径测试"></a>2.6.6 基本路径测试</h4><ul><li>基本路径：程序中的循环体只执行零次和一次的路径就是基本路径</li><li>测试方法：只覆盖所有基本路径的测试方法</li></ul><h4 id="2-6-7-错误定位"><a href="#2-6-7-错误定位" class="headerlink" title="2.6.7 错误定位"></a>2.6.7 错误定位</h4><ul><li>可疑变量查看</li><li>可疑语句查看<ul><li>函数调用语句</li><li>判定转移/循环语句</li><li>SQL语句</li><li>复杂算法段</li></ul></li><li>插装：在软件特定的位置插入一些语句，用来获取软件的运行信息并反馈给测试者</li></ul><h3 id="2-7-灰盒测试"><a href="#2-7-灰盒测试" class="headerlink" title="2.7 灰盒测试"></a>2.7 灰盒测试</h3><h3 id="2-8-白盒测试与黑盒测试的比较"><a href="#2-8-白盒测试与黑盒测试的比较" class="headerlink" title="2.8 白盒测试与黑盒测试的比较"></a>2.8 白盒测试与黑盒测试的比较</h3><ul><li>白盒测试的优缺点<ul><li>优点<ul><li>揭示隐藏在代码中的错误</li><li>对代码的测试比较彻底</li><li>优化代码</li></ul></li><li>缺点：昂贵</li></ul></li><li>黑盒测试的优缺点<ul><li>优点<ul><li>对于较大的代码单元，效率高</li><li>测试人员不需要了解实现的细节</li><li>测试人员和编码人员相对独立</li><li>从用户的视角进行测试，容易被理解</li><li>有助于暴露任何规格不一致或有歧义的问题</li><li>测试用例可以在规格完成之后马上进行</li></ul></li><li>缺点<ul><li>只有一小部分可能的输入被测试到</li><li>如果没有清晰和简明的规格，测试用例难以设计</li></ul></li></ul></li></ul><h3 id="2-9-类测试"><a href="#2-9-类测试" class="headerlink" title="2.9 类测试"></a>2.9 类测试</h3><h3 id="2-10-单元测试流程"><a href="#2-10-单元测试流程" class="headerlink" title="2.10 单元测试流程"></a>2.10 单元测试流程</h3><h3 id="2-11-单元测试角色和职责"><a href="#2-11-单元测试角色和职责" class="headerlink" title="2.11 单元测试角色和职责"></a>2.11 单元测试角色和职责</h3><h2 id="3-集成测试"><a href="#3-集成测试" class="headerlink" title="3 集成测试"></a>3 集成测试</h2><h3 id="3-1-基本定义"><a href="#3-1-基本定义" class="headerlink" title="3.1 基本定义"></a>3.1 基本定义</h3><ul><li>集成测试又称组装测试，是在单元测试的基础上，将所有模块按照设计要求</li></ul><h4 id="3-1-1-集成测试和单元测试的区别"><a href="#3-1-1-集成测试和单元测试的区别" class="headerlink" title="3.1.1 集成测试和单元测试的区别"></a>3.1.1 集成测试和单元测试的区别</h4><ul><li>对象不同：集成测试组装的对象比单元测试的对象级别药膏</li><li>关注点区别：集成测试关注的是模块间的接口，接口间的数据传递关系，单元组合后是否实现预计的功能</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;北京理工大学 计算机 软件测试 笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="course" scheme="https://www.annewqx.top/categories/code/course/"/>
    
    
      <category term="软件测试" scheme="https://www.annewqx.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux终端的基本命令</title>
    <link href="https://www.annewqx.top/posts/55266/"/>
    <id>https://www.annewqx.top/posts/55266/</id>
    <published>2019-08-26T16:00:00.000Z</published>
    <updated>2022-08-09T01:23:32.169Z</updated>
    
    <content type="html"><![CDATA[<p>Linux终端入门手册</p><a id="more"></a><blockquote><ul><li><p>shell 提示符<br><code>username@hostname:direction$</code></p></li><li><p>shell命令格式<br>  <code>command [option] [arguments]</code></p><blockquote><p>按一次tab补全文件名<br>按两次tab补全命令<br>单击右键粘贴</p></blockquote></li></ul></blockquote><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><p>帮助命令</p><ul><li>man 查看man手册</li><li>info 查看info手册</li><li>—help </li></ul></li><li><p>目录</p><ul><li>根目录 /</li><li>.代表目录自己 ..代表目录的父目录，对于根目录.和..都代表自己</li><li>pwd 查询当前目录路径</li><li>～ 引用当前用户的主目录</li><li>绝对路径<code>/home/hxy/hello.txt</code></li><li>相对路径<code>./hello.txt</code></li></ul></li><li><p>文件与目录相关命令</p><ul><li><p>ls 显示目录内容</p><ul><li><p>ls -la 列出所有文件，包括隐含文件</p></li><li><p>ls -dl 仅查看目录属性</p></li><li><p>ls -R 递归显示子目录的文件</p></li><li><p>ls 文件名/文件夹名 查看文件信息</p></li><li><p>ls -l 详细结果</p><blockquote><p>详细结果：<code>drwx------ 14 student student 409611...</code><br>第一个字符表示文件类型：-普通文件 d目录 l符号链接 b块设备文件 c字符设备文件<br>后面9个字符表示文件的访问权限：</p><ul><li>第一组表示文件属主的权限</li><li>第二组表示同组用户的权限</li><li>第三组表示其他用户的权限<br>各权限如下</li><li>r 读</li><li>w 写</li><li>x 执行，对于目录表示进入</li></ul></blockquote></li></ul></li><li><p>cd 切换工作目录</p><ul><li>cd .. 进入上一级目录</li><li>cd ~ 或 cd 进入用户主目录</li></ul></li><li><p>mv [options] 源文件/文件夹 目标文件/文件夹</p></li><li><p>cp 复制文件或目录</p><ul><li>cp -a 拷贝目录，保留一切链接和属性</li><li>cp -f 覆盖已经存在的目标文件而不提示</li><li>cp -R 递归复制目录下的所有字目录和文件</li></ul></li><li><p>mkdir 创建一个目录</p><ul><li>mkdir -m 对新建目录设置存取权限（chmod）</li><li>mkdir -p 自动补全不存在的上级目录</li></ul></li><li><p>rmdir 删除空目录</p><ul><li>rmdir -p 递归删除目录</li></ul></li><li><p>rm 删除</p><ul><li>rm -r 递归删除（等同rmdir）</li><li>rm -i 删除一个文件</li><li>rm -f 不询问，直接删除</li></ul></li><li><p>file 确定文件类型</p></li><li><p>cat 链接或显示文件内容</p><ul><li>带行数 cat -n 等价于nl</li></ul></li><li><p>tac  从最后一行开始显示文件内容</p></li><li><p>more/less</p></li><li><p>head/tail</p></li><li><p>touch 新建文件</p></li><li><p>nl 按输出行号的方式显示文件</p></li><li><p>ln 为一个文件在另一个位置建立符号链接</p><ul><li><code>ln -s 目标 目录</code> 软连接，<a href>一个指向源文件名的连接文件</a>，类似快捷方式</li><li><code>ln 目标 目录</code> 硬连接 类似指针</li></ul></li></ul></li><li><p>字符</p><ul><li>grep 定位字符信息</li><li>wc 统计字符信息</li><li>sort 排序字符信息</li></ul></li><li><p>打包/压缩文件</p><ul><li>打包：把所有文件合并在一个tar文件里</li><li>压缩 使用gzip(tar.gz/tgz)或biz2(tar.bz2)压缩<br><em>.gz比较快，压缩率不如bz2</em></li><li>-c 创建tar文件 -f将文件打包生成到一个文件</li><li><code>tar -cf new.tar ./home/se</code></li><li><code>tar -xf new.tar</code> 解包</li><li>对于zip格式：tar cvzf 打包 tar xvzf解包</li><li>对于biz2格式： tar cvjf 打包 tar xvjf解包</li></ul></li></ul><h2 id="用户管理及网络设置"><a href="#用户管理及网络设置" class="headerlink" title="用户管理及网络设置"></a>用户管理及网络设置</h2><h2 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h2><p><strong>gcc支持的源码格式：</strong>.c .cpp .m（Objective-C源程序） .i（预处理后的c文件） .ii（预处理后的c++文件） .s/.S（汇编语言源程序） .h（预处理器文件） .o（目标文件）</p><h3 id="gcc的基本使用"><a href="#gcc的基本使用" class="headerlink" title="gcc的基本使用"></a>gcc的基本使用</h3><h4 id="单个源码"><a href="#单个源码" class="headerlink" title="单个源码"></a>单个源码</h4><ul><li><p><code>gcc hello.c -o hello</code> 把hello.c编译成一个可执行程序hello（一次性完成四步）</p></li><li><p><code>gcc hello.c</code>不指定输出名，生成一个a.out</p></li><li><p>源文件到可执行文件的编译过程：</p><ul><li><p>预处理 <code>gcc -E hello.c -o hello.i</code></p></li><li><p>编译：将源代码编译成汇编代码 <code>gcc -S hello.i -o hello.s</code></p></li><li><p>汇编：将汇编代码汇编成目标文件 <code>gcc -c hello.s -o hello.o</code></p></li><li><p>链接：将目标代码和所需要库链成一个完整的应用程序 <code>gcc hello.o -o hello</code></p><blockquote><p>gcc的结果输出于后缀名，只和输出参数有关</p></blockquote></li></ul></li></ul><h4 id="多个源码"><a href="#多个源码" class="headerlink" title="多个源码"></a>多个源码</h4><ul><li>一般先将源代码编译成目标代码，最后一次链接成可执行程序</li><li>对于有头文件在多个目录，需要在编译时多次使用-I参数加入头文件所在目录<br>例如a.c需要用到/usr，当前目录/home<br><code>gcc -I -I/usr -I/home -c a.c</code></li><li>对于多个源文件组成的程序。可以把多个文件在一句里编译，但建议不这样做，建议使用makefile脚本来调用gcc构造，见下一节<br><code>gcc a.c b.c d.c -o test</code></li></ul><h4 id="gcc的选项"><a href="#gcc的选项" class="headerlink" title="gcc的选项"></a>gcc的选项</h4><ul><li>宏macro<ul><li>-Dmacro <code>gcc test.c -DPRINTF=printf -o test</code></li><li>-Dmacro=defn <code>gcc test.c -DNUM=10 -o test</code></li></ul></li><li><code>gcc -Wall a.c -o a</code>打开所有编译警告</li><li><code>gcc -Wall -Werror a.c -o a</code>将警告视作错误，出现任何警告就放弃编译</li><li><code>gcc -w</code>禁止输出警告</li></ul><h4 id="gcc使用的第三方库"><a href="#gcc使用的第三方库" class="headerlink" title="gcc使用的第三方库"></a>gcc使用的第三方库</h4><h3 id="gcc命令的参数详解"><a href="#gcc命令的参数详解" class="headerlink" title="gcc命令的参数详解"></a><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html" rel="external nofollow noreferrer">gcc命令的参数详解</a></h3><ul><li><p>-x：设定文件名所使用的语言，使文件后缀名无效</p><p><code>gcc -x c hello.pig</code></p></li><li><p>-c：只进行预处理,编译和汇编，即生成.o的obj文件</p><p><code>gcc -c hello.c</code></p></li><li><p>-S：只进行预处理和编译，即把文件编译为.s汇编代码</p><p><code>gcc -S hello.c</code></p></li><li><p>-E：只激活预处理。这个命令不会不生成文件, 我们需要把它重定向到一个输出文件里面</p><p><code>gcc -E hello.c &gt; pianoapan.txt</code></p></li><li><p>-o：生成可执行文件</p><p><code>gcc -o hello hello.c</code></p></li><li><p>-fno-asm</p></li><li><p>-fno-strict-prototype</p></li><li><p>-fthis-is-varialble</p></li><li><p>-fcond-mismatch</p></li><li><p>-funsigned-char 、-fno-signed-char、-fsigned-char 、-fno-unsigned-char</p></li><li><p>-include file</p></li><li><p>-imacros file</p></li><li><p>b</p></li></ul><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><h4 id="make的调用"><a href="#make的调用" class="headerlink" title="make的调用"></a>make的调用</h4><ul><li><p>直接执行make，自动查找当前目录下名为makefile的文件，并自动从第一个target开始执行</p></li><li><p>如果makefile脚本名称不是缺省名称，使用-f参数来表示<br><code>make -f hello.mk</code></p></li><li><p>如果需要make查找其他目录下的makefile，使用-C参数<br><code>make -C /home</code></p></li><li><p>在makefile中以target表示不同的编译部分，可以在命令行直接写target名称，用于一个活多个target的编译<br><code>make install</code><br><code>make target1 target2</code></p></li></ul><blockquote><h4 id="makefile的格式"><a href="#makefile的格式" class="headerlink" title="makefile的格式"></a>makefile的格式</h4><p>makefile由由一组依赖关系和规则构成</p><p>每个依赖关系由一个目标（即将要创建的文件）和它依赖的源文件组成</p><p>规则描述了怎样从源文件创建出目标文件</p><p><strong>规则也称为target</strong></p><ul><li><p>规则 <code>目标名称：[依赖对象]&lt;tab&gt;命令列表</code></p><ul><li><p>目标名称是需要创建的结果的名称</p></li><li><p>依赖对象表示创建这个目标之前必须预先创建的其他目标，可以是另一个规则的名称，也可以是基本文件的名称</p></li><li><p>命令列表表示为了创建这个目标，需要执行那些shell命令可以是一行或多行shell命令，每一行命令行的行首必须是一个tab</p></li><li><p>行首必须是tab不能是空格，否则makefile出错</p></li><li><p>如果命令行过长，可用\分行，新行无需tab打头</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 要想生成hello.o目标，必须先有hello.c，然后调用gcc编译生成hello.o，依赖对象hello.c可以省略</span><br><span class="hljs-section">hello.o: hello.c</span><br> gcc -c hello.c -o hello.o<br><span class="hljs-comment"># 要想生成执行程序hello，必须先执行规则hello.o，然后调用命令行gcc连接生成hello</span><br><span class="hljs-section">hello: hello.o</span><br> gcc hello.o -o hello<br></code></pre></td></tr></table></figure><p><em>makefile里规则的前后顺序不太重要，实际调用顺序取决目标之间的依赖关系，因此make采用逆推的方式来判断和执行目标</em></p></li></ul></li><li><p>伪目标phony target：一般的目标最终是为了生成一个文件，但有一些目标可以不生成结果文件，只是为了调用命令或依赖对象，具体动作需要需要开发者自行编写</p><ul><li>all 编译所有目标</li><li>clean 清楚项目生成的中间文件和最终生成文件</li><li>install 项目如何安装</li><li>uninstall 项目如何卸载</li></ul></li></ul></blockquote><h4 id="makefile基本结构"><a href="#makefile基本结构" class="headerlink" title="makefile基本结构"></a>makefile基本结构</h4><p>makefile一般包含：</p><ul><li><p>需要由make工具创建的项目，通常是目标文件和可执行文件，它们一般被称为target</p></li><li><p>要创建的目标依赖于哪些文件</p></li><li><p>创建每个目标时需要运行的的命令，命令之间用tab打头</p></li><li><p>通常包含的固定伪目标</p></li><li><p>#表示注释行</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#Makefile for exp2</span><br><span class="hljs-section">main: main.o add.o del.o modify.o</span><br>  gcc -o main main.o add.o del.o modify.o<br><span class="hljs-section">main.o: main.c</span><br>  gcc -c main.c<br><span class="hljs-section">add.o: add.c</span><br>  gcc -c add.c<br><span class="hljs-section">del.o: del.c</span><br>  gcc -c del.c<br><span class="hljs-section">modify.o: modify.c</span><br>  gcc -c modify.c<br></code></pre></td></tr></table></figure></li></ul><h4 id="makefile扩展用法"><a href="#makefile扩展用法" class="headerlink" title="makefile扩展用法"></a>makefile扩展用法</h4><ul><li><p>变量（宏）：利用简单的变量定义冗长的编译选项，引用时需要添加$符号</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># Define macros for name of compiler </span><br>CC = gcc<br><span class="hljs-comment"># Define a macro for the CC flags </span><br>CCFLAGS = -D_DEBUG -g -m486<br><span class="hljs-comment"># A rule for building a object file </span><br><span class="hljs-section">test.o: test.c test.h</span><br>    <span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$(CCFLAGS)</span> test.c<br></code></pre></td></tr></table></figure><blockquote><p>makefile变量定义，=两边一定要有空格</p><p>makefile的变量定义要独立在规则之外，一般在最前</p></blockquote></li><li><p>GNU make的预定义变量</p><ul><li><p>$&lt; 第一个依赖文件的名称</p></li><li><p>$@ 目标的完整名称</p></li><li><p>$^ 所有的依赖文件，以空格分开，不包含重复的</p></li><li><p>AR 归档维护程序的名称，默认值ar ARFLAGS 归档维护程序的选项</p></li><li><p>AS 汇编程序的名称，默认值as ASGLAGS 汇编程序的选项</p></li><li><p>CC c编译器的名称，默认值cc CCFLAGS c编译器的选项 </p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#makefile2 for exp</span><br><span class="hljs-section">main: main.o add.o del.o modify.o</span><br>  gcc -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><span class="hljs-section">main.o: main.c</span><br>  gcc -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">add.o: add.c</span><br>  gcc -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">del.o: del.c</span><br>  gcc -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">modify.o: modify.c</span><br>  gcc -c <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>自动化变量使用</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#makefile2 for exp</span><br><span class="hljs-section">main: main.o add.o del.o modify.o</span><br>    gcc -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><span class="hljs-section">.c.0:</span><br>    gcc -c <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h4><p>GNU make的一些内置的隐含规则定义了如何从不同依赖文件建立特定类型的目标文件</p><ul><li><p>后缀规则suffix rule<br>将一个具有某个后缀的文件转换为具有另一后缀的文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">.c.0:</span><br>    <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CCFLAGS)</span> -c -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li><li><p>模式规则pattern rules<br>在目标的前面多一个%，同时可用来定义目标和依赖文件之间的关系</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">%.o:%.c:</span><br>    <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CCFLAGS)</span> -c -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="makefile目标编译"><a href="#makefile目标编译" class="headerlink" title="makefile目标编译"></a>makefile目标编译</h4><p>如果不指定目标，make会默认第一个target<br>规范的makefile文件有以下常见的几个目标：</p><ul><li><p>make all 编译所有目标</p></li><li><p>make clean 在编译结束后删除.o文件</p></li><li><p>make install 编译结束后将最终的可执行文件安装到系统的某一个位置</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#makefile for example</span><br><span class="hljs-section">example: example.o add.o modify.o delete.o</span><br>    <span class="hljs-variable">$(CC)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><span class="hljs-section">.c.o:</span><br>    <span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$&lt;</span><br><span class="hljs-section">all: example</span><br><span class="hljs-section">clean: all</span><br>    rm -f *.o<br><span class="hljs-section">install: clean</span><br>    cp example /usr/local/bin<br></code></pre></td></tr></table></figure></li></ul><h2 id="GDB调试器和调试方法"><a href="#GDB调试器和调试方法" class="headerlink" title="GDB调试器和调试方法"></a>GDB调试器和调试方法</h2><h4 id="gdb的使用"><a href="#gdb的使用" class="headerlink" title="gdb的使用"></a>gdb的使用</h4><p>为使程序能被调试，需要gcc编译时用-g选项为程序编译时添加调试信息<br><code>gcc -g -o helloworld helloworld.c</code><br>然后在命令行键入gdb并回车就可以运行了</p><h4 id="gdb命令"><a href="#gdb命令" class="headerlink" title="gdb命令"></a>gdb命令</h4><ul><li><p>file 装入想要调试的可执行文件。</p></li><li><p>kill 终止正在调试的程序。</p></li><li><p>list 列出产生执行文件的源代码的一部分。</p></li><li><p>next 执行一行源代码但不进入函数内部。</p></li><li><p>step 执行一行源代码而且进入函数内部。</p></li><li><p>run 执行当前被调试的程序。</p></li><li><p>c 继续运行程序。</p></li><li><p>quit 终止gdb。</p></li><li><p>watch 使你能监视一个变量的值而不管它何时被改变。</p></li><li><p>backtrace 栈跟踪，查出代码被谁调用。</p></li><li><p>print 查看变量的值。</p></li><li><p>make 使你能不退出gdb就可以重新产生可执行文件。</p></li><li><p>shell  使你能不离开gdb就执行UNIX shell命令。</p></li><li><p>whatis 显示变量或函数类型。</p></li><li><p>break 在代码里设断点，这将使程序执行到这里时被挂起。</p><ul><li>break linenum 根据行号设置断点</li><li>break funcname 根据函数名设置断电</li><li>break filename:linenum/funcname 执行非当前源文件的某行或某函数的时候停止执行</li><li>break linenum/funcname if expr 根据条件停止程序执行</li></ul></li><li><p>info break 显示当前断点清单，包括到达断点处的次数等。</p></li><li><p>info files 显示被调试文件的详细信息。</p></li><li><p>info func 显示所有的函数名称。</p></li><li><p>info local 显示当函数中的局部变量信息。</p></li><li><p>info prog 显示被调试程序的执行状态。</p></li><li><p>delete [n] 删除第n个断点。</p></li><li><p>disable[n] 关闭第n个断点。</p></li><li><p>enable[n] 开启第n个断点。</p></li><li><p>ptype 显示结构定义。</p></li><li><p>set variable 设置变量的值。</p></li><li><p>call name(args)  调用并执行名为name，参数为args的函数。</p></li><li><p>Finish 终止当前函数并输出返回值。</p></li><li><p>return value 停止当前函数并返回value给调用者。</p></li></ul><h1 id="GTK"><a href="#GTK" class="headerlink" title="GTK"></a>GTK</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux终端入门手册&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="linux" scheme="https://www.annewqx.top/tags/linux/"/>
    
      <category term="终端命令" scheme="https://www.annewqx.top/tags/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>GitHub简明教程</title>
    <link href="https://www.annewqx.top/posts/48683/"/>
    <id>https://www.annewqx.top/posts/48683/</id>
    <published>2019-04-11T18:55:05.000Z</published>
    <updated>2022-07-20T06:52:19.025Z</updated>
    
    <content type="html"><![CDATA[<p>正是Github，让社会化编程成为现实。</p><a id="more"></a><h2 id="什么是-Github"><a href="#什么是-Github" class="headerlink" title="什么是 Github?"></a>什么是 Github?</h2><p>github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。<br>Github 由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的版本托管服务。<br>目前看来，GitHub这场冒险已经胜出。根据来自维基百科关于GitHub的描述，我们可以形象地看出GitHub的增长速度：<br><img src="/posts/48683/github-repos.png" alt="github-repos"><br>今天，GitHub已是：</p><ul><li>一个拥有143万开发者的社区。其中不乏Linux发明者 <a href="https://github.com/torvalds" rel="external nofollow noreferrer">Torvalds</a> 这样的顶级黑客，以及Rails创始人 <a href="https://github.com/dhh" rel="external nofollow noreferrer">DHH</a> 这样的年轻极客。</li><li>这个星球上最流行的开源托管服务。目前已托管431万git项目，不仅越来越多知名开源项目迁入GitHub，比如Ruby on Rails、jQuery、Ruby、Erlang/OTP；近三年流行的开源库往往在GitHub首发，例如： <a href="https://github.com/twitter/bootstrap" rel="external nofollow noreferrer">BootStrap</a> 、 <a href="https://github.com/joyent/node" rel="external nofollow noreferrer">Node.js</a> 、 <a href="https://github.com/jashkenas/coffee-script" rel="external nofollow noreferrer">CoffeScript</a> 等。</li><li>alexa全球排名414的网站。</li></ul><h2 id="注册账户以及创建仓库"><a href="#注册账户以及创建仓库" class="headerlink" title="注册账户以及创建仓库"></a>注册账户以及创建仓库</h2><p>要想使用github第一步当然是注册github账号了， github官网地址： <a href="https://github.com/" rel="external nofollow noreferrer">https://github.com/</a> 。 之后就可以创建仓库了（免费用户只能建公共仓库），Create a New Repository，填好名称后Create，之后会出现一些仓库的配置信息，这也是一个git的简单教程。</p><h2 id="Github-安装"><a href="#Github-安装" class="headerlink" title="Github 安装"></a>Github 安装</h2><ul><li><p><a href="http://code.google.com/p/git-osx-installer/downloads/list?can=3" rel="external nofollow noreferrer">下载 git OSX 版</a> </p></li><li><p><a href="http://msysgit.github.io/" rel="external nofollow noreferrer">下载 git Windows 版</a> </p></li><li><p><a href="http://book.git-scm.com/2_installing_git.html" rel="external nofollow noreferrer">下载 git Linux 版</a> </p><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p>首先在本地创建ssh key；<br><code>$ ssh-keygen -t rsa -C “your_email@youremail.com”</code><br>后面的<a href="mailto:your_email@youremail.com" rel="external nofollow noreferrer">your_email@youremail.com</a>改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。<br>回到github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便填，粘贴在你电脑上生成的key。<br><img src="/posts/48683/github-account.jpg" alt="github-account"><br>为了验证是否成功，在git bash下输入：<br><code>$ ssh -T git@github.com</code></p></li></ul><p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">$ git config —global user.name “your name”<br>$ git config —global user.email “your_email@youremail.com”<br></code></pre></td></tr></table></figure><p>进入要上传的仓库，右键git bash，添加远程地址：<br><code>$ git remote add origin git@github.com:yourName/yourRepo.git</code><br>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。<br>创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。</p><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：<br><code>git clone /path/to/repository</code><br>如果是远端服务器上的仓库，你的命令会是这个样子：<br><code>git clone username@host:/path/to/repository</code></p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。<br>你可以提出更改（把它们添加到暂存区），使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git add &lt;filename&gt;<br>git add *<br></code></pre></td></tr></table></figure><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：<br><code>git commit -m “代码提交信息”</code><br>现在，你的改动已经提交到了 <em>HEAD*，但是还没到你的远端仓库。<br><img src="/posts/48683/trees-3607800.png" alt="trees-3607800">推送改动你的改动现在已经在本地仓库的 *HEAD</em> 中了。执行如下命令以将这些改动提交到远端仓库：<br><code>git push origin master</code><br>可以把 /master/ 换成你想要推送的任何分支。 </p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br><code>git remote add origin &lt;server&gt;</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，/master/ 是”默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br><img src="/posts/48683/branches-3607777.png" alt="branches-3607777"><br>创建一个叫做”feature_x”的分支，并切换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉：<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是 /不为他人所见的/：<br><code>git push origin &lt;branch&gt;</code></p><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在你的工作目录中 /获取（fetch）/ 并 /合并（merge）/ 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：<br><code>git merge &lt;branch&gt;</code><br>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现/冲突（conflicts）/。 这时候就需要你修改这些文件来手动合并这些/冲突（conflicts）/。改完之后，你需要执行如下命令以将它们标记为合并成功：<br><code>git add &lt;filename&gt;</code><br>在合并改动之前，你可以使用如下命令预览差异：<br><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 /1.0.0/ 的标签：<br><code>git tag 1.0.0 1b2e1d63ff</code><br>/1b2e1d63ff/ 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：<br><code>git log</code><br>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：<br><code>git checkout — &lt;filename&gt;</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。<br>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<br><code>git fetch origin</code><br><code>git reset —hard origin/master</code></p><h2 id="实用小贴士"><a href="#实用小贴士" class="headerlink" title="实用小贴士"></a>实用小贴士</h2><p>内建的图形化 git：<br><code>gitk</code><br>彩色的 git 输出：<br><code>git config color.ui true</code><br>显示历史记录时，每个提交的信息只显示一行：<br><code>git config format.pretty oneline</code><br>交互式添加文件到暂存区：<br><code>git add -i</code></p><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><h3 id="解决-GitHub-提交次数过多-git-文件过大的问题"><a href="#解决-GitHub-提交次数过多-git-文件过大的问题" class="headerlink" title="解决 GitHub 提交次数过多 .git 文件过大的问题"></a>解决 GitHub 提交次数过多 .git 文件过大的问题</h3><ol><li>运行 <code>gc</code> ，生成 <code>pack</code> 文件（后面的 <code>--prune=now</code> 表示对之前的所有提交做修剪，有的时候仅仅 <code>gc</code> 一下<code>.git</code> 文件就会小很多）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git gc --prune=now<br></code></pre></td></tr></table></figure><ol start="2"><li>找出最大的三个文件（看自己需要）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -3<br><span class="hljs-comment"># 示例输出：</span><br><span class="hljs-comment">#1debc758cf31a649c2fc5b0c59ea1b7f01416636 blob   4925660 3655422 14351</span><br><span class="hljs-comment">#c43a8da9476f97e84b52e0b34034f8c2d93b4d90 blob   154188651 152549294 12546842</span><br><span class="hljs-comment">#2272096493d061489349e0a312df00dcd0ec19a2 blob   155414465 153754005 165096136</span><br></code></pre></td></tr></table></figure><p>\3. 查看那些大文件究竟是谁（<code>c43a8da</code> 是上面大文件的<code>hash</code>码）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git rev-list --objects --all | grep c43a8da<br><span class="hljs-comment"># c43a8da9476f97e84b52e0b34034f8c2d93b4d90 data/bigfile</span><br></code></pre></td></tr></table></figure><p>4.移除对该文件的引用（也就是 <code>data/bigfile</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git filter-branch --force --index-filter <span class="hljs-string">"git rm --cached --ignore-unmatch 'data/bigfile'"</span>  --prune-empty --tag-name-filter cat -- --all<br></code></pre></td></tr></table></figure><p>5.进行 <code>repack</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-keyword">for</span>-each-ref --format=<span class="hljs-string">'delete %(refname)'</span> refs/original | git update-ref --stdin<br>$ git reflog expire --expire=now --all<br>$ git gc --prune=now<br></code></pre></td></tr></table></figure><p>6.查看 <code>pack</code> 的空间使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git count-objects -v<br></code></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><h2 id="链接与资源"><a href="#链接与资源" class="headerlink" title="链接与资源"></a>链接与资源</h2><p><strong>图形化客户端</strong></p><ul><li><a href="http://gitx.laullon.com/" rel="external nofollow noreferrer">GitX (L) (OSX, 开源软件)</a> </li><li><a href="http://www.git-tower.com/" rel="external nofollow noreferrer">Tower (OSX)</a> </li><li><a href="http://www.sourcetreeapp.com/" rel="external nofollow noreferrer">Source Tree (OSX, 免费)</a> </li><li><a href="http://mac.github.com/" rel="external nofollow noreferrer">GitHub for Mac (OSX, 免费)</a> </li><li><a href="https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12" rel="external nofollow noreferrer">GitBox (OSX, App Store)</a> </li></ul><p><strong>指南和手册</strong></p><ul><li><a href="http://book.git-scm.com/" rel="external nofollow noreferrer">Git 社区参考书</a> </li><li><a href="http://progit.org/book/" rel="external nofollow noreferrer">专业 Git</a> </li><li><a href="http://think-like-a-git.net/" rel="external nofollow noreferrer">像 git 那样思考</a> </li><li><a href="http://help.github.com/" rel="external nofollow noreferrer">GitHub 帮助</a> </li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" rel="external nofollow noreferrer">图解 Git</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正是Github，让社会化编程成为现实。&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.annewqx.top/categories/code/"/>
    
      <category term="note" scheme="https://www.annewqx.top/categories/code/note/"/>
    
    
      <category term="git" scheme="https://www.annewqx.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Chris</title>
    <link href="https://www.annewqx.top/posts/4085/"/>
    <id>https://www.annewqx.top/posts/4085/</id>
    <published>2018-07-01T17:00:00.000Z</published>
    <updated>2022-11-10T04:40:08.818Z</updated>
    
    <content type="html"><![CDATA[<p> 2017</p><a id="more"></a><h2 id="lt-1-gt"><a href="#lt-1-gt" class="headerlink" title="&lt;1&gt;"></a>&lt;1&gt;</h2><p>Chris是个美粉，那时候的我在心里这么称呼他，过了几年，时代给了他们名字，“润学家”，不过细微差别之处仍需要强调，润学家更在乎“润”；美粉更向往“美”。</p><p>Chris从入学时便毫不掩饰自己的志向，他们刷绩点，选容易的课，背GRE，为学校留学经验分享公众号的每一篇文章贡献“x位朋友已读”。但是Chris也知道对自己更重要的是什么——选修持续三学期的Android开发系列课程，是他对自己完美绩点的一点小叛逆。开设该系列课程的讲师给分喜怒无常，但这是我们那样院校那样专业里开设的极稀有贴近行业的课程了。每个学期每个人都要独立完成一个应用，Java、安卓、跨平台。我选那个课倒没有什么特别原因，我绩点就烂，抢不到漂亮小姐姐的密码学，不如学点好玩的。</p><p>我已记不清最早是何时以什么机缘认识的Chris，但肯定远远早于Android系列课程的开启。细数起来我们除了一起上院内的公共课几无交际，从未同班过，不过大学松散的班级模式，同堂相比同班倒还更容易让人产生联结。大一时我还没有成为一个自暴自弃的学沫，至少那时还在被他push着心存幻想地刷线代复习题——虽然就那年的线代考试而言，我的hardworking的确paid off（不过于我们而言，hardworking paid off并不是最难的，能否把自己投入到hardworking中，才是最大的挑战，越成长，身周管束的力量愈弱，这个挑战便愈大）。</p><p>我们的谈天说地大致都快乐，不过更多关于兴趣爱好，似乎从未涉及到成长经历之类的更私人回忆的领域。在大部分文化产品上我们的喜好大多相似。</p><p>直到他问我说，你平时听EDM吗。我咯噔了一下，打了个磕巴。</p><p>从那以后，我把电音加进了歌单。我是跟风狗，我认了。</p><p>我对Chris，的确是单方面的crush。我从没有特定的type，但是很少有人会对有着猫脸的臭脸少年没有好奇心吧。早八迟到从后门溜进教室，看见前排他的背影就挺高兴的。</p><p>后来我给他发了一封邮件表白，没有收到回应，我们只是跌落回了不再聊天的平静，平静地过完了接下来的三年，点头之交，偶有联系。</p><p>学校在大二专业分流时，把当时的年级前三十名组成了尖子班，有我们班的第一名（第一哥），有勇哥，有Chris。而我当时只是庆幸好险至少进了自己选的专业，以最后几名之姿。</p><p>我内心唯一的小胜利是后来Android课的作品成绩得了A，略胜他、他们一筹——我还记得那个作品，一个生活管理软件，不眠不休五日，三天写代码两天写文档，吹嘘自己使用了MVVC、Material Design，实现了当时自己看起来效果很dior现在看是官方UI文档入门使用的“双层Recycle ListView绑定”，使用SQLite作为数据库，我图方便（时间来不及学安卓的数据存储了），用户上传的图片全部转base64存数据库，再加上自己一直糟糕透顶的数据库能力，App稍一使用就全是乱码。期间我还去咨询Chris，App总是闪退怎么办，他说你是不是从来不捕获异常。这座屎山，在我毕业的那年，有学弟联系我是否可以fork我的项目二次开发，作为他安卓课的作业，我欣然同意，他再无下文。想必要么是代码clone后跑不起来，要么是任何苦逼学生面对这座屎山都回天乏术。</p><blockquote><p>关于clone的Android项目很难跑起来的问题，昨天晚上和cygg聊天，他还在说，Java真是垃圾语言，Maven真是垃圾包管理。npm和pip被衬托得无比先进。</p></blockquote><p>系列课程最后一学期做跨平台应用，不再要求独立开发，而是小组作业。那时Chris们已经能熟练使用Vue完成前端，移动端大家琢磨着用Flutter，我学了两星期的Dart一脑子浆糊后黯然离场，欣然接受了让他们用Swift、Kotlin完成作业，被带飞的命运。连最后的成品是什么样都未曾过目，只隐隐约约听说是导师评分网的copycat。</p><p>2019年暑假，Chris参加了UCB的暑校，我去了UTA——中部城市，更便宜。但我给自己规划了一个悠长旅行，一个月西海岸，一个月暑校，一个月东海岸，六张机票，三十六小时飞行。后来很久我妈才说：“当年真不可思议，让你一个人去那么多地方。”我也觉得很不可思议，更多的是幸运，毕竟那是黄金的2019，而那年至少我已成年（虽然还没到饮酒年龄）。住青旅，每天强迫自己一定要出去走，在LA时住在星光大道附近，用一天时间从星光大道出发，徒步上了Hollywood Mountain又徒步回到星光大道，在独立日被青旅的姐姐们带到旁边小山上看烟花，山上在露天播放三级片。第二天一个姐姐出发去巴西继续旅行，另一个被LA地震吓得要命跑回了芝加哥的母亲家——她是一个YouTuber，视频主题是某种禅修。但这些异国他乡的穷游细节是另外的故事。</p><p>每个城市我的首要目的地自然是各大院校—-完成高中时未尽的愿望。UCLA旁边是个墓地；Standford在Palo Alto也不在，一个地方有三种交通系统：自己内部的，Palo Alto的，旧金山的；谷歌园区的四色轮子自行车基本都是坏的。我的孤独旅程终于能在UCB时稍作喘息：中国学生们在每个暑期都通过暑校项目挤爆美国高校校园。</p><p>那天午后，坐在UCB钟楼下的草坪，阳光肆无忌惮落在我们四周——和在北理时坐在操场感受到的阳光并没有什么不同。沉静良久后，Chris说：“真的很迷茫啊。”</p><p>我们那个人生阶段，就是很迷茫，迷茫才是常态。在那个时期和任何一个遇到的故知，新友交谈，谈话最终很难不落入“前途一片灰暗”的窠臼，不过与其说是灰暗，更多的还是大雾弥漫，选择似乎很多，但是落在个人头上，到底去哪儿呢，青年迷蒙的瞳孔里倒映出的路只有那一条，评价标准只有那一个。校园环境是有毒的。</p><p>过了一会儿Chris说，要不然去我们宿舍楼看看吧，我说好啊。Chris那批暑校生宿舍在校外的现代化宿舍楼，那天上午去找也在UCB暑校的高中同学玩，她们住在校内的学生宿舍——津巴布韦馆，平日是津巴布韦国际生的宿舍，暑期被中国学生们占领，要轮班洗盘子做饭拖地。</p><p>UCB校内校外的界限其实很难界定，整个Berkeley都穿插着UCB，就跟整个吉林都是吉林大学校园那个段子一样。我们经过教学楼，经过几排警车，经过一个block又一个block，经过一家音乐唱片店，双层，很大，昏暗的光线下，TS那年的新专lover明艳的粉和一张惨绿的Bach面面相觑，Chris摸着某张电音专辑时脸上仿佛有光；有旧书店，没进去；更有正大光明藏在每个街角的大麻店，在顾客的每一次出入时试图用气味大声张扬并带坏整条街—-我在三藩城市漫步时就已习惯，到处有homeless，Psyco，drug addict，这不是玩笑。</p><p>Chris说，校园那个片区警车多，富人区，治安好，这边治安不行。</p><p>晚饭Chris带我在UCB的食堂消费—-并没有什么熟物，我眼睁睁看着他拿了满满一盆可以叫出名字又似乎叫不出任何名字的绿色植物，一边腹诽“不愧是Chris，活该他适合阿美”，一边随便拿了一点显然是直接从罐头运送到餐桌的玉米粒。Chris吃了五分钟便放下了筷子。我看着他的一盆子生菜，他说，“蛮苦的，”，那一刻我才深入理解了为什么中午时高中同学们说什么也要带我到校外的中餐馆吃宫保鸡丁蛋炒饭，同时撤回了五分钟前对Chris的误读。</p><p>我说：“吃得苦中苦。”</p><p>那次“自由行”的最后一个城市是芝加哥，去了西北大学，五大湖岸边滩涂上大块大块的石头每块上都有涂鸦，其中一块很是突出。“世界再大，也要回家，2019”。紫色原来代表思念。</p><p>耳机里在播放The Archer——TS那年新专的第N波主打，我在异国他乡仍然习惯性打开了云音乐，自然是全灰的，论坛里正在发起活动“#我和云村的故事”。发了一条动态：</p><blockquote><p>……</p><p>在豌豆荚下载TS、Avril、Tokio Hotel导进ITunes是童年</p><p>泡在云村刷蛋堡刷热狗的每个MV是青春期</p><p>在AppleMusic循环Chainsmoker循环Marshmellow循环吉屋出租是逐渐失去主见的成年</p><p>……</p></blockquote><p><img src="https://s2.loli.net/2022/11/09/emp3C5UrBWRXZf6.jpg" alt></p><p>成年后能遇到能对自己施加正向影响和改变的人，还是值得感谢。</p><p>毕业后的一天，在朋友圈看到第一哥给Chris的动态留言：你这个gay。那一刻，“后知后觉”这个词在我心里真正拥有了具象化的含义，怎么会没有察觉呢，他和周围的男生都保持距离，他细密的心思，他的小姐妹们。他那时的尴尬比此刻的我更甚吧。算了，年轻，过去的就当做没发生。</p><h3 id="后"><a href="#后" class="headerlink" title="后"></a>后</h3><p>大四时，Chris和他的同类们遇到了10043禁令，赴美的求学路虽不能说堵死了，因为仍认识有实体清单中院校毕业的同学排除万难顺利过上了圣诞节和spring break，只是留学本就道阻且长，此刻更需要从长计议。Chris早早去了杭州大厂的重点业务部门实习并留任，有的人，他们总能把自己的价值放到标尺里最上端的位置。他们都有美好的未来。</p><p>年初《人物》帮字节写了一篇软文（我时常觉得互联网大厂从业者在互联网上的声量相比他们的体量，似乎有些被过度放大了，但是，毕竟，我们汲取的信息来自于他们搭建的基础设施，让他们说吧）—— 字节的年轻人们各自的爱好和个性。其中有一位喜欢自己做电音的故事，突然把我带回了记忆的某个片段：某个学期结束，Chris发了一首他制作的EDM链接给我，很粗糙，不成熟，但是属于他个人。那种感觉很奇妙，我以为我们都是内容的消费者，可身边突然出现了一个创造者，一个creator，一个特别的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 2017&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://www.annewqx.top/categories/life/"/>
    
      <category term="dude" scheme="https://www.annewqx.top/categories/life/dude/"/>
    
    
  </entry>
  
  <entry>
    <title>Jacky</title>
    <link href="https://www.annewqx.top/posts/65176/"/>
    <id>https://www.annewqx.top/posts/65176/</id>
    <published>2018-07-01T16:00:00.000Z</published>
    <updated>2022-11-10T04:40:15.053Z</updated>
    
    <content type="html"><![CDATA[<p>2017</p><a id="more"></a><h2 id="lt-0-gt"><a href="#lt-0-gt" class="headerlink" title="&lt;0&gt;"></a>&lt;0&gt;</h2><p>Jacky，其人身高普通，国字脸，满脸写满了“啊我又怎么了“的无辜神情。<br>要是让我回想一些关于他的画面，满脑子只有他半张着嘴，露出”啊？“的表情。<br>如果说我是思想上的矮子行动上的地精逻辑上的杠精，那么Jacky 便是思想上的巨人行动上的普通人逻辑上曾经的杠精，曾经一起互相杠的日子已经一去不复返很久了，现在大部分时候他更乐意用“啊那不是好棒棒”“🐂🍺”等等无聊的句式来断绝被我拉入互杠大战的可能性，多年以后我才知道，这被称做”糊弄学“，当你不再想回复某人的无聊日常分享时使用。<br>大一 Jacky 是班长，我是团支书。<br>大二我们都“卸任”，班主任说什么都不再留任了。套用Jacky的原话：“当班委？留级当吗？”—-我们并没有八核大脑，无法游刃有余于世俗的虚与委蛇与绩点之间。虽然后来两年的班委我认为他们 do a shitty job，但，为人民服务的确很难。<br>Jacky的发小勇哥是隔壁班班长。<br>那年期末，勇哥是年级第一，Jacky年级二十名。<br>我是我们院倒数二十名。<br>分数这个东西，一开始差距特别大时，还反复比较仔细分析患得患失自怨自艾，时间久了也就自我习惯自我接纳随缘自适了。只是偶尔还是会冒出“都是平时一起吹水的兄弟为什么别人那么优秀”的想法。<br>说句老实话，在我们这样的工科强校，只有成绩好的人会告诉无知懵懂的高中孩子成绩这东西没啥重要的，学酥学渣如我之流只会咬牙切齿的历数成绩好能享受到的种种优势：两千软妹币中欧交流的机会只属于成绩5%的佼佼者，学院的暑期集训只收年级前15%的优秀者……不胜枚举，失去的多了也就麻木了。<br>在大一结束的假期，2018世界杯的赛季，巴西踢墨西哥。彼时我等学渣已经放假逃之夭夭回家当咸鱼了，优秀的人比如Jacky和勇哥耗在学校，等待着再晚一个星期享受只收两千软妹币的欧洲半月游，勇哥选了去法国，Jacky选了去波兰。那天晚上，先是零点Jacky给我发了一串</p><blockquote><p>“学校网络断了去小南门的酒吧了”</p><p>“这酒有意思叫今晚不回家”</p><p>“哇靠这酒有点烈啊”</p><p>“今晚不回家啊哈哈哈哈”</p><p>“我缓过来了缓过来了”</p><p>“哎哟还是昏的”。</p></blockquote><p>我看着感觉没啥大碍也就没仔细问，看着球赛插科打诨几句就准备睡了。睡前瞅见微信里勇哥私信我“Jacky喝今晚不回家遭了””他好像有点不正常“。没来得及细想就堕入梦乡。<br>第二天十点起来Jacky的消息30+：</p><p>1:00：”勇哥这个畜生不是人，拉着小姐姐就走了留我一个人“；</p><p>2:45：”我一个人在小南门晃来晃去真开心“”发现了个通宵网吧哈哈哈哈“；</p><p>3:00：”没带身份证网吧不让进“”我一个人流落街头好惨“；</p><p>3:45：”勇哥真的不是朋友““不想回去吵醒阿姨给我开门……”；</p><p>7:45：“回宿舍睡觉了”；</p><p>14:45，是我：“哈哈哈哈哈哈哈哈哈哈哈哈哈哈”</p><p>（说到我们学校的宵禁制度和后门小酒吧，有兴趣的大学生可以在任何搜索引擎搜”考试周“，然后选择自动补全的”考试周破防“，赵向前同志会为大家奉上精彩绝伦的解说。）<br>我以为这场一时兴起的小南门青春徘徊剧场差不多就结束了，直到下午我刷知乎看见勇哥的问题关注track：</p><blockquote><p>“</p><p>43分钟前——‘已经有女朋友了，但又遇到更喜欢的对象怎么办？’</p><p>40分钟前——‘你错过了哪些异性对你的暗示？你的哪些暗示没有被异性理解？’</p><p>36分钟前——‘<strong>男生什么状态才体现出他已经爱上你了？</strong>’</p><p>35分钟前——‘有多少人从大学恋爱到结婚，你们幸福吗？’</p><p>”</p></blockquote><p>勇哥会有感情方面的关注记录，我倒是能理解，上半学期我想暗示Chris的时候，疯狂的在知乎收藏“什么时候应该表白？”“知道没有结果的感情还有没有必要继续”……可是这个情况完全不一样啊，这是先绿现任再去许下天长地久的大型三观崩塌现场啊！Jacky勇哥和我三个人做了一学期数学建模校内赛写了三篇水论文共度清明端午劳动三个小长假，我多多少少还是耳闻，勇哥此人曾是个浪子，高中曾有情债无数，至于是否是吹嘘，对情节并没有什么影响。<br>当下我就截屏存图，去问Jacky头天晚上在他和勇哥身上到底发生了什么。</p><p>Jacky：“我那么可怜我身上能发生什么？你还不如问我看到了什么。”<br>“那你目睹了啥子哟？”<br>“不过是抛弃朋友，和小姐姐操场看星，凌晨四点吵醒阿姨。”<br>至于勇哥，在微信上满口“你冤枉我了我不记得我关注过这些我不是我没有你别瞎说”之后，骂了一句“Jacky真的不够朋友”。</p><p>Jacky的波兰行却也没留下什么波澜壮阔的一笔，之后再嫌少听他提及，旅行经历本就是很个人的珍藏记忆。但我印象深刻的是他在当地第一次尝试了烟草，“很清新，推荐你也可以尝试一下。”，后来证明他当时尝试的确实是女烟。</p><p>我从来不觉得Jacky会有什么心理上的问题————朋友之间太熟悉了大概会习惯性忽略他们近来的内心感受，而且大部分聊天的时候我们很少谈比较本质的最近心情怎么样这种话题，大部分时候是很具像化的“后门外卖的小龙虾不要点，一宿舍三个人拉肚子了”“你赶紧看今年wwdc的评价 2018 new ipad香死了买吧买吧”“新看个网飞的剧赛博朋克风格超好的”“靠我在看书你不要发消息诱惑我玩手机”……<br>但是有天晚上我刷知乎，看见他关注了“抑郁是种什么样的体验”。<br>一时无言。<br>有意无意问了几句，他倒是心态成熟而态度敷衍，“很正常啊”，“哦哦嗯嗯就那样”。<br>我也觉得颇为无趣，便不再调解。<br>从那之后到现在我与他再难有只言片语交流。</p><p>开学听媛媛媛说了一句话，才知道其实谁都知道。</p><p>“Jacky要是再高一点再帅一点，你们早就在一起了。”</p><p>但我知道，那几年的Jacky，也许在对自己性向模糊不清探索的阶段，还没断掉联系前某个夜晚他吐露的只言片语：“我小时候有个很崇拜的邻居哥哥，有一年过年回家，我和他聊天，他向我出柜了。”“在我们那个小地方我第一次听说也还是很惊世骇俗的。”“有时候我在想我自己”</p><p>迟钝如我，那个时候完全没有思索过，为什么他的邻居哥哥要向他出柜，惊世骇俗。</p><p>后来几年Jacky留了长发，他发质很好，软件工程课上，我在后排发呆时常琢磨他绑马尾的手法。</p><h3 id="后："><a href="#后：" class="headerlink" title="后："></a>后：</h3><p>勇哥还没毕业就放弃保研去了一家初创的人工智能公司，他实习时发的朋友圈意气风发与传销味儿浓度几乎相当，我们当然都希望他有美好的未来。前几日看到他的朋友圈：“看着周围的同事逐渐离开，当年的股权兑现财富自由的畅想逐渐冷却，只望一步步走好，无愧当下。”</p><p>希望我们都有美好的未来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://www.annewqx.top/categories/life/"/>
    
      <category term="dude" scheme="https://www.annewqx.top/categories/life/dude/"/>
    
    
  </entry>
  
  <entry>
    <title>Dudes（目录）</title>
    <link href="https://www.annewqx.top/posts/27074/"/>
    <id>https://www.annewqx.top/posts/27074/</id>
    <published>2018-06-30T16:00:01.000Z</published>
    <updated>2022-11-09T08:07:48.041Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Follow the notes upon a journey<br>At first sight marks one’s destiny<br>Once the voyage comes to an end<br>Return lies within hasty keys</p></blockquote><a id="more"></a><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p><a href="/posts/65176/">Jackey</a></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p><a href="/posts/4085/">Chris</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Follow the notes upon a journey&lt;br&gt;At first sight marks one’s destiny&lt;br&gt;Once the voyage comes to an end&lt;br&gt;Return lies within hasty keys&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://www.annewqx.top/categories/life/"/>
    
      <category term="dude" scheme="https://www.annewqx.top/categories/life/dude/"/>
    
    
  </entry>
  
  <entry>
    <title>Dudes（Locks）</title>
    <link href="https://www.annewqx.top/posts/27073/"/>
    <id>https://www.annewqx.top/posts/27073/</id>
    <published>2018-06-30T16:00:00.000Z</published>
    <updated>2022-11-10T08:56:53.634Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="其实没有什么好看的，一篇草稿而已" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">陪你自己的作者是</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1086db701141c188bb173c1319499ce70315460076ec6c73c3cbda0640db8159"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;有些想法就顺便记录一点&lt;br&gt;当你把笔放下，天黑请闭眼&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://www.annewqx.top/categories/life/"/>
    
      <category term="dude" scheme="https://www.annewqx.top/categories/life/dude/"/>
    
    
  </entry>
  
</feed>
