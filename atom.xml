<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anne416Wu</title>
  
  <subtitle>Coding and Life Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://annewqx.top/"/>
  <updated>2020-02-25T01:29:33.502Z</updated>
  <id>http://annewqx.top/</id>
  
  <author>
    <name>Anne wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客装修</title>
    <link href="http://annewqx.top/posts/65512/"/>
    <id>http://annewqx.top/posts/65512/</id>
    <published>2020-02-24T12:29:31.000Z</published>
    <updated>2020-02-25T01:29:33.502Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="访客地球"><a href="#访客地球" class="headerlink" title="访客地球"></a>访客地球</h2><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><h2 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h2><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;访客地球&quot;&gt;&lt;a href=&quot;#访客地球&quot; class=&quot;headerlink&quot; title=&quot;访客地球&quot;&gt;&lt;/a&gt;访客地球&lt;/h2&gt;&lt;h2 id=&quot;网易云音乐&quot;&gt;&lt;a href=&quot;#网易云音乐&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Guide" scheme="http://annewqx.top/categories/Code/Guide/"/>
    
    
      <category term="hexo" scheme="http://annewqx.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>deploy-hexo-blog-to-vps</title>
    <link href="http://annewqx.top/posts/52540/"/>
    <id>http://annewqx.top/posts/52540/</id>
    <published>2020-02-24T06:36:23.000Z</published>
    <updated>2020-02-24T14:36:04.957Z</updated>
    
    <content type="html"><![CDATA[<p>在VPS上</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在VPS上&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Guide" scheme="http://annewqx.top/categories/Code/Guide/"/>
    
    
      <category term="VPS" scheme="http://annewqx.top/tags/VPS/"/>
    
      <category term="hexo" scheme="http://annewqx.top/tags/hexo/"/>
    
      <category term="nginx" scheme="http://annewqx.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Mac上Haskell的安装环境搭建</title>
    <link href="http://annewqx.top/posts/32573/"/>
    <id>http://annewqx.top/posts/32573/</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2020-02-24T14:37:21.552Z</updated>
    
    <content type="html"><![CDATA[<p>国内Haskell的安装和换源</p><a id="more"></a><blockquote><p>参考文章：<a href="https://www.jianshu.com/p/d86fec07856d" rel="external nofollow noreferrer">vscode搭建haskell环境</a></p><p>文章针对的是旧版本的stack，无脑照抄会出问题</p></blockquote><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><blockquote><p><a href="https://docs.haskellstack.org/en/stable/README/" rel="external nofollow noreferrer">stack官方安装指导</a></p><p>Installing GHC automatically, in an isolated location.<br>Installing packages needed for your project.<br>Building your project.<br>Testing your project.<br>Benchmarking your project</p></blockquote><p>正如官网所说，直接安装stack的好处是它自带Haskell的编译器GHC和Cabal(a system for building and packaging Haskell libraries and programs)等Heskell运行需要文件(个人觉得stack类似anaconda，环境管理+包管理工具)。但是国内安装不换源的话，搭建之路会很不顺利</p><ol><li><p>使用brew安装stack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search haskell</span><br></pre></td></tr></table></figure><p>可以看到brew返回了两个结果，一个是Formulae下的haskell-brew，另一个是Cask类型下的<a href="http://haskellformac.com" rel="external nofollow noreferrer">haskell-for-mac</a>，后者是个IDE，使用<code>brew cask install haskell-for-mac</code>下载，但是下载的过程太长，不知道到底是什么样，我们还是按照教程里的方法下载stack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install haskell-stack</span><br></pre></td></tr></table></figure></li><li><p>换源</p><p>这个时候如果按照stack官网的指示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stack new my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">stack setup</span><br><span class="line">stack build</span><br><span class="line">stack <span class="built_in">exec</span> my-project-exe</span><br></pre></td></tr></table></figure><p>很可能卡在setup步骤</p><p>第一种错误是返回Connection Failure，开全局VPN也没用那种。根据我在stackOverflow查到的信息，主要原因可能是路由器认为该地址是不良链接，拒绝了访问，无脑解决方法是直接手机开热点</p><p>第二种错误是执行stack setup之后一直卡在<code>ghc-8.8.2: dowanload has begun</code>其实就是原本的下载源在国外，所以下载速度起不来，所以我们要换<a href="https://mirrors.tuna.tsinghua.edu.cn/help/stackage/" rel="external nofollow noreferrer">清华的镜像源</a></p><p>要换的源涉及两个文件：<code>~/.cable/config</code> <code>~/.stack/config.yaml</code></p><p>首先换stack(<a href="https://mirrors.tuna.tsinghua.edu.cn/help/stackage/" rel="external nofollow noreferrer">stackage镜像使用帮助</a>)和stack setup(<a href="https://mirrors.tuna.tsinghua.edu.cn/help/hackage/" rel="external nofollow noreferrer">hackage镜像使用帮助</a>)的源，stack版本在2.1.1以上和以下不一样，这里只写2.1.1以上版本：</p><ul><li><p>打开~/.stack/config.yaml，加上：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">setup-info:</span> <span class="string">"http://mirrors.tuna.tsinghua.edu.cn/stackage/stack-setup.yaml"</span></span><br><span class="line"><span class="attr">urls:</span></span><br><span class="line">  <span class="attr">latest-snapshot:</span> <span class="string">http://mirrors.tuna.tsinghua.edu.cn/stackage/snapshots.json</span></span><br><span class="line"><span class="attr">package-indices:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">download-prefix:</span> <span class="string">http://mirrors.tuna.tsinghua.edu.cn/hackage/</span></span><br><span class="line">    <span class="attr">hackage-security:</span></span><br><span class="line">        <span class="attr">keyids:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">280b10153a522681163658cb49f632cde3f38d768b736ddbc901d99a1a772833</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">2a96b1889dc221c17296fcc2bb34b908ca9734376f0f361660200935916ef201</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">772e9f4c7db33d251d5c6e357199c819e569d130857dc225549b40845ff0890d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">aa315286e6ad281ad61182235533c41e806e5a787e0b6d1e7eef3f09d137d2e9</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0</span></span><br><span class="line">        <span class="attr">key-threshold:</span> <span class="number">3</span> <span class="comment"># number of keys required</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ignore expiration date, see https://github.com/commercialhaskell/stack/pull/4614</span></span><br><span class="line">        <span class="attr">ignore-expiry:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure></li></ul><p>现在换cabal的源</p><ul><li><p>在终端执行<code>cabal update</code>后<code>Ctrl+C</code>停止, 然后进行下一步。报错没关系，这一步的目的是生成<code>~/.cabal/config</code>配置文件</p></li><li><p>打开<code>~/.cabal/config</code> ，加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">repository</span> <span class="string">mirrors.tuna.tsinghua.edu.cn</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://mirrors.tuna.tsinghua.edu.cn/hackage</span></span><br></pre></td></tr></table></figure><p>为了速度，可以将官方仓库注释掉。实际有朋友反应他的配置文件中本身就没有官方仓库这一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">--</span> <span class="string">repository</span> <span class="string">hackage.haskell.org</span></span><br><span class="line"> <span class="string">--</span> <span class="attr">url:</span> <span class="string">http://hackage.haskell.org/</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>现在可以愉快地按照<a href="https://docs.haskellstack.org/en/stable/README/" rel="external nofollow noreferrer">stack官方安装指导</a> 中的步骤继续了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ol><blockquote><p><a href="https://www.w3cschool.cn/hsriti/" rel="external nofollow noreferrer">https://www.w3cschool.cn/hsriti/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国内Haskell的安装和换源&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Guide" scheme="http://annewqx.top/categories/Code/Guide/"/>
    
    
      <category term="Haskell" scheme="http://annewqx.top/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建入门</title>
    <link href="http://annewqx.top/posts/2727/"/>
    <id>http://annewqx.top/posts/2727/</id>
    <published>2020-02-15T16:00:00.000Z</published>
    <updated>2020-02-23T07:56:39.324Z</updated>
    
    <content type="html"><![CDATA[<p>使用基于Nodejs的Hexo博客框架, 结合github.io页面, 快速搭建个人博客</p><a id="more"></a><h2 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1 工具准备"></a>1 工具准备</h2><h3 id="1-GITHUB仓库创建"><a href="#1-GITHUB仓库创建" class="headerlink" title="1 GITHUB仓库创建"></a>1 GITHUB仓库创建</h3><p>​    创建新repository，名为<code>username.github.io</code>(username与github用户名一致)</p><h3 id="2-安装相关工具"><a href="#2-安装相关工具" class="headerlink" title="2 安装相关工具"></a>2 安装相关工具</h3><ol><li><p><a href="https://www.cnblogs.com/kaiye/p/4937191.html" rel="external nofollow noreferrer">安装node管理工具nvm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用brew安装</span></span><br><span class="line">brew install nvm</span><br><span class="line"><span class="comment"># 添加进终端配置文件（.zshrc或.bash_profile)</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></span><br></pre></td></tr></table></figure><blockquote><p>此处有个坑: nvm官方并不建议使用brew安装</p><p><code>Homebrew installation is not supported. If you have issues with homebrew-installed nvm, please brew uninstall it, and install it using the instructions below, before filing an issue.</code></p><p>如果使用Homebrew安装，因为安装路径等原因, 在.nvm中会缺少nvm-exec和nvm.sh两个文件。导致每次启动终端都需要输入<code>source $(brew --prefix nvm)/nvm.sh</code>才能使当前终端使用nvm命令</p><p>解决方法有2</p><ol><li><p>简单粗暴：在.zshrc（终端配置文件）中加入<code>source $(brew --prefix nvm)/nvm.sh</code></p></li><li><p>曲线救国：(注意此方法curl命令可能被墙, 具体见<a href="https://github.com/nvm-sh/nvm" rel="external nofollow noreferrer">nvm项目github</a>)</p><ol><li><p>卸载使用brew安装的nvm<code>brew uninstall nvm</code></p></li><li><p>使用curl命令下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.2/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>终端配置文件加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></blockquote></li><li><p>安装nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><blockquote><p> 网上很多过期教程会建议使用 <code>nvm install 4</code> , <code>nvm install 6</code>  , 实际安装后, node版本在7以下的都会抛出异常, 建议一步到位安装最新稳定版node</p><p> nvm/npm常用命令:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换nvm版本至 &lt;number&gt;开头的默认版本</span></span><br><span class="line">nvm use &lt;number&gt; </span><br><span class="line"><span class="comment">#设置默认 node 版本为 0.12.7</span></span><br><span class="line">nvm <span class="built_in">alias</span> default 0.12.7 </span><br><span class="line"><span class="comment"># 使用.nvmrc文件配置项目所使用的node版本</span></span><br><span class="line"><span class="built_in">cd</span> &lt;项目根目录&gt;  <span class="comment">#进入项目根目录</span></span><br><span class="line"><span class="built_in">echo</span> &lt;number&gt; &gt; .nvmrc <span class="comment">#添加 .nvmrc 文件</span></span><br><span class="line">nvm use <span class="comment">#无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span></span><br><span class="line">node -v <span class="comment">#查看 node 是否切换为对应版本</span></span><br><span class="line"><span class="comment">#安装 &lt;module-name&gt; 模块至全局目录，安装完成的路径是 /Users/&lt;username&gt;/.nvm/versions/node/&lt;nvm-version&gt;/lib/&lt;module-name&gt;</span></span><br><span class="line">npm install -g &lt;module-name&gt;</span><br></pre></td></tr></table></figure><p> nvm与n的区别</p><ul><li>node 版本管理工具还有一个是 <a href="https://github.com/tj/n" rel="external nofollow noreferrer">TJ 大神的 n</a> 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</li><li>由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</li></ul></blockquote></li><li><p><a href="https://hexo.io/zh-cn/" rel="external nofollow noreferrer">安装Hexo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-hexo的使用入门"><a href="#2-hexo的使用入门" class="headerlink" title="2 hexo的使用入门"></a>2 <a href="https://hexo.io/zh-cn/" rel="external nofollow noreferrer">hexo的使用入门</a></h2><ol><li><p>创建博客和基础配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init username.github.io <span class="comment"># 博客根目录&lt;folder_name&gt;</span></span><br><span class="line"><span class="built_in">cd</span> username.github.io</span><br></pre></td></tr></table></figure></li></ol><p>更改博客根目录下的_config.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment">#中文</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>更换主题</p><blockquote><p>主题测评见另一篇文章<a href="../hexo_theme">hexo的主题比较</a> </p><p>hexo初始化中自带landscape主题</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处以next主题为例</span></span><br><span class="line">   git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>进入themes/next, 打开_config.yml, 按照文件中的说明即可对主题进行基础配置</p><p>同时更改博客根目录中_config.yml文件的<code>theme: next</code></p></li><li><p>写文章</p><p>博客根目录username.github.io下的source文件夹保存所有博客, 默认使用md语法</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/writing.html" rel="external nofollow noreferrer">hexo写作命令</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo博客搭建入门</span><br><span class="line">date: 2020-02-16</span><br><span class="line">tags: hexo js</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  - </span>Code</span><br><span class="line"><span class="bullet">  - </span>Guide</span><br><span class="line">keywords: hexo js 前端 博客</span><br><span class="line">---</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li><li><p>测试<code>hexo s</code></p></li><li><p>安装使用hexo-deployer-git](<a href="https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git)自动部署发布工具" rel="external nofollow noreferrer">https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git)自动部署发布工具</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ol><h2 id="hexo的使用进阶"><a href="#hexo的使用进阶" class="headerlink" title="hexo的使用进阶"></a>hexo的使用进阶</h2><h3 id="图片"><a href="#图片" class="headerlink" title=" 图片 "></a><a href="https://hexo.io/zh-cn/docs/asset-folders.html" rel="external nofollow noreferrer"> 图片 </a></h3><ol><li><p>资源文件夹 : 最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p></li><li><p>组织化资源管理方式 : 通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开, 当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout]</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片名称</span>](<span class="link">图片名称.jpg</span>)</span><br></pre></td></tr></table></figure><p>需要注意, 使用md时,在首页显示会出现错误, 使用标签插件可以解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 图片名称.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips</p><ol><li><p>在typora的设置中进行以下修改可以与hexo同步：</p><p><img src="typoraimg_setting.jpg" alt="typoraimg_setting"></p></li><li><p>组织化资源管理的两种方式都会使图片失去本地编辑器上的可读性</p></li></ol><div class="tip">3. 实际使用中会遇到部分主题对标签插件渲染出现莫名其妙的错误(vexo)，或者主题不支持(terminal)，所以除非需要在首页的展示缩略图，建议使用markdown语法的方式。</div></blockquote></li></ol><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><h1 id="Hexo-Built-in-Tag-Helpers"><a href="#Hexo-Built-in-Tag-Helpers" class="headerlink" title="Hexo Built-in Tag Helpers"></a><a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/Posts/hexo-built-in-tag-helpers/" rel="external nofollow noreferrer">Hexo Built-in Tag Helpers</a></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用基于Nodejs的Hexo博客框架, 结合github.io页面, 快速搭建个人博客&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Guide" scheme="http://annewqx.top/categories/Code/Guide/"/>
    
    
      <category term="hexo" scheme="http://annewqx.top/tags/hexo/"/>
    
      <category term="js" scheme="http://annewqx.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hexo的主题比较</title>
    <link href="http://annewqx.top/posts/27751/"/>
    <id>http://annewqx.top/posts/27751/</id>
    <published>2020-02-15T16:00:00.000Z</published>
    <updated>2020-02-24T14:36:12.260Z</updated>
    
    <content type="html"><![CDATA[<p>hexo各个主题的比较, 以及部分主题的修改</p><a id="more"></a><h2 id="1-我的需求"><a href="#1-我的需求" class="headerlink" title="1 我的需求"></a>1 我的需求</h2><blockquote><p>目的：记录开发中遇到的坑，形成自己的handbook</p></blockquote><ol><li>功能：<ul><li>🔍站内搜索LeanCloud统计</li><li>🤥<a href="#valine_comment"> Valine的评论服务 </a></li><li>较为友好的代码高亮</li><li>有展示GitHub project（接入GitHub的API）的project页面</li><li>seo支持</li></ul></li><li>界面：<ul><li>首页tagCloud和categories的Widget</li><li>首页的index展示文章的tag和category标签</li><li>单篇博文内有随页面变化的目录widget</li><li>archive展示时间轴 </li></ul></li></ol><h2 id="2-各个theme评价"><a href="#2-各个theme评价" class="headerlink" title="2 各个theme评价"></a>2 各个theme评价</h2><h3 id="1-基于jade-pug-开发的主题"><a href="#1-基于jade-pug-开发的主题" class="headerlink" title="1 基于jade ( pug )开发的主题"></a>1 基于jade ( pug )开发的主题</h3><blockquote><p>Jade 是一个高性能的模板引擎，它深受 <a href="http://haml-lang.com/" rel="external nofollow noreferrer">Haml</a> 影响，它是用 JavaScript 实现的，并且可以供 <a href="http://nodejs.org/" rel="external nofollow noreferrer">Node</a> 使用，后来由于商标的原因，改为Pug  </p><div class="tip"> 以下列举的主题都仍然使用hexo-renderer-jade插件，npm会提示插件已被废弃，运行时会显示错误提示。首先要替换hexo-renderer-jade插件为hexo-renderer-pug，下载命令为npm install hexo-renderer-pug --save；然后将主题layout文件夹中的所有.jade文件替换为.pug文件</div>入门指南：[pug中文文档](https://pugjs.org/zh-cn/api/getting-started.html)</blockquote><ol><li><p><a href="https://github.com/pinggod/hexo-theme-apollo" rel="external nofollow noreferrer">Apollo</a></p><p>博客首页<br><img src="apollo_homepage.png" alt="apollo_homepage"><br>博客归档页<br><img src="apollo_archivepage.png" alt="apollo_archivepage"></p><ul><li>界面干净，多个theme都基于apollo开发，如<a href="https://github.com/MikeCoder/hexo-theme-Gandalfr" rel="external nofollow noreferrer">Gandalfr</a>  <a href="https://github.com/claymcleod/hexo-theme-hermes" rel="external nofollow noreferrer">Hermes</a>  <a href="https://github.com/Dreyer/hexo-theme-artemis" rel="external nofollow noreferrer">artemis</a> <a href="https://github.com/bulandent/hexo-theme-bubuzou" rel="external nofollow noreferrer">bubuzou</a> <a href="https://github.com/lyndonoc/hexo-theme-pandollo" rel="external nofollow noreferrer">pandollo</a></li><li>缺点: 功能缺乏，需要自己接入评论、目录、搜索、Widget等功能；</li></ul></li><li><p><a href="https://github.com/bulandent/hexo-theme-bubuzou" rel="external nofollow noreferrer">bubuzou</a></p><p>博客首页<br><img src="bubuzou_archieve_page.png" alt="bubuzou_archieve_page"><br>博文底部<br><img src="bubuzou_post_page.png" alt="bubuzou_post_page"></p><ul><li><p>基于apollo开发, 补充大量apollo缺乏的功能，如评论、目录、搜索、Widget；评论支持Valine评论；</p></li><li><p>首页 css页面适配存在缺陷（缩放时borden过小），代码高亮有缺陷，个别博文底部不会出现评论窗口(奇奇怪怪的bug)</p></li><li><p>实际使用的时候发现leancloud的访问量统计功能有缺点，留个坑；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p.visit</span><br><span class="line">i(class&#x3D;&quot;article-timer&quot;, data-identity&#x3D;item.path)</span><br><span class="line">   span 次访问</span><br><span class="line">   if (is_home())</span><br><span class="line">   i(data-hk-page&#x3D;&#39;http:&#x2F;&#x2F;anne416wu.github.io&#39;+url_for(item.path)) -</span><br><span class="line">   else </span><br><span class="line">   i(data-hk-page&#x3D;&quot;current&quot;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://github.com/MikeCoder/hexo-theme-Gandalfr" rel="external nofollow noreferrer">Gandalfr</a></p><ul><li>不放图了，这玩意儿bug挺多。有意思的是作者写了个tagCloud的辅助插件，给TagCloud加上了动画效果。界面上较bubuzou更贴近apollo。</li><li>有时间的可以把Gandalfr的界面和bubuzou的功能结合一下。</li></ul></li></ol><h3 id="2-基于ejs开发的主题"><a href="#2-基于ejs开发的主题" class="headerlink" title="2 基于ejs开发的主题"></a>2 基于ejs开发的主题</h3><blockquote><p> ejs是一套简单的模板语言，利用普通的 JavaScript 代码生成 HTML 页面，相比上面使用jade，修改更为方便。个人体验感觉ejs性能的确不如jade。</p></blockquote><ol><li><p><a href="https://github.com/yanm1ng/hexo-theme-vexo" rel="external nofollow noreferrer">Vexo</a><br>博客首页<br><img src="vexo_homepage.png" alt="vexo_homepage"><br>博文开头<br><img src="vexo_postpage.png" alt="vexo_postpage"><br>归档页<br><img src="vexo_archievepage.png" alt="vexo_archivepage"><br>项目页<br><img src="vexo_projectpage.png" alt="vexo_projectpage"></p><ul><li>满足对界面的一切幻想(对界面的幻想都是这个主题惯出来的)，支持多种代码高亮</li><li>缺点：未接入搜索功能，仅支持gitment评论，无首页CLoudTag的Widget等</li><li>本地运行存在bug。使用<code>hexo s</code>预览时，如果文章资源读取出现错误，整个博客页面会显示空白</li></ul></li><li><p><a href="https://github.com/probberechts/hexo-theme-cactus" rel="external nofollow noreferrer">Cactus</a></p><p>博客首页<br><img src="cactus_homepage.png" alt="cactus_homepage"><br>博文开头<br><img src="cactus_postpage.png" alt="cactus_postpage"><br>归档页<br><img src="cactus_archievepage.png" alt="cactus_archivepage"></p><ul><li>界面干净，支持多种代码高亮</li><li>因为是国外开发的，对本地化的支持较少；</li></ul><p>&lt;未完待续&gt;</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo各个主题的比较, 以及部分主题的修改&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Other" scheme="http://annewqx.top/categories/Code/Other/"/>
    
    
      <category term="hexo" scheme="http://annewqx.top/tags/hexo/"/>
    
      <category term="js" scheme="http://annewqx.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>VPS 配置</title>
    <link href="http://annewqx.top/posts/9931/"/>
    <id>http://annewqx.top/posts/9931/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2020-02-23T07:56:39.322Z</updated>
    
    <content type="html"><![CDATA[<p>VPS服务器的创建、Shadowsocks的配置</p><a id="more"></a><script src="https://cdn1.lncld.net/static/js/av-mini-0.6.10.js"></script><script src="http://jerry-cdn.b0.upaiyun.com/hit-kounter/hit-kounter-lc-0.2.0.js"></script><blockquote><p>参考网址</p><ul><li>基本ssh安装配置：<a href="https://jerryzou.com/posts/shadowsocks-and-digitalocean/" rel="external nofollow noreferrer">https://jerryzou.com/posts/shadowsocks-and-digitalocean/</a></li><li>进阶使用：<a href="https://www.itrhx.com/2020/01/10/A61-build-a-SSR-server-with-VPS/" rel="external nofollow noreferrer">https://www.itrhx.com/2020/01/10/A61-build-a-SSR-server-with-VPS/</a></li></ul></blockquote><h2 id="1-注册和创建Droplets"><a href="#1-注册和创建Droplets" class="headerlink" title="1 注册和创建Droplets"></a>1 注册和创建Droplets</h2><blockquote><p>VPS-Digital Ocean - CentOS 7 x64 - Enable IPV6</p><p>非CentOS7可能导致后续出现python等缺失</p></blockquote><ol><li><p>创建SSH key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看本地的SSH key</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ls *.pub</span><br><span class="line"><span class="comment">#创建新的SSH key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></li><li><p>将公钥添加到账号</p></li><li><p>远程登录服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@IP地址</span><br></pre></td></tr></table></figure><p>退出服务器     <code>exit</code></p><blockquote><p>附加：vim的安装和配置</p><ol><li><p>安装vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure></li><li><p>配置vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.vimrc</span><br></pre></td></tr></table></figure></li><li><p>vim配置文件参考</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" Configuration file for vim</span></span><br><span class="line"><span class="string">set modelines=0"</span> CVE-2007-2438</span><br><span class="line"></span><br><span class="line"><span class="string">" Normally we use vim-extensions. If you want true vi-compatibility</span></span><br><span class="line"><span class="string">"</span> remove change the following statements</span><br><span class="line"><span class="built_in">set</span> nocompatible<span class="string">" Use Vim defaults instead of 100% vi compatibility</span></span><br><span class="line"><span class="string">set backspace=2"</span> more powerful backspacing</span><br><span class="line"></span><br><span class="line"><span class="string">" Don't write backup file if vim is being called by "</span>crontab -e<span class="string">"</span></span><br><span class="line"><span class="string">au BufWrite /private/tmp/crontab.* set nowritebackup nobackup</span></span><br><span class="line"><span class="string">"</span> Don<span class="string">'t write backup file if vim is being called by "chpass"</span></span><br><span class="line"><span class="string">au BufWrite /private/etc/pw.* set nowritebackup nobackup</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let skip_defaults_vim=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">autocmd InsertLeave * se nocul</span></span><br><span class="line"><span class="string">autocmd InsertEnter * se cul</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set tabstop=4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set softtabstop=4</span></span><br><span class="line"><span class="string">set shiftwidth=4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">colorscheme pablo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set ruler</span></span><br><span class="line"><span class="string">set scrolloff=3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set rtp+=/usr/local/opt/fzf</span></span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ol><h2 id="2-Shadowsocks"><a href="#2-Shadowsocks" class="headerlink" title="2 Shadowsocks"></a>2 Shadowsocks</h2><ol><li><p>安装<br>CentOS7自带python2.7，所以直接安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></li><li><p>配置文件内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"服务器ip地址"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"你设置的密码"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多端口配置</span></span><br><span class="line"><span class="comment">// 即把server_port和password两项替换为port_password</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"服务器ip地址"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"8686"</span>:<span class="string">"你设置的密码"</span>,</span><br><span class="line">        <span class="attr">"8687"</span>:<span class="string">"你设置的密码"</span>,</span><br><span class="line">        <span class="attr">"8688"</span>:<span class="string">"你设置的密码"</span>,</span><br><span class="line">        <span class="attr">"8689"</span>:<span class="string">"你设置的密码"</span>,</span><br><span class="line">        <span class="attr">"8690"</span>:<span class="string">"你设置的密码"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ssh服务器启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json</span><br><span class="line"><span class="comment"># 或者在后台运行</span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">ssserver -c /etc/shadowsocks.json --<span class="built_in">log</span>-file /tmp/ss.log -d start</span><br><span class="line">tail -f /tmp/ss.log</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-速度升级和安全性"><a href="#3-速度升级和安全性" class="headerlink" title="3 速度升级和安全性"></a>3 速度升级和安全性</h2><ul><li><p>下载锐速服务（建议直接使用下一条四合一脚本）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  对于centOS7 需要先下载需要的固件20140911</span></span><br><span class="line">  rpm -ivh ftp://ftp.pbone.net/mirror/ftp.scientificlinux.org/linux/scientific/7.0/x86_64/updates/security/linux-firmware-20140911-0.1.git365e80c.el7.noarch.rpm</span><br><span class="line"><span class="comment"># 更换内核</span></span><br><span class="line">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/hombo125/doubi/master/rskernel.sh &amp;&amp; bash rskernel.sh</span><br><span class="line"><span class="comment"># 内核更换完后显示Success后需要重新连接到服务器</span></span><br><span class="line">ssh root@IP地址</span><br><span class="line"><span class="comment"># 查看当前内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="comment"># 下载锐速，一路回车安装</span></span><br><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://www.hostloc.com/thread-508015-1-1.html" rel="external nofollow noreferrer"><strong>bbr 原版/魔改/plus+锐速 四合一脚本</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载脚本</span></span><br><span class="line">wget <span class="string">"https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh"</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br><span class="line"><span class="comment"># 如果证书错误的话</span></span><br><span class="line">apt-get -y install ca-certificates</span><br><span class="line">yum -y install ca-certificates</span><br><span class="line"><span class="comment"># 1-3中选择切换内核，自动重启，如果出现是否删除Configuring image,选择no</span></span><br><span class="line"><span class="comment"># 调用脚本</span></span><br><span class="line">./tcp.sh</span><br><span class="line"><span class="comment"># 在4-8中选择要开的加速</span></span><br><span class="line">   <span class="string">"1. 安装 BBR/BBR魔改版内核"</span>        对应4,5,6（原版，魔改，暴力魔改）</span><br><span class="line">   <span class="string">"2. 安装 BBRplus版内核 "</span>                对应7（plus）</span><br><span class="line">   <span class="string">"3. 安装 Lotserver(锐速)内核"</span>        对应8（锐速）</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://www.oldking.net/tag/speedtest/" rel="external nofollow noreferrer">服务器测速 speedtest</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 断链接</span></span><br><span class="line">wget -qO- git.io/superbench.sh | bash</span><br><span class="line"><span class="comment"># 使用参数</span></span><br><span class="line">wget -qO- git.io/superbench.sh | bash -s info</span><br><span class="line">wget -qO- git.io/superbench.sh | bash -s io</span><br><span class="line">wget -qO- git.io/superbench.sh | bash -s speed</span><br><span class="line">wget -qO- git.io/superbench.sh | bash -s fast</span><br><span class="line">wget -qO- git.io/superbench.sh | bash -s share</span><br></pre></td></tr></table></figure></li><li><p>配置防火墙（可能到处后续安装锐速服务后出现模块缺失）</p><ol><li><p>配置防火墙文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/firewalld/zones/public.xml</span><br></pre></td></tr></table></figure><p> 一个端口对应两个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8687"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8687"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8688"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8688"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8689"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8689"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8690"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8690"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8691"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8691"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>重启shadowsocks，重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"><span class="comment"># 如果没有firewalld-cmd命令</span></span><br><span class="line">yum install firewalld</span><br></pre></td></tr></table></figure><blockquote><p>firewalld的基本使用</p><p>启动： systemctl start firewalld</p><p>关闭： systemctl stop firewalld</p><p>查看状态： systemctl status firewalld</p><p>开机禁用 ： systemctl disable firewalld</p><p>开机启用 ： systemctl enable firewalld</p><p>查看开放的端口：firewall-cmd –list-ports</p><p>添加端口：firewall-cmd –add-port=8080/tcp –permanent （–permanent永久生效，没有此参数重启后失效）<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/qq_27751535/article/details/89633138" rel="external nofollow noreferrer">https://blog.csdn.net/qq_27751535/article/details/89633138</a></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VPS服务器的创建、Shadowsocks的配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Guide" scheme="http://annewqx.top/categories/Code/Guide/"/>
    
    
      <category term="VPS" scheme="http://annewqx.top/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>mac快捷键和常用命令行</title>
    <link href="http://annewqx.top/posts/8410/"/>
    <id>http://annewqx.top/posts/8410/</id>
    <published>2020-01-19T16:00:00.000Z</published>
    <updated>2020-02-23T07:56:39.322Z</updated>
    
    <content type="html"><![CDATA[<p>mac常用命令行</p><a id="more"></a><h2 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h2><ul><li>显示隐藏文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles YES</span><br><span class="line">KillAll Finder</span><br></pre></td></tr></table></figure><ul><li>不显示隐藏文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles NO</span><br><span class="line">KillAll Finder</span><br></pre></td></tr></table></figure><ul><li>快捷键方式：<code>command+shift+.</code></li></ul><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul><li>修改截图默认文件名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;Screenshot&quot;</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><ul><li>更换默认截图路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture location ~&#x2F;Desktop&#x2F;屏幕截图</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><ul><li>去掉窗口截图的阴影</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture disable-shadow -bool true</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac常用命令行&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Other" scheme="http://annewqx.top/categories/Code/Other/"/>
    
    
      <category term="mac" scheme="http://annewqx.top/tags/mac/"/>
    
      <category term="bash" scheme="http://annewqx.top/tags/bash/"/>
    
      <category term="hot key" scheme="http://annewqx.top/tags/hot-key/"/>
    
  </entry>
  
  <entry>
    <title>markdown进阶使用技巧</title>
    <link href="http://annewqx.top/posts/64578/"/>
    <id>http://annewqx.top/posts/64578/</id>
    <published>2020-01-16T16:00:00.000Z</published>
    <updated>2020-02-23T07:56:39.321Z</updated>
    
    <content type="html"><![CDATA[<p>markdown中的mermaid作图, html结合等进阶使用的handbook</p><a id="more"></a><h2 id="link_in_page">页内跳转</h2><p><span id = "jumptoexample"> 两种方法究其根本都是md中html语法的应用</span></p><h3 id="link_in_page.1">1.生成目录方法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>[<span class="string">页内跳转</span>](<span class="link">#link_in_page</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">1生成目录的方法</span>](<span class="link">#link_in_page.1</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">2html标签实现</span>](<span class="link">#link_in_page.2</span>)</span><br></pre></td></tr></table></figure><p>生成效果:</p><ul><li><a href="#link_in_page">页内跳转</a><ul><li><a href="#link_in_page.1">1.生成目录的方法</a></li><li><a href="#link_in_page.2">2.html标签实现</a></li></ul></li></ul><p>在正文中对应的地方, 加入章节标题对应id</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">'link_in_page'</span>&gt;</span></span>业内跳转<span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="link_in_page.2">2.html标签实现</h3><p>定义一个锚在跳转的目的地    <code>&lt;span id = &quot;jumptoexample&quot;&gt;页内跳转&lt;/span&gt;</code> </p><p>在要需要跳转的地方使用md语法的超链接 <code>[ 点击跳转 ](#jumptoexample)</code></p><p><a href="#jumptoexample"> 点击跳转 </a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown中的mermaid作图, html结合等进阶使用的handbook&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Other" scheme="http://annewqx.top/categories/Code/Other/"/>
    
    
      <category term="markdown" scheme="http://annewqx.top/tags/markdown/"/>
    
      <category term="html" scheme="http://annewqx.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda的环境管理</title>
    <link href="http://annewqx.top/posts/52525/"/>
    <id>http://annewqx.top/posts/52525/</id>
    <published>2019-12-12T16:00:00.000Z</published>
    <updated>2020-02-23T07:56:39.319Z</updated>
    
    <content type="html"><![CDATA[<p>Anaconda的环境管理</p><a id="more"></a><h1 id="Conda的环境管理"><a href="#Conda的环境管理" class="headerlink" title="Conda的环境管理"></a>Conda的环境管理</h1><p>Conda的环境管理功能允许我们同时安装若干不同版本的Python，并能自由切换。对于上述安装过程，假设我们采用的是Python 2.7对应的安装包，那么Python 2.7就是默认的环境（默认名字是root注意这个root不是超级管理员的意思）。<br>假设我们需要安装Python 3.4，此时，我们需要做的操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）</span><br><span class="line">conda create —name python34 python&#x3D;3.4</span><br><span class="line"></span><br><span class="line"># 安装好后，使用activate激活某个环境</span><br><span class="line">activate python34 # for Windows</span><br><span class="line">source activate python34 # for Linux &amp; Mac</span><br><span class="line"># 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH</span><br><span class="line"></span><br><span class="line"># 此时，再次输入</span><br><span class="line">python —version</span><br><span class="line"># 可以得到&#96;Python 3.4.5 :: Anaconda 4.1.1 (64-bit)&#96;，即系统已经切换到了3.4的环境</span><br><span class="line"></span><br><span class="line"># 如果想返回默认的python 2.7环境，运行</span><br><span class="line">deactivate python34 # for Windows</span><br><span class="line">source deactivate python34 # for Linux </span><br><span class="line">conda deactivate python34 # for mac</span><br><span class="line"></span><br><span class="line"># 删除一个已有的环境</span><br><span class="line">conda remove —name python34 —all</span><br></pre></td></tr></table></figure><blockquote><p>用户安装的不同python环境都会被放在目录~/anaconda/envs<br>下，可以在命令中运行<br>conda info -e<br>查看已安装的环境，当前被激活的环境会显示有一个星号或者括号。<br>说明：有些用户可能经常使用python 3.4环境，因此直接把<br>~/anaconda/envs/python34<br>下面的bin或者Scripts加入PATH，去除anaconda对应的那个bin目录。这个办法，怎么说呢，也是可以的，但总觉得不是那么elegant……<br>如果直接按上面说的这么改PATH，你会发现conda命令又找不到了（当然找不到啦，因为conda在<br>~/anaconda/bin<br>里呢），这时候怎么办呢？方法有二：1. 显式地给出conda的绝对地址 2. 在python34环境中也安装conda工具（推荐）。</p></blockquote><h1 id="Conda的包管理"><a href="#Conda的包管理" class="headerlink" title="Conda的包管理"></a>Conda的包管理</h1><blockquote><p>Conda的包管理就比较好理解了，这部分功能与<br>pip<br>类似。<br>例如，如果需要安装scipy：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"># 安装scipy</span><br><span class="line">conda install scipy</span><br><span class="line"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class="line"># 查看已经安装的packages</span><br><span class="line">conda list</span><br><span class="line"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class="line"># 安装scipy</span><br><span class="line">conda install scipy</span><br><span class="line"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class="line"># 查看已经安装的packages</span><br><span class="line">conda list</span><br><span class="line"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class="line">### conda的一些常用操作如下：</span><br><span class="line"># 查看当前环境下已安装的包</span><br><span class="line">conda list</span><br><span class="line"># 查看某个指定环境的已安装包</span><br><span class="line">conda list -n python34</span><br><span class="line"># 查找package信息</span><br><span class="line">conda search numpy</span><br><span class="line"># 安装package</span><br><span class="line">conda install -n python34 numpy</span><br><span class="line"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class="line"># 也可以通过-c指定通过某个channel安装</span><br><span class="line"># 更新package</span><br><span class="line">conda update -n python34 numpy</span><br><span class="line"># 删除package</span><br><span class="line">conda remove -n python34 numpy</span><br><span class="line"># 查看当前环境下已安装的包</span><br><span class="line">conda list</span><br><span class="line"># 查看某个指定环境的已安装包</span><br><span class="line">conda list -n python34</span><br><span class="line"># 查找package信息</span><br><span class="line">conda search numpy</span><br><span class="line"># 安装package</span><br><span class="line">conda install -n python34 numpy</span><br><span class="line"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class="line"># 也可以通过-c指定通过某个channel安装</span><br><span class="line"># 更新package</span><br><span class="line">conda update -n python34 numpy</span><br><span class="line"># 删除package</span><br><span class="line">conda remove -n python34 numpy</span><br><span class="line">### 前面已经提到，conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如</span><br><span class="line"># 更新conda，保持conda最新</span><br><span class="line">conda update conda</span><br><span class="line"># 更新anaconda</span><br><span class="line">conda update anaconda</span><br><span class="line"># 更新python</span><br><span class="line">conda update python</span><br><span class="line"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</span><br><span class="line">### 补充：如果创建新的python环境，比如3.4，运行</span><br><span class="line">### conda create -n python34 python&#x3D;3.4</span><br><span class="line">### 之后，conda仅安装python 3.4相关的必须项，如python, pip等，如果希望该环境像默认环境那样，安装anaconda集合包，只需要：</span><br><span class="line"># 在当前环境下安装anaconda包集合</span><br><span class="line">conda install anaconda</span><br><span class="line"># 结合创建环境的命令，以上操作可以合并为</span><br><span class="line">conda create -n python34 python&#x3D;3.4 anaconda</span><br><span class="line"># 也可以不用全部安装，根据需求安装自己需要的package即可</span><br><span class="line"># 在当前环境下安装anaconda包集合</span><br><span class="line">conda install anaconda</span><br><span class="line"># 结合创建环境的命令，以上操作可以合并为</span><br><span class="line">conda create -n python34 python&#x3D;3.4 anaconda</span><br><span class="line"># 也可以不用全部安装，根据需求安装自己需要的package即可</span><br><span class="line"># 设置国内镜像</span><br><span class="line">### 如果需要安装很多packages，你会发现conda下载的速度经常很慢，因为Anaconda.org的服务器在国外。所幸的是，清华TUNA镜像源有Anaconda仓库的镜像，我们将其加入conda的配置即可：</span><br><span class="line"># 添加Anaconda的TUNA镜像</span><br><span class="line">conda config —add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class="line"># 设置搜索时显示通道地址</span><br><span class="line">conda config —set show_channel_urls yes</span><br><span class="line"># 添加Anaconda的TUNA镜像</span><br><span class="line">conda config —add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class="line"># 设置搜索时显示通道地址</span><br><span class="line">conda config —set show_channel_urls yes</span><br></pre></td></tr></table></figure><blockquote><p>执行完上述命令后，会生成<br>~/.condarc<br>(Linux/Mac)或<br>C:UsersUSER_NAME.condarc<br>文件，记录着我们对conda的配置，直接手动创建、编辑该文件是相同的效果。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Anaconda的环境管理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Note" scheme="http://annewqx.top/categories/Code/Note/"/>
    
    
      <category term="python anaconda" scheme="http://annewqx.top/tags/python-anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Linux的基本终端命令</title>
    <link href="http://annewqx.top/posts/55266/"/>
    <id>http://annewqx.top/posts/55266/</id>
    <published>2019-08-26T16:00:00.000Z</published>
    <updated>2020-02-24T14:32:27.500Z</updated>
    
    <content type="html"><![CDATA[<p>Linux终端的基本命令 (Unix下基本一致)</p><a id="more"></a><blockquote><ul><li>shell 提示符<br><code>username@hostname:direction$</code></li><li>shell命令格式<br><code>command [option] [arguments]</code><blockquote><p>按一次tab补全文件名<br>按两次tab补全命令<br>单击右键粘贴</p></blockquote></li></ul></blockquote><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><p>帮助命令</p><ul><li>man 查看man手册</li><li>info 查看info手册</li><li>—help </li></ul></li><li><p>目录</p><ul><li>根目录 /</li><li>.代表目录自己 ..代表目录的父目录，对于根目录.和..都代表自己</li><li>pwd 查询当前目录路径</li><li>～ 引用当前用户的主目录</li><li>绝对路径<code>/home/hxy/hello.txt</code></li><li>相对路径<code>./hello.txt</code></li></ul></li><li><p>文件与目录相关命令</p><ul><li><p>ls 显示目录内容</p><ul><li>ls -la 列出所有文件，包括隐含文件</li><li>ls -dl 仅查看目录属性</li><li>ls -R 递归显示子目录的文件</li><li>ls 文件名/文件夹名 查看文件信息</li><li>ls -l 详细结果<blockquote><p>详细结果：<code>drwx------ 14 student student 409611...</code><br>第一个字符表示文件类型：-普通文件 d目录 l符号链接 b块设备文件 c字符设备文件<br>后面9个字符表示文件的访问权限：</p><ul><li>第一组表示文件属主的权限</li><li>第二组表示同组用户的权限</li><li>第三组表示其他用户的权限<br>各权限如下</li><li>r 读</li><li>w 写</li><li>x 执行，对于目录表示进入</li></ul></blockquote></li></ul></li><li><p>cd 切换工作目录</p><ul><li>cd .. 进入上一级目录</li><li>cd ~ 或 cd 进入用户主目录</li></ul></li><li><p>mv [options] 源文件/文件夹 目标文件/文件夹</p></li><li><p>cp 复制文件或目录</p><ul><li>cp -a 拷贝目录，保留一切链接和属性</li><li>cp -f 覆盖已经存在的目标文件而不提示</li><li>cp -R 递归复制目录下的所有字目录和文件</li></ul></li><li><p>mkdir 创建一个目录</p><ul><li>mkdir -m 对新建目录设置存取权限（chmod）</li><li>mkdir -p 自动补全不存在的上级目录</li></ul></li><li><p>rmdir 删除空目录</p><ul><li>rmdir -p 递归删除目录</li></ul></li><li><p>rm 删除</p><ul><li>rm -r 递归删除（等同rmdir）</li><li>rm -i 删除一个文件</li><li>rm -f 不询问，直接删除</li></ul></li><li><p>file 确定文件类型</p></li><li><p>cat 链接或显示文件内容</p><ul><li>带行数 cat -n 等价于nl</li></ul></li><li><p>tac  从最后一行开始显示文件内容</p></li><li><p>more/less</p></li><li><p>head/tail</p></li><li><p>touch 新建文件</p></li><li><p>nl 按输出行号的方式显示文件</p></li><li><p>ln 为一个文件在另一个位置建立符号链接</p><ul><li><code>ln -s 目标 目录</code> 软连接，<a href="">一个指向源文件名的连接文件</a>，类似快捷方式</li><li><code>ln 目标 目录</code> 硬连接 类似指针</li></ul></li></ul></li><li><p>字符</p><ul><li>grep 定位字符信息</li><li>wc 统计字符信息</li><li>sort 排序字符信息</li></ul></li><li><p>打包/压缩文件</p><ul><li>打包：把所有文件合并在一个tar文件里</li><li>压缩 使用gzip(tar.gz/tgz)或biz2(tar.bz2)压缩<br><em>.gz比较快，压缩率不如bz2</em></li><li>-c 创建tar文件 -f将文件打包生成到一个文件</li><li><code>tar -cf new.tar ./home/se</code></li><li><code>tar -xf new.tar</code> 解包</li><li>对于zip格式：tar cvzf 打包 tar xvzf解包</li><li>对于biz2格式： tar cvjf 打包 tar xvjf解包</li></ul></li></ul><h2 id="用户管理及网络设置"><a href="#用户管理及网络设置" class="headerlink" title="用户管理及网络设置"></a>用户管理及网络设置</h2><h2 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h2><p><strong>gcc支持的源码格式：</strong>.c .cpp .m（Objective-C源程序） .i（预处理后的c文件） .ii（预处理后的c++文件） .s/.S（汇编语言源程序） .h（预处理器文件） .o（目标文件）</p><h4 id="单个源码"><a href="#单个源码" class="headerlink" title="单个源码"></a>单个源码</h4><ul><li><p><code>gcc hello.c -o hello</code> 把hello.c编译成一个可执行程序hello（一次性完成四步）</p></li><li><p><code>gcc hello.c</code>不指定输出名，生成一个a.out</p></li><li><p>源文件到可执行文件的编译过程：</p><ul><li><p>预处理 <code>gcc -E hello.c -o hello.i</code></p></li><li><p>编译：将源代码编译成汇编代码 <code>gcc -S hello.i -o hello.s</code></p></li><li><p>汇编：将汇编代码汇编成目标文件 <code>gcc -c hello.s -o hello.o</code></p></li><li><p>链接：将目标代码和所需要库链成一个完整的应用程序 <code>gcc hello.o -o hello</code></p><blockquote><p>gcc的结果输出于后缀名，只和输出参数有关</p></blockquote></li></ul></li></ul><h4 id="多个源码"><a href="#多个源码" class="headerlink" title="多个源码"></a>多个源码</h4><ul><li>一般先将源代码编译成目标代码，最后一次链接成可执行程序</li><li>对于有头文件在多个目录，需要在编译时多次使用-I参数加入头文件所在目录<br>例如a.c需要用到/usr，当前目录/home<br><code>gcc -I -I/usr -I/home -c a.c</code></li><li>对于多个源文件组成的程序。可以把多个文件在一句里编译，但建议不这样做，建议使用makefile脚本来调用gcc构造，见下一节<br><code>gcc a.c b.c d.c -o test</code></li></ul><h4 id="gcc的选项"><a href="#gcc的选项" class="headerlink" title="gcc的选项"></a>gcc的选项</h4><ul><li>宏macro<ul><li>-Dmacro <code>gcc test.c -DPRINTF=printf -o test</code></li><li>-Dmacro=defn <code>gcc test.c -DNUM=10 -o test</code></li></ul></li><li><code>gcc -Wall a.c -o a</code>打开所有编译警告</li><li><code>gcc -Wall -Werror a.c -o a</code>将警告视作错误，出现任何警告就放弃编译</li><li><code>gcc -w</code>禁止输出警告</li></ul><h4 id="gcc使用的第三方库"><a href="#gcc使用的第三方库" class="headerlink" title="gcc使用的第三方库"></a>gcc使用的第三方库</h4><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><h4 id="make的调用"><a href="#make的调用" class="headerlink" title="make的调用"></a>make的调用</h4><ul><li><p>直接执行make，自动查找当前目录下名为makefile的文件，并自动从第一个target开始执行</p></li><li><p>如果makefile脚本名称不是缺省名称，使用-f参数来表示<br><code>make -f hello.mk</code></p></li><li><p>如果需要make查找其他目录下的makefile，使用-C参数<br><code>make -C /home</code></p></li><li><p>在makefile中以target表示不同的编译部分，可以在命令行直接写target名称，用于一个活多个target的编译<br><code>make install</code><br><code>make target1 target2</code></p></li></ul><blockquote><h4 id="makefile的格式"><a href="#makefile的格式" class="headerlink" title="makefile的格式"></a>makefile的格式</h4><p>makefile由由一组依赖关系和规则构成</p><p>每个依赖关系由一个目标（即将要创建的文件）和它依赖的源文件组成</p><p>规则描述了怎样从源文件创建出目标文件</p><p><strong>规则也称为target</strong></p><ul><li><p>规则 <code>目标名称：[依赖对象]&lt;tab&gt;命令列表</code></p><ul><li>目标名称是需要创建的结果的名称</li><li>依赖对象表示创建这个目标之前必须预先创建的其他目标，可以是另一个规则的名称，也可以是基本文件的名称</li><li>命令列表表示为了创建这个目标，需要执行那些shell命令可以是一行或多行shell命令，每一行命令行的行首必须是一个tab</li><li>行首必须是tab不能是空格，否则makefile出错</li><li>如果命令行过长，可用\分行，新行无需tab打头<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要想生成hello.o目标，必须先有hello.c，然后调用gcc编译生成hello.o，依赖对象hello.c可以省略</span></span><br><span class="line"><span class="section">hello.o: hello.c</span></span><br><span class="line">gcc -c hello.c -o hello.o</span><br><span class="line"><span class="comment"># 要想生成执行程序hello，必须先执行规则hello.o，然后调用命令行gcc连接生成hello</span></span><br><span class="line"><span class="section">hello: hello.o</span></span><br><span class="line">gcc hello.o -o hello</span><br></pre></td></tr></table></figure></li></ul></li><li><p>makefile里规则的前后顺序不太重要，实际调用顺序取决目标之间的依赖关系，因此make采用逆推的方式来判断和执行目标*</p></li><li><p>伪目标phony target：一般的目标最终是为了生成一个文件，但有一些目标可以不生成结果文件，只是为了调用命令或依赖对象，具体动作需要需要开发者自行编写</p><ul><li>all 编译所有目标</li><li>clean 清楚项目生成的中间文件和最终生成文件</li><li>install 项目如何安装</li><li>uninstall 项目如何卸载</li></ul></li></ul></blockquote><h4 id="makefile基本结构"><a href="#makefile基本结构" class="headerlink" title="makefile基本结构"></a>makefile基本结构</h4><p>makefile一般包含：</p><ul><li>需要由make工具创建的项目，通常是目标文件和可执行文件，它们一般被称为target</li><li>要创建的目标依赖于哪些文件</li><li>创建每个目标时需要运行的的命令，命令之间用tab打头</li><li>通常包含的固定伪目标</li><li>#表示注释行<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Makefile for exp2</span></span><br><span class="line"><span class="section">main: main.o add.o del.o modify.o</span></span><br><span class="line">gcc -o main main.o add.o del.o modify.o</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc -c main.c</span><br><span class="line"><span class="section">add.o: add.c</span></span><br><span class="line">gcc -c add.c</span><br><span class="line"><span class="section">del.o: del.c</span></span><br><span class="line">gcc -c del.c</span><br><span class="line"><span class="section">modify.o: modify.c</span></span><br><span class="line">gcc -c modify.c</span><br></pre></td></tr></table></figure></li></ul><h4 id="makefile扩展用法"><a href="#makefile扩展用法" class="headerlink" title="makefile扩展用法"></a>makefile扩展用法</h4><ul><li>变量（宏）：利用简单的变量定义冗长的编译选项，引用时需要添加$符号<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define macros for name of compiler </span></span><br><span class="line">CC = gcc</span><br><span class="line"><span class="comment"># Define a macro for the CC flags </span></span><br><span class="line">CCFLAGS = -D_DEBUG -g -m486</span><br><span class="line"><span class="comment"># A rule for building a object file </span></span><br><span class="line"><span class="section">test.o: test.c test.h</span></span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$(CCFLAGS)</span> test.c</span><br></pre></td></tr></table></figure><blockquote><p>makefile变量定义，=两边一定要有空格</p><p>makefile的变量定义要独立在规则之外，一般在最前</p></blockquote></li><li>GNU make的预定义变量<ul><li>$&lt; 第一个依赖文件的名称</li><li>$@ 目标的完整名称</li><li>$^ 所有的依赖文件，以空格分开，不包含重复的</li><li>AR 归档维护程序的名称，默认值ar ARFLAGS 归档维护程序的选项</li><li>AS 汇编程序的名称，默认值as ASGLAGS 汇编程序的选项</li><li>CC c编译器的名称，默认值cc CCFLAGS c编译器的选项 <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#makefile2 for exp</span></span><br><span class="line"><span class="section">main: main.o add.o del.o modify.o</span></span><br><span class="line">gcc -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">gcc -c <span class="variable">$&lt;</span></span><br><span class="line"><span class="section">add.o: add.c</span></span><br><span class="line">gcc -c <span class="variable">$&lt;</span></span><br><span class="line"><span class="section">del.o: del.c</span></span><br><span class="line">gcc -c <span class="variable">$&lt;</span></span><br><span class="line"><span class="section">modify.o: modify.c</span></span><br><span class="line">gcc -c <span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>自动化变量使用<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#makefile2 for exp</span></span><br><span class="line"><span class="section">main: main.o add.o del.o modify.o</span></span><br><span class="line">gcc -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"><span class="section">.c.0:</span></span><br><span class="line">gcc -c <span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h4><p>GNU make的一些内置的隐含规则定义了如何从不同依赖文件建立特定类型的目标文件</p><ul><li>后缀规则suffix rule<br>将一个具有某个后缀的文件转换为具有另一后缀的文件<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">.c.0:</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CCFLAGS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure></li><li>模式规则pattern rules<br>在目标的前面多一个%，同时可用来定义目标和依赖文件之间的关系<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o:%.c:</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CCFLAGS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="makefile目标编译"><a href="#makefile目标编译" class="headerlink" title="makefile目标编译"></a>makefile目标编译</h4><p>如果不指定目标，make会默认第一个target<br>规范的makefile文件有以下常见的几个目标：</p><ul><li>make all 编译所有目标</li><li>make clean 在编译结束后删除.o文件</li><li>make install 编译结束后将最终的可执行文件安装到系统的某一个位置<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#makefile for example</span></span><br><span class="line"><span class="section">example: example.o add.o modify.o delete.o</span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"><span class="section">.c.o:</span></span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span></span><br><span class="line"><span class="section">all: example</span></span><br><span class="line"><span class="section">clean: all</span></span><br><span class="line">rm -f *.o</span><br><span class="line"><span class="section">install: clean</span></span><br><span class="line">cp example /usr/local/bin</span><br></pre></td></tr></table></figure></li></ul><h2 id="GDB调试器和调试方法"><a href="#GDB调试器和调试方法" class="headerlink" title="GDB调试器和调试方法"></a>GDB调试器和调试方法</h2><h4 id="gdb的使用"><a href="#gdb的使用" class="headerlink" title="gdb的使用"></a>gdb的使用</h4><p>为使程序能被调试，需要gcc编译时用-g选项为程序编译时添加调试信息<br><code>gcc -g -o helloworld helloworld.c</code><br>然后在命令行键入gdb并回车就可以运行了</p><h4 id="gdb命令"><a href="#gdb命令" class="headerlink" title="gdb命令"></a>gdb命令</h4><ul><li><p>file 装入想要调试的可执行文件。</p></li><li><p>kill 终止正在调试的程序。</p></li><li><p>list 列出产生执行文件的源代码的一部分。</p></li><li><p>next 执行一行源代码但不进入函数内部。</p></li><li><p>step 执行一行源代码而且进入函数内部。</p></li><li><p>run 执行当前被调试的程序。</p></li><li><p>c 继续运行程序。</p></li><li><p>quit 终止gdb。</p></li><li><p>watch 使你能监视一个变量的值而不管它何时被改变。</p></li><li><p>backtrace 栈跟踪，查出代码被谁调用。</p></li><li><p>print 查看变量的值。</p></li><li><p>make 使你能不退出gdb就可以重新产生可执行文件。</p></li><li><p>shell  使你能不离开gdb就执行UNIX shell命令。</p></li><li><p>whatis 显示变量或函数类型。</p></li><li><p>break 在代码里设断点，这将使程序执行到这里时被挂起。</p><ul><li>break linenum 根据行号设置断点</li><li>break funcname 根据函数名设置断电</li><li>break filename:linenum/funcname 执行非当前源文件的某行或某函数的时候停止执行</li><li>break linenum/funcname if expr 根据条件停止程序执行</li></ul></li><li><p>info break 显示当前断点清单，包括到达断点处的次数等。</p></li><li><p>info files 显示被调试文件的详细信息。</p></li><li><p>info func 显示所有的函数名称。</p></li><li><p>info local 显示当函数中的局部变量信息。</p></li><li><p>info prog 显示被调试程序的执行状态。</p></li><li><p>delete [n] 删除第n个断点。</p></li><li><p>disable[n] 关闭第n个断点。</p></li><li><p>enable[n] 开启第n个断点。</p></li><li><p>ptype 显示结构定义。</p></li><li><p>set variable 设置变量的值。</p></li><li><p>call name(args)  调用并执行名为name，参数为args的函数。</p></li><li><p>Finish 终止当前函数并输出返回值。</p></li><li><p>return value 停止当前函数并返回value给调用者。</p></li></ul><h1 id="GTK"><a href="#GTK" class="headerlink" title="GTK"></a>GTK</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux终端的基本命令 (Unix下基本一致)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://annewqx.top/categories/Code/"/>
    
      <category term="Note" scheme="http://annewqx.top/categories/Code/Note/"/>
    
    
      <category term="Terminal" scheme="http://annewqx.top/tags/Terminal/"/>
    
      <category term="Linux" scheme="http://annewqx.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Dudes</title>
    <link href="http://annewqx.top/posts/27073/"/>
    <id>http://annewqx.top/posts/27073/</id>
    <published>2018-06-30T16:00:00.000Z</published>
    <updated>2020-02-23T07:56:39.328Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>有些想法就顺便记录一点<br>当你把笔放下<br>天黑请闭眼</p></blockquote><hr><a id="more"></a><h2 id="lt-0-gt"><a href="#lt-0-gt" class="headerlink" title="&lt;0&gt;"></a>&lt;0&gt;</h2><p>军棋，其人身高普通，国字脸，满脸写满了”啊我又怎么了“的无辜神情。<br>要是让我想一些关于他的画面，满脑子只有他半张着嘴，露出”啊？“的表情。<br>如果说我是思想上的矮子行动上的地精逻辑上的杠精，那么军棋便是思想上的巨人行动上的普通人逻辑上曾经的杠精，曾经一起互相杠的日子已经一去不复返很久了，现在大部分时候他更乐意用“啊那不是好棒棒”“🐂🍺”等等无聊的句式来断绝被我拉入互杠大战的可能性。<br>大一军棋是班长，我是团支书。<br>大二都“卸任”，套用其人原话：“当班委？留级当吗？”<br>军棋的发小勇哥是隔壁班班长。<br>勇哥是年级第一，军棋年级二十名左右。<br>我是我们院倒数二十名左右。<br>分数这个东西，一开始差距特别大还反复比较仔细分析患得患失自怨自艾，时间久了也就自我习惯自我接受了。只是偶尔还是会冒出“都是平时一起吹水的兄弟为什么别人那么优秀”的想法。<br>说句老实话，在我们这样的工科强校，只有成绩好的人会告诉无知懵懂的高中孩子成绩这东西没啥重要的，学酥学渣如我之流只会咬牙切齿的历数成绩好能享受到的种种优势：两千软妹币中欧交流的机会只属于成绩5%的佼佼者，学院的暑期集训只收年级前15%的优秀者……不胜枚举，失去的多了也就麻木了。<br>在大一结束的假期，2018世界杯的赛季，巴西踢墨西哥。彼时我等学渣已经放假逃之夭夭回家当咸鱼了，优秀的人比如军棋和勇哥耗在学校等着再晚一个星期享受两千软妹币的欧洲半月游，勇哥选了去法国，军棋选了去波兰。先是零点军棋给我发了一串“学校网络断了去小南门的酒吧了”“这酒有意思叫今晚不回家”“哇靠这酒有点烈啊”“今晚不回家啊哈哈哈哈”“我缓过来了缓过来了”“哎哟还是昏的”。我听着没啥大碍也就没仔细问，看着球赛插科打诨几句就准备睡了。睡前瞅见微信里勇哥也发了几句“军棋喝今晚不回家遭了””他好像有点不正常“没来得及理就堕入梦乡。<br>第二天十点起来军旗的消息30+，1:00：”勇哥这个畜生不是人，拉着小姐姐就走了留我一个人“，2:45：”我一个人在小南门晃来晃起真开心“”发现了个通宵网吧哈哈哈哈“，3:00：”没带身份证网吧不让进“”我一个人流落街头好惨“，3:45：”勇哥真的不是朋友““不想回去吵醒阿姨给我开门”……7:45：“回宿舍睡觉了”。<br>14:45，我：“哈哈哈哈哈哈哈哈哈哈哈哈哈哈哦。”<br>我以为这场一时兴起的小南门青春徘徊剧场差不多就结束了，直到下午我刷知乎看见勇哥的问题关注track：<br>“<br>43分钟前——‘已经有女朋友了，但又遇到更喜欢的对象怎么办？’<br>40分钟前——‘你错过了哪些异性对你的暗示？你的哪些暗示没有被异性理解？’<br>36分钟前——‘男生什么状态才体现出他已经爱上你了？’<br>35分钟前——‘有多少人从大学恋爱到结婚，你们幸福吗？’”<br>有感情方面的track，其实我很能理解，上半学期我想暗示Chris的时候，疯狂的在知乎收藏“什么时候应该表白？”“知道没有结果的感情还有没有必要继续”……可是这个情况完全不一样啊，这是先绿现任再去许下天长地久的大型三观崩塌现场啊！军旗勇哥和我三个人做了一学期数学建模校内赛写了三篇水论文共度清明端午劳动三个小长假，我多多少少的还是知道勇哥此人曾是个浪子，高中情债无数，<br>当下我就截屏存图，去问军旗头天晚上在他和勇哥身上到底发生了什么。<br>军旗：“我那么可怜我身上能发生什么？你还不如问我看到了什么。”<br>“那你目睹了啥子哟？”<br>“不过是抛弃朋友，<br>和小姐姐操场看星，<br>凌晨四点吵醒阿姨。”<br>至于勇哥，在微信上满口“你冤枉我了我不记得我关注过这些我不是我没有你别瞎说”之后，骂了一句“军旗真的不够朋友”</p><p>我从来不觉得军棋会有什么心理上的问题————朋友之间太熟悉了大概会习惯性忽略他们近来的内心感受，而且大部分聊天的时候我们很少谈比较本质的最近心情怎么样这种话题，大部分时候是很具像化的“后门外卖的小龙虾不要点，一宿舍三个人拉肚子了”“哇靠你赶紧看一下今年wwdc的评价2018newipad买吧买吧”“新看个网飞的剧赛博朋克风格超好的”“靠我在看书你不要发消息诱惑我玩手机”……<br>晚上我刷知乎，看见他关注了“抑郁是种什么样的体验”。<br>一时无言。<br>有意无意问了几句，他倒是心态成熟而态度敷衍，“很正常啊”，“哦哦嗯嗯就那样”。<br>我也觉得颇为无趣，便不再调解。<br>却没想到从那之后到现在再难有只言片语交流。</p><p>开学听媛媛媛说了一句话，才知道其实谁都知道。</p><p>“军旗要是再高一点再帅一点，你们早就在一起了。”</p><p>&lt;1&gt;<br>Chris Chen<br>&lt;2&gt;<br>Mikey Yang<br>&lt;3&gt;<br>宇航、机车和亮亮们<br>&lt;4&gt;<br>195<br>&lt;5&gt;<br>Beijing spider-man<br>&lt;6&gt;<br>Cute KM boy finally found his golden-girl</p><p>&lt;7&gt;<br>Hekla</p><p>&lt;8&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;有些想法就顺便记录一点&lt;br&gt;当你把笔放下&lt;br&gt;天黑请闭眼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://annewqx.top/categories/Life/"/>
    
      <category term="Fragments" scheme="http://annewqx.top/categories/Life/Fragments/"/>
    
    
  </entry>
  
</feed>
